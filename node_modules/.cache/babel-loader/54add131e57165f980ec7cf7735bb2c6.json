{"ast":null,"code":"import _slicedToArray from \"/Users/4e65696c/Documents/GitHub/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport warning from 'warning';\nimport { getThemeProps, useTheme } from '@material-ui/styles'; // This variable will be true once the server-side hydration is completed.\n\nlet hydrationCompleted = false;\n\nfunction useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n  process.env.NODE_ENV !== \"production\" ? warning(typeof queryInput !== 'function' || theme !== null, ['Material-UI: the `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n')) : void 0;\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  const _extends2 = _extends({}, props, {}, options),\n        _extends2$defaultMatc = _extends2.defaultMatches,\n        defaultMatches = _extends2$defaultMatc === void 0 ? false : _extends2$defaultMatc,\n        _extends2$noSsr = _extends2.noSsr,\n        noSsr = _extends2$noSsr === void 0 ? false : _extends2$noSsr,\n        _extends2$ssrMatchMed = _extends2.ssrMatchMedia,\n        ssrMatchMedia = _extends2$ssrMatchMed === void 0 ? null : _extends2$ssrMatchMed;\n\n  const _React$useState = React.useState(() => {\n    if ((hydrationCompleted || noSsr) && supportMatchMedia) {\n      return window.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        match = _React$useState2[0],\n        setMatch = _React$useState2[1];\n\n  React.useEffect(() => {\n    let active = true;\n    hydrationCompleted = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = window.matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, supportMatchMedia]);\n  return match;\n}\n\nexport function testReset() {\n  hydrationCompleted = false;\n}\nexport default useMediaQuery;","map":null,"metadata":{},"sourceType":"module"}