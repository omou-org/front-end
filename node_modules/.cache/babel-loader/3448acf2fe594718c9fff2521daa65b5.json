{"ast":null,"code":"import _objectSpread from \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as types from \"./actionTypes\";\nimport axios from \"axios\";\nconst instance = axios.create({\n  baseURL: \"http://localhost:8000\"\n});\nconst typeToEndpoint = {\n  \"student\": \"/account/student/\",\n  \"parent\": \"/account/parent/\",\n  \"instructor\": \"/account/instructor/\",\n  \"course\": \"/courses/catalog/\"\n};\nconst typeToFetchActions = {\n  \"student\": [types.FETCH_STUDENT_SUCCESSFUL, types.FETCH_STUDENT_FAILED],\n  \"parent\": [types.FETCH_PARENT_SUCCESSFUL, types.FETCH_PARENT_FAILED],\n  \"instructor\": [types.FETCH_INSTRUCTOR_SUCCESSFUL, types.FETCH_INSTRUCTOR_FAILED],\n  \"course\": [types.FETCH_COURSE_SUCCESSFUL, types.FETCH_COURSE_FAILED]\n};\nconst typeToPostActions = {\n  \"student\": [types.POST_STUDENT_SUCCESSFUL, types.POST_STUDENT_FAILED],\n  \"parent\": [types.POST_PARENT_SUCCESSFUL, types.POST_PARENT_FAILED],\n  \"instructor\": [types.POST_INSTRUCTOR_SUCCESSFUL, types.POST_INSTRUCTOR_FAILED],\n  \"course\": [types.POST_COURSE_SUCCESSFUL, types.POST_COURSE_FAILED],\n  \"course category\": [types.POST_CATEGORY_SUCCESSFUL, types.POST_CATEGORY_FAILED]\n};\nexport const fetchData = type => {\n  if (typeToEndpoint.hasOwnProperty(type)) {\n    const endpoint = typeToEndpoint[type];\n\n    const _typeToFetchActions$t = _slicedToArray(typeToFetchActions[type], 2),\n          successAction = _typeToFetchActions$t[0],\n          failAction = _typeToFetchActions$t[1];\n\n    return dispatch => instance.get(endpoint, {\n      headers: {\n        \"Authorization\": \"Token \".concat(sessionStorage.getItem(\"authToken\"))\n      }\n    }).then(({\n      data\n    }) => {\n      dispatch({\n        type: successAction,\n        payload: data\n      });\n    }).catch(error => {\n      dispatch({\n        type: failAction,\n        payload: error\n      });\n    });\n  } else {\n    console.error(\"Invalid data type \".concat(type, \", must be one of \").concat(Object.keys(typeToEndpoint)));\n  }\n};\nexport const postData = (type, body) => {\n  if (typeToEndpoint.hasOwnProperty(type)) {\n    const endpoint = typeToEndpoint[type];\n\n    const _typeToPostActions$ty = _slicedToArray(typeToPostActions[type], 2),\n          successAction = _typeToPostActions$ty[0],\n          failAction = _typeToPostActions$ty[1];\n\n    return dispatch => new Promise(resolve => {\n      dispatch({\n        type: types.SUBMIT_INITIATED,\n        payload: null\n      });\n      resolve();\n    }).then(() => {\n      instance.post(endpoint, body, {\n        headers: {\n          \"Authorization\": \"Token \".concat(sessionStorage.getItem(\"authToken\")),\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(({\n        data\n      }) => {\n        dispatch({\n          type: successAction,\n          payload: data\n        });\n      }).catch(error => {\n        dispatch({\n          type: failAction,\n          payload: error\n        });\n      });\n    });\n  } else {\n    console.error(\"Invalid data type \".concat(type, \", must be one of \").concat(Object.keys(typeToEndpoint)));\n  }\n};\nexport const patchData = (type, body, id) => {\n  if (typeToEndpoint.hasOwnProperty(type)) {\n    const endpoint = typeToEndpoint[type];\n\n    const _typeToPostActions$ty2 = _slicedToArray(typeToPostActions[type], 2),\n          successAction = _typeToPostActions$ty2[0],\n          failAction = _typeToPostActions$ty2[1];\n\n    return dispatch => new Promise(resolve => {\n      dispatch({\n        type: types.SUBMIT_INITIATED,\n        payload: null\n      });\n      resolve();\n    }).then(() => {\n      instance.patch(\"\".concat(endpoint).concat(id, \"/\"), body, {\n        headers: {\n          \"Authorization\": \"Token \".concat(sessionStorage.getItem(\"authToken\")),\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(({\n        data\n      }) => {\n        dispatch({\n          type: successAction,\n          payload: data\n        });\n      }).catch(error => {\n        dispatch({\n          type: failAction,\n          payload: error\n        });\n      });\n    });\n  } else {\n    console.error(\"Invalid data type \".concat(type, \", must be one of \").concat(Object.keys(typeToEndpoint)));\n  }\n};\nexport const submitParentAndStudent = (parent, student, parentID, studentID) => {\n  const studentEndpoint = typeToEndpoint[\"student\"];\n  const parentEndpoint = typeToEndpoint[\"parent\"];\n\n  const _typeToPostActions$st = _slicedToArray(typeToPostActions[\"student\"], 2),\n        studentSuccessAction = _typeToPostActions$st[0],\n        studentFailAction = _typeToPostActions$st[1];\n\n  const _typeToPostActions$pa = _slicedToArray(typeToPostActions[\"parent\"], 2),\n        parentSuccessAction = _typeToPostActions$pa[0],\n        parentFailAction = _typeToPostActions$pa[1];\n\n  return dispatch => new Promise(resolve => {\n    dispatch({\n      type: types.SUBMIT_INITIATED,\n      payload: null\n    });\n    resolve();\n  }).then(() => {\n    instance.request({\n      \"data\": parent,\n      \"headers\": {\n        \"Authorization\": \"Token \".concat(sessionStorage.getItem(\"authToken\")),\n        \"Content-Type\": \"application/json\"\n      },\n      \"method\": parentID ? \"patch\" : \"post\",\n      \"url\": parentID ? \"\".concat(parentEndpoint).concat(parentID, \"/\") : parentEndpoint\n    }).then(parentResponse => {\n      dispatch({\n        type: parentSuccessAction,\n        payload: parentResponse.data\n      });\n      instance.request({\n        \"data\": _objectSpread({}, student, {\n          \"parent\": parentResponse.data.user.id\n        }),\n        \"headers\": {\n          \"Authorization\": \"Token \".concat(sessionStorage.getItem(\"authToken\")),\n          \"Content-Type\": \"application/json\"\n        },\n        \"method\": studentID ? \"patch\" : \"post\",\n        \"url\": studentID ? \"\".concat(studentEndpoint).concat(studentID, \"/\") : studentEndpoint\n      }).then(studentResponse => {\n        dispatch({\n          type: studentSuccessAction,\n          payload: studentResponse.data\n        });\n      }, error => {\n        dispatch({\n          type: studentFailAction,\n          payload: error\n        });\n      });\n    }, error => {\n      dispatch({\n        type: parentFailAction,\n        payload: error\n      });\n    });\n  });\n};","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/actions/rootActions.js"],"names":["types","axios","instance","create","baseURL","typeToEndpoint","typeToFetchActions","FETCH_STUDENT_SUCCESSFUL","FETCH_STUDENT_FAILED","FETCH_PARENT_SUCCESSFUL","FETCH_PARENT_FAILED","FETCH_INSTRUCTOR_SUCCESSFUL","FETCH_INSTRUCTOR_FAILED","FETCH_COURSE_SUCCESSFUL","FETCH_COURSE_FAILED","typeToPostActions","POST_STUDENT_SUCCESSFUL","POST_STUDENT_FAILED","POST_PARENT_SUCCESSFUL","POST_PARENT_FAILED","POST_INSTRUCTOR_SUCCESSFUL","POST_INSTRUCTOR_FAILED","POST_COURSE_SUCCESSFUL","POST_COURSE_FAILED","POST_CATEGORY_SUCCESSFUL","POST_CATEGORY_FAILED","fetchData","type","hasOwnProperty","endpoint","successAction","failAction","dispatch","get","headers","sessionStorage","getItem","then","data","payload","catch","error","console","Object","keys","postData","body","Promise","resolve","SUBMIT_INITIATED","post","patchData","id","patch","submitParentAndStudent","parent","student","parentID","studentID","studentEndpoint","parentEndpoint","studentSuccessAction","studentFailAction","parentSuccessAction","parentFailAction","request","parentResponse","user","studentResponse"],"mappings":"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","sourcesContent":["import * as types from \"./actionTypes\";\nimport axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"http://localhost:8000\",\n});\n\nconst typeToEndpoint = {\n    \"student\": \"/account/student/\",\n    \"parent\": \"/account/parent/\",\n    \"instructor\": \"/account/instructor/\",\n    \"course\": \"/courses/catalog/\",\n};\n\nconst typeToFetchActions = {\n    \"student\": [\n        types.FETCH_STUDENT_SUCCESSFUL,\n        types.FETCH_STUDENT_FAILED,\n    ],\n    \"parent\": [\n        types.FETCH_PARENT_SUCCESSFUL,\n        types.FETCH_PARENT_FAILED,\n    ],\n    \"instructor\": [\n        types.FETCH_INSTRUCTOR_SUCCESSFUL,\n        types.FETCH_INSTRUCTOR_FAILED,\n    ],\n    \"course\": [\n        types.FETCH_COURSE_SUCCESSFUL,\n        types.FETCH_COURSE_FAILED,\n    ],\n};\n\nconst typeToPostActions = {\n    \"student\": [\n        types.POST_STUDENT_SUCCESSFUL,\n        types.POST_STUDENT_FAILED,\n    ],\n    \"parent\": [\n        types.POST_PARENT_SUCCESSFUL,\n        types.POST_PARENT_FAILED,\n    ],\n    \"instructor\": [\n        types.POST_INSTRUCTOR_SUCCESSFUL,\n        types.POST_INSTRUCTOR_FAILED,\n    ],\n    \"course\": [\n        types.POST_COURSE_SUCCESSFUL,\n        types.POST_COURSE_FAILED,\n    ],\n    \"course category\": [\n        types.POST_CATEGORY_SUCCESSFUL,\n        types.POST_CATEGORY_FAILED,\n    ],\n};\n\nexport const fetchData = (type) => {\n    if (typeToEndpoint.hasOwnProperty(type)) {\n        const endpoint = typeToEndpoint[type];\n        const [successAction, failAction] = typeToFetchActions[type];\n        return (dispatch) => instance.get(endpoint, {\n            headers: {\n                \"Authorization\": `Token ${sessionStorage.getItem(\"authToken\")}`,\n            },\n        })\n            .then(({data}) => {\n                dispatch({\n                    type: successAction,\n                    payload: data,\n                });\n            })\n            .catch((error) => {\n                dispatch({type: failAction, payload: error});\n            });\n    } else {\n        console.error(`Invalid data type ${type}, must be one of ${Object.keys(typeToEndpoint)}`);\n    }\n};\n\nexport const postData = (type, body) => {\n    if (typeToEndpoint.hasOwnProperty(type)) {\n        const endpoint = typeToEndpoint[type];\n        const [successAction, failAction] = typeToPostActions[type];\n        return (dispatch) => new Promise((resolve) => {\n            dispatch({\n                type: types.SUBMIT_INITIATED,\n                payload: null,\n            });\n            resolve();\n        }).then(() => {\n            instance.post(endpoint, body, {\n                headers: {\n                    \"Authorization\": `Token ${sessionStorage.getItem(\"authToken\")}`,\n                    \"Content-Type\": \"application/json\",\n                },\n            })\n                .then(({data}) => {\n                    dispatch({\n                        type: successAction,\n                        payload: data,\n                    });\n                })\n                .catch((error) => {\n                    dispatch({type: failAction, payload: error});\n                });\n        });\n    } else {\n        console.error(`Invalid data type ${type}, must be one of ${Object.keys(typeToEndpoint)}`);\n    }\n};\n\nexport const patchData = (type, body, id) => {\n    if (typeToEndpoint.hasOwnProperty(type)) {\n        const endpoint = typeToEndpoint[type];\n        const [successAction, failAction] = typeToPostActions[type];\n        return (dispatch) => new Promise((resolve) => {\n            dispatch({\n                type: types.SUBMIT_INITIATED,\n                payload: null,\n            });\n            resolve();\n        }).then(() => {\n            instance.patch(`${endpoint}${id}/`, body, {\n                headers: {\n                    \"Authorization\": `Token ${sessionStorage.getItem(\"authToken\")}`,\n                    \"Content-Type\": \"application/json\",\n                },\n            })\n                .then(({data}) => {\n                    dispatch({\n                        type: successAction,\n                        payload: data,\n                    });\n                })\n                .catch((error) => {\n                    dispatch({type: failAction, payload: error});\n                });\n        });\n    } else {\n        console.error(`Invalid data type ${type}, must be one of ${Object.keys(typeToEndpoint)}`);\n    }\n};\n\nexport const submitParentAndStudent = (parent, student, parentID, studentID) => {\n    const studentEndpoint = typeToEndpoint[\"student\"];\n    const parentEndpoint = typeToEndpoint[\"parent\"];\n    const [studentSuccessAction, studentFailAction] = typeToPostActions[\"student\"];\n    const [parentSuccessAction, parentFailAction] = typeToPostActions[\"parent\"];\n    return (dispatch) => new Promise((resolve) => {\n        dispatch({\n            type: types.SUBMIT_INITIATED,\n            payload: null,\n        });\n        resolve();\n    }).then(() => {\n        instance.request({\n            \"data\": parent,\n            \"headers\": {\n                \"Authorization\": `Token ${sessionStorage.getItem(\"authToken\")}`,\n                \"Content-Type\": \"application/json\",\n            },\n            \"method\": parentID ? \"patch\" : \"post\",\n            \"url\": parentID ? `${parentEndpoint}${parentID}/` : parentEndpoint,\n        })\n            .then((parentResponse) => {\n                dispatch({\n                    type: parentSuccessAction,\n                    payload: parentResponse.data,\n                });\n                instance.request({\n                    \"data\": {\n                        ...student,\n                        \"parent\": parentResponse.data.user.id,\n                    },\n                    \"headers\": {\n                        \"Authorization\": `Token ${sessionStorage.getItem(\"authToken\")}`,\n                        \"Content-Type\": \"application/json\",\n                    },\n                    \"method\": studentID ? \"patch\" : \"post\",\n                    \"url\": studentID ? `${studentEndpoint}${studentID}/` : studentEndpoint,\n                })\n                    .then((studentResponse) => {\n                        dispatch({\n                            type: studentSuccessAction,\n                            payload: studentResponse.data,\n                        });\n                    }, (error) => {\n                        dispatch({type: studentFailAction, payload: error});\n                    });\n            }, (error) => {\n                dispatch({type: parentFailAction, payload: error});\n            });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}