{"ast":null,"code":"/*!\nFullCalendar List View Plugin v4.2.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core')) : typeof define === 'function' && define.amd ? define(['exports', '@fullcalendar/core'], factory) : (global = global || self, factory(global.FullCalendarList = {}, global.FullCalendar));\n})(this, function (exports, core) {\n  'use strict';\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var ListEventRenderer =\n  /** @class */\n  function (_super) {\n    __extends(ListEventRenderer, _super);\n\n    function ListEventRenderer(listView) {\n      var _this = _super.call(this, listView.context) || this;\n\n      _this.listView = listView;\n      return _this;\n    }\n\n    ListEventRenderer.prototype.attachSegs = function (segs) {\n      if (!segs.length) {\n        this.listView.renderEmptyMessage();\n      } else {\n        this.listView.renderSegList(segs);\n      }\n    };\n\n    ListEventRenderer.prototype.detachSegs = function () {}; // generates the HTML for a single event row\n\n\n    ListEventRenderer.prototype.renderSegHtml = function (seg) {\n      var _a = this.context,\n          view = _a.view,\n          theme = _a.theme;\n      var eventRange = seg.eventRange;\n      var eventDef = eventRange.def;\n      var eventInstance = eventRange.instance;\n      var eventUi = eventRange.ui;\n      var url = eventDef.url;\n      var classes = ['fc-list-item'].concat(eventUi.classNames);\n      var bgColor = eventUi.backgroundColor;\n      var timeHtml;\n\n      if (eventDef.allDay) {\n        timeHtml = core.getAllDayHtml(view);\n      } else if (core.isMultiDayRange(eventRange.range)) {\n        if (seg.isStart) {\n          timeHtml = core.htmlEscape(this._getTimeText(eventInstance.range.start, seg.end, false // allDay\n          ));\n        } else if (seg.isEnd) {\n          timeHtml = core.htmlEscape(this._getTimeText(seg.start, eventInstance.range.end, false // allDay\n          ));\n        } else {\n          // inner segment that lasts the whole day\n          timeHtml = core.getAllDayHtml(view);\n        }\n      } else {\n        // Display the normal time text for the *event's* times\n        timeHtml = core.htmlEscape(this.getTimeText(eventRange));\n      }\n\n      if (url) {\n        classes.push('fc-has-url');\n      }\n\n      return '<tr class=\"' + classes.join(' ') + '\">' + (this.displayEventTime ? '<td class=\"fc-list-item-time ' + theme.getClass('widgetContent') + '\">' + (timeHtml || '') + '</td>' : '') + '<td class=\"fc-list-item-marker ' + theme.getClass('widgetContent') + '\">' + '<span class=\"fc-event-dot\"' + (bgColor ? ' style=\"background-color:' + bgColor + '\"' : '') + '></span>' + '</td>' + '<td class=\"fc-list-item-title ' + theme.getClass('widgetContent') + '\">' + '<a' + (url ? ' href=\"' + core.htmlEscape(url) + '\"' : '') + '>' + core.htmlEscape(eventDef.title || '') + '</a>' + '</td>' + '</tr>';\n    }; // like \"4:00am\"\n\n\n    ListEventRenderer.prototype.computeEventTimeFormat = function () {\n      return {\n        hour: 'numeric',\n        minute: '2-digit',\n        meridiem: 'short'\n      };\n    };\n\n    return ListEventRenderer;\n  }(core.FgEventRenderer);\n  /*\n  Responsible for the scroller, and forwarding event-related actions into the \"grid\".\n  */\n\n\n  var ListView =\n  /** @class */\n  function (_super) {\n    __extends(ListView, _super);\n\n    function ListView(context, viewSpec, dateProfileGenerator, parentEl) {\n      var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;\n\n      _this.computeDateVars = core.memoize(computeDateVars);\n      _this.eventStoreToSegs = core.memoize(_this._eventStoreToSegs);\n      var eventRenderer = _this.eventRenderer = new ListEventRenderer(_this);\n      _this.renderContent = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer));\n\n      _this.el.classList.add('fc-list-view');\n\n      var listViewClassNames = (_this.theme.getClass('listView') || '').split(' '); // wish we didn't have to do this\n\n      for (var _i = 0, listViewClassNames_1 = listViewClassNames; _i < listViewClassNames_1.length; _i++) {\n        var listViewClassName = listViewClassNames_1[_i];\n\n        if (listViewClassName) {\n          // in case input was empty string\n          _this.el.classList.add(listViewClassName);\n        }\n      }\n\n      _this.scroller = new core.ScrollComponent('hidden', // overflow x\n      'auto' // overflow y\n      );\n\n      _this.el.appendChild(_this.scroller.el);\n\n      _this.contentEl = _this.scroller.el; // shortcut\n\n      context.calendar.registerInteractiveComponent(_this, {\n        el: _this.el // TODO: make aware that it doesn't do Hits\n\n      });\n      return _this;\n    }\n\n    ListView.prototype.render = function (props) {\n      var _a = this.computeDateVars(props.dateProfile),\n          dayDates = _a.dayDates,\n          dayRanges = _a.dayRanges;\n\n      this.dayDates = dayDates;\n      this.renderContent(this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges));\n    };\n\n    ListView.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this.scroller.destroy(); // will remove the Grid too\n\n      this.calendar.unregisterInteractiveComponent(this);\n    };\n\n    ListView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n      _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto);\n\n      this.eventRenderer.computeSizes(isResize);\n      this.eventRenderer.assignSizes(isResize);\n      this.scroller.clear(); // sets height to 'auto' and clears overflow\n\n      if (!isAuto) {\n        this.scroller.setHeight(this.computeScrollerHeight(viewHeight));\n      }\n    };\n\n    ListView.prototype.computeScrollerHeight = function (viewHeight) {\n      return viewHeight - core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n    };\n\n    ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n      return this.eventRangesToSegs(core.sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.nextDayThreshold).fg, dayRanges);\n    };\n\n    ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n      var segs = [];\n\n      for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n        var eventRange = eventRanges_1[_i];\n        segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n      }\n\n      return segs;\n    };\n\n    ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n      var _a = this,\n          dateEnv = _a.dateEnv,\n          nextDayThreshold = _a.nextDayThreshold;\n\n      var range = eventRange.range;\n      var allDay = eventRange.def.allDay;\n      var dayIndex;\n      var segRange;\n      var seg;\n      var segs = [];\n\n      for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex++) {\n        segRange = core.intersectRanges(range, dayRanges[dayIndex]);\n\n        if (segRange) {\n          seg = {\n            component: this,\n            eventRange: eventRange,\n            start: segRange.start,\n            end: segRange.end,\n            isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n            isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n            dayIndex: dayIndex\n          };\n          segs.push(seg); // detect when range won't go fully into the next day,\n          // and mutate the latest seg to the be the end.\n\n          if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n            seg.end = range.end;\n            seg.isEnd = true;\n            break;\n          }\n        }\n      }\n\n      return segs;\n    };\n\n    ListView.prototype.renderEmptyMessage = function () {\n      this.contentEl.innerHTML = '<div class=\"fc-list-empty-wrap2\">' + // TODO: try less wraps\n      '<div class=\"fc-list-empty-wrap1\">' + '<div class=\"fc-list-empty\">' + core.htmlEscape(this.opt('noEventsMessage')) + '</div>' + '</div>' + '</div>';\n    }; // called by ListEventRenderer\n\n\n    ListView.prototype.renderSegList = function (allSegs) {\n      var segsByDay = this.groupSegsByDay(allSegs); // sparse array\n\n      var dayIndex;\n      var daySegs;\n      var i;\n      var tableEl = core.htmlToElement('<table class=\"fc-list-table ' + this.calendar.theme.getClass('tableList') + '\"><tbody></tbody></table>');\n      var tbodyEl = tableEl.querySelector('tbody');\n\n      for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {\n        daySegs = segsByDay[dayIndex];\n\n        if (daySegs) {\n          // sparse array, so might be undefined\n          // append a day header\n          tbodyEl.appendChild(this.buildDayHeaderRow(this.dayDates[dayIndex]));\n          daySegs = this.eventRenderer.sortEventSegs(daySegs);\n\n          for (i = 0; i < daySegs.length; i++) {\n            tbodyEl.appendChild(daySegs[i].el); // append event row\n          }\n        }\n      }\n\n      this.contentEl.innerHTML = '';\n      this.contentEl.appendChild(tableEl);\n    }; // Returns a sparse array of arrays, segs grouped by their dayIndex\n\n\n    ListView.prototype.groupSegsByDay = function (segs) {\n      var segsByDay = []; // sparse array\n\n      var i;\n      var seg;\n\n      for (i = 0; i < segs.length; i++) {\n        seg = segs[i];\n        (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n      }\n\n      return segsByDay;\n    }; // generates the HTML for the day headers that live amongst the event rows\n\n\n    ListView.prototype.buildDayHeaderRow = function (dayDate) {\n      var dateEnv = this.dateEnv;\n      var mainFormat = core.createFormatter(this.opt('listDayFormat')); // TODO: cache\n\n      var altFormat = core.createFormatter(this.opt('listDayAltFormat')); // TODO: cache\n\n      return core.createElement('tr', {\n        className: 'fc-list-heading',\n        'data-date': dateEnv.formatIso(dayDate, {\n          omitTime: true\n        })\n      }, '<td class=\"' + (this.calendar.theme.getClass('tableListHeading') || this.calendar.theme.getClass('widgetHeader')) + '\" colspan=\"3\">' + (mainFormat ? core.buildGotoAnchorHtml(this, dayDate, {\n        'class': 'fc-list-heading-main'\n      }, core.htmlEscape(dateEnv.format(dayDate, mainFormat)) // inner HTML\n      ) : '') + (altFormat ? core.buildGotoAnchorHtml(this, dayDate, {\n        'class': 'fc-list-heading-alt'\n      }, core.htmlEscape(dateEnv.format(dayDate, altFormat)) // inner HTML\n      ) : '') + '</td>');\n    };\n\n    return ListView;\n  }(core.View);\n\n  ListView.prototype.fgSegSelector = '.fc-list-item'; // which elements accept event actions\n\n  function computeDateVars(dateProfile) {\n    var dayStart = core.startOfDay(dateProfile.renderRange.start);\n    var viewEnd = dateProfile.renderRange.end;\n    var dayDates = [];\n    var dayRanges = [];\n\n    while (dayStart < viewEnd) {\n      dayDates.push(dayStart);\n      dayRanges.push({\n        start: dayStart,\n        end: core.addDays(dayStart, 1)\n      });\n      dayStart = core.addDays(dayStart, 1);\n    }\n\n    return {\n      dayDates: dayDates,\n      dayRanges: dayRanges\n    };\n  }\n\n  var main = core.createPlugin({\n    views: {\n      list: {\n        class: ListView,\n        buttonTextKey: 'list',\n        listDayFormat: {\n          month: 'long',\n          day: 'numeric',\n          year: 'numeric' // like \"January 1, 2016\"\n\n        }\n      },\n      listDay: {\n        type: 'list',\n        duration: {\n          days: 1\n        },\n        listDayFormat: {\n          weekday: 'long' // day-of-week is all we need. full date is probably in header\n\n        }\n      },\n      listWeek: {\n        type: 'list',\n        duration: {\n          weeks: 1\n        },\n        listDayFormat: {\n          weekday: 'long'\n        },\n        listDayAltFormat: {\n          month: 'long',\n          day: 'numeric',\n          year: 'numeric'\n        }\n      },\n      listMonth: {\n        type: 'list',\n        duration: {\n          month: 1\n        },\n        listDayAltFormat: {\n          weekday: 'long' // day-of-week is nice-to-have\n\n        }\n      },\n      listYear: {\n        type: 'list',\n        duration: {\n          year: 1\n        },\n        listDayAltFormat: {\n          weekday: 'long' // day-of-week is nice-to-have\n\n        }\n      }\n    }\n  });\n  exports.ListView = ListView;\n  exports.default = main;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}