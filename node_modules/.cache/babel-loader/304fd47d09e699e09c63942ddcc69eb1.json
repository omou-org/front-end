{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport warning from 'warning';\nimport deepmerge from 'deepmerge'; // < 1kb payload overhead when lodash/merge is > 3kb.\n// Support for the jss-expand plugin.\n\nfunction arrayMerge(destination, source) {\n  return source;\n}\n\nfunction getStylesCreator(stylesOrCreator) {\n  const themingEnabled = typeof stylesOrCreator === 'function';\n  process.env.NODE_ENV !== \"production\" ? warning(typeof stylesOrCreator === 'object' || themingEnabled, ['Material-UI: the first argument provided to withStyles() is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n')) : void 0;\n\n  function create(theme, name) {\n    const styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n\n    if (!name || !theme.overrides || !theme.overrides[name]) {\n      return styles;\n    }\n\n    const overrides = theme.overrides[name];\n\n    const stylesWithOverrides = _extends({}, styles);\n\n    Object.keys(overrides).forEach(key => {\n      process.env.NODE_ENV !== \"production\" ? warning(stylesWithOverrides[key], ['Material-UI: you are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.overrides.\").concat(name, \"`.\")].join('\\n')) : void 0;\n      stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key], {\n        arrayMerge\n      });\n    });\n    return stylesWithOverrides;\n  }\n\n  return {\n    create,\n    options: {},\n    themingEnabled\n  };\n}\n\nexport default getStylesCreator;","map":null,"metadata":{},"sourceType":"module"}