{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/* eslint-disable no-underscore-dangle */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport createBroadcast from 'brcast';\nimport { exactProp, ponyfillGlobal } from '@material-ui/utils';\nimport themeListener, { CHANNEL } from './themeListener';\n/**\n * This component takes a `theme` property.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\nexport class MuiThemeProviderOld extends React.Component {\n  // We are not using the React state in order to avoid unnecessary rerender.\n  constructor(props, context) {\n    super(); // Get the outer theme from the context, can be null\n\n    this.broadcast = createBroadcast();\n    this.outerTheme = themeListener.initial(context); // Propagate the theme so it can be accessed by the children\n\n    this.broadcast.setState(this.mergeOuterLocalTheme(props.theme));\n  }\n\n  getChildContext() {\n    const _this$props = this.props,\n          disableStylesGeneration = _this$props.disableStylesGeneration,\n          sheetsCache = _this$props.sheetsCache,\n          sheetsManager = _this$props.sheetsManager;\n    const muiThemeProviderOptions = this.context.muiThemeProviderOptions || {};\n\n    if (disableStylesGeneration !== undefined) {\n      muiThemeProviderOptions.disableStylesGeneration = disableStylesGeneration;\n    }\n\n    if (sheetsCache !== undefined) {\n      muiThemeProviderOptions.sheetsCache = sheetsCache;\n    }\n\n    if (sheetsManager !== undefined) {\n      muiThemeProviderOptions.sheetsManager = sheetsManager;\n    }\n\n    return {\n      [CHANNEL]: this.broadcast,\n      muiThemeProviderOptions\n    };\n  }\n\n  componentDidMount() {\n    // Subscribe on the outer theme, if present\n    this.unsubscribeId = themeListener.subscribe(this.context, outerTheme => {\n      this.outerTheme = outerTheme; // Forward the parent theme update to the children\n\n      this.broadcast.setState(this.mergeOuterLocalTheme(this.props.theme));\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Propagate a local theme update\n    if (this.props.theme !== prevProps.theme) {\n      this.broadcast.setState(this.mergeOuterLocalTheme(this.props.theme));\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.unsubscribeId !== null) {\n      themeListener.unsubscribe(this.context, this.unsubscribeId);\n    }\n  } // Simple merge between the outer theme and the local theme\n\n\n  mergeOuterLocalTheme(localTheme) {\n    // To support composition of theme.\n    if (typeof localTheme === 'function') {\n      process.env.NODE_ENV !== \"production\" ? warning(this.outerTheme, ['Material-UI: you are providing a theme function property ' + 'to the MuiThemeProvider component:', '<MuiThemeProvider theme={outerTheme => outerTheme} />', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n')) : void 0;\n      return localTheme(this.outerTheme);\n    }\n\n    if (!this.outerTheme) {\n      return localTheme;\n    }\n\n    return _extends({}, this.outerTheme, localTheme);\n  }\n\n  render() {\n    // TODO move the sheetsManager property to a different component.\n    // warning(\n    //   typeof window !== 'undefined' || this.props.sheetsManager,\n    //   [\n    //     'Material-UI: you need to provide a sheetsManager to the MuiThemeProvider ' +\n    //       'when rendering on the server.',\n    //     'If you do not, you might experience a memory leak',\n    //   ].join('\\n'),\n    // );\n    return this.props.children;\n  }\n\n}\nprocess.env.NODE_ENV !== \"production\" ? MuiThemeProviderOld.propTypes = {\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * You can disable the generation of the styles with this option.\n   * It can be useful when traversing the React tree outside of the HTML\n   * rendering step on the server.\n   * Let's say you are using react-apollo to extract all\n   * the queries made by the interface server-side.\n   * You can significantly speed up the traversal with this property.\n   */\n  disableStylesGeneration: PropTypes.bool,\n\n  /**\n   * @ignore\n   *\n   * In beta.\n   */\n  sheetsCache: PropTypes.object,\n\n  /**\n   * The sheetsManager is used to deduplicate style sheet injection in the page.\n   * It's deduplicating using the (theme, styles) couple.\n   * On the server, you should provide a new instance for each request.\n   */\n  sheetsManager: PropTypes.object,\n\n  /**\n   * A theme object.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? MuiThemeProviderOld.propTypes = exactProp(MuiThemeProviderOld.propTypes) : void 0;\n}\n\nMuiThemeProviderOld.childContextTypes = _extends({}, themeListener.contextTypes, {\n  muiThemeProviderOptions: PropTypes.object\n});\nMuiThemeProviderOld.contextTypes = _extends({}, themeListener.contextTypes, {\n  muiThemeProviderOptions: PropTypes.object\n});\n/* istanbul ignore if */\n\nif (!ponyfillGlobal.__MUI_STYLES__) {\n  ponyfillGlobal.__MUI_STYLES__ = {};\n}\n\nif (!ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider) {\n  ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider = MuiThemeProviderOld;\n}\n\nexport default ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider;","map":null,"metadata":{},"sourceType":"module"}