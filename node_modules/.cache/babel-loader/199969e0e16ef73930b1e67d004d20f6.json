{"ast":null,"code":"import * as types from \"./actionTypes\";\nimport axios from \"axios\";\nconst instance = axios.create({\n  \"baseURL\": \"http://localhost:8000\"\n});\nexport const REQUEST_ALL = -1;\nexport const REQUEST_STARTED = 1;\nexport const REQUEST_SUCCESS = 2;\nexport const REQUEST_FAILED = 3;\nexport const wrapGet = (endpoint, [startType, successType, failType], id) => (dispatch, getState) => {\n  // creates a new action based on the response given\n  const newAction = (type, response) => {\n    dispatch({\n      type,\n      \"payload\": {\n        \"id\": id || REQUEST_ALL,\n        response\n      }\n    });\n  }; // request starting\n\n\n  newAction(startType, {});\n  return instance.get(endpoint, {\n    \"headers\": {\n      \"Authorization\": \"Token \".concat(getState().auth.token)\n    }\n  }).then(response => {\n    // succesful request\n    newAction(successType, response);\n  }).catch(error => {\n    // failed request\n    newAction(failType, error.response);\n  });\n};\nexport const wrapPost = (endpoint, [startType, successType, failType], data) => (dispatch, getState) => {\n  // creates a new action based on the response given\n  const newAction = (type, response) => {\n    dispatch({\n      type,\n      \"payload\": response\n    });\n  }; // request starting\n\n\n  newAction(startType, {});\n  return instance.post(endpoint, data, {\n    \"headers\": {\n      \"Authorization\": \"Token \".concat(getState().auth.token)\n    }\n  }).then(response => {\n    // succesful request\n    newAction(successType, response);\n  }).catch(error => {\n    // failed request\n    newAction(failType, error.response);\n  });\n};\nexport const fetchCourses = id => wrapGet(\"/courses/catalog/\", [types.FETCH_COURSES_STARTED, types.FETCH_COURSES_SUCCESSFUL, types.FETCH_COURSES_FAILED], id);\nexport const fetchInstructors = id => wrapGet(\"/account/instructor/\", [types.FETCH_INSTRUCTORS_STARTED, types.FETCH_INSTRUCTORS_SUCCESSFUL, types.FETCH_INSTRUCTORS_FAILED], id);","map":{"version":3,"sources":["/Users/js/Desktop/front-end/src/actions/apiActions.js"],"names":["types","axios","instance","create","REQUEST_ALL","REQUEST_STARTED","REQUEST_SUCCESS","REQUEST_FAILED","wrapGet","endpoint","startType","successType","failType","id","dispatch","getState","newAction","type","response","get","auth","token","then","catch","error","wrapPost","data","post","fetchCourses","FETCH_COURSES_STARTED","FETCH_COURSES_SUCCESSFUL","FETCH_COURSES_FAILED","fetchInstructors","FETCH_INSTRUCTORS_STARTED","FETCH_INSTRUCTORS_SUCCESSFUL","FETCH_INSTRUCTORS_FAILED"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC1B,aAAW;AADe,CAAb,CAAjB;AAIA,OAAO,MAAMC,WAAW,GAAG,CAAC,CAArB;AAEP,OAAO,MAAMC,eAAe,GAAG,CAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,CAAxB;AACP,OAAO,MAAMC,cAAc,GAAG,CAAvB;AAEP,OAAO,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAW,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,QAAzB,CAAX,EAA+CC,EAA/C,KACnB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpB;AACA,QAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAClCJ,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IADK;AAEL,iBAAW;AACP,cAAMJ,EAAE,IAAIT,WADL;AAEPc,QAAAA;AAFO;AAFN,KAAD,CAAR;AAOH,GARD,CAFoB,CAYpB;;;AACAF,EAAAA,SAAS,CAACN,SAAD,EAAY,EAAZ,CAAT;AAEA,SAAOR,QAAQ,CACViB,GADE,CACEV,QADF,EACY;AACX,eAAW;AACP,uCAA0BM,QAAQ,GAAGK,IAAX,CAAgBC,KAA1C;AADO;AADA,GADZ,EAMFC,IANE,CAMIJ,QAAD,IAAc;AAChB;AACAF,IAAAA,SAAS,CAACL,WAAD,EAAcO,QAAd,CAAT;AACH,GATE,EAUFK,KAVE,CAUKC,KAAD,IAAW;AACd;AACAR,IAAAA,SAAS,CAACJ,QAAD,EAAWY,KAAK,CAACN,QAAjB,CAAT;AACH,GAbE,CAAP;AAcH,CA9BE;AAgCP,OAAO,MAAMO,QAAQ,GAAG,CAAChB,QAAD,EAAW,CAACC,SAAD,EAAYC,WAAZ,EAAyBC,QAAzB,CAAX,EAA+Cc,IAA/C,KACpB,CAACZ,QAAD,EAAWC,QAAX,KAAwB;AACpB;AACA,QAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAClCJ,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IADK;AAEL,iBAAWC;AAFN,KAAD,CAAR;AAIH,GALD,CAFoB,CASpB;;;AACAF,EAAAA,SAAS,CAACN,SAAD,EAAY,EAAZ,CAAT;AAEA,SAAOR,QAAQ,CACVyB,IADE,CACGlB,QADH,EACaiB,IADb,EACmB;AAClB,eAAW;AACP,uCAA0BX,QAAQ,GAAGK,IAAX,CAAgBC,KAA1C;AADO;AADO,GADnB,EAMFC,IANE,CAMIJ,QAAD,IAAc;AAChB;AACAF,IAAAA,SAAS,CAACL,WAAD,EAAcO,QAAd,CAAT;AACH,GATE,EAUFK,KAVE,CAUKC,KAAD,IAAW;AACd;AACAR,IAAAA,SAAS,CAACJ,QAAD,EAAWY,KAAK,CAACN,QAAjB,CAAT;AACH,GAbE,CAAP;AAcH,CA3BE;AA6BP,OAAO,MAAMU,YAAY,GAAIf,EAAD,IACxBL,OAAO,CACH,mBADG,EAEH,CACIR,KAAK,CAAC6B,qBADV,EAEI7B,KAAK,CAAC8B,wBAFV,EAGI9B,KAAK,CAAC+B,oBAHV,CAFG,EAOHlB,EAPG,CADJ;AAWP,OAAO,MAAMmB,gBAAgB,GAAInB,EAAD,IAC5BL,OAAO,CACH,sBADG,EAEH,CACIR,KAAK,CAACiC,yBADV,EAEIjC,KAAK,CAACkC,4BAFV,EAGIlC,KAAK,CAACmC,wBAHV,CAFG,EAOHtB,EAPG,CADJ","sourcesContent":["import * as types from \"./actionTypes\";\n\nimport axios from \"axios\";\n\nconst instance = axios.create({\n    \"baseURL\": \"http://localhost:8000\",\n});\n\nexport const REQUEST_ALL = -1;\n\nexport const REQUEST_STARTED = 1;\nexport const REQUEST_SUCCESS = 2;\nexport const REQUEST_FAILED = 3;\n\nexport const wrapGet = (endpoint, [startType, successType, failType], id) =>\n    (dispatch, getState) => {\n        // creates a new action based on the response given\n        const newAction = (type, response) => {\n            dispatch({\n                type,\n                \"payload\": {\n                    \"id\": id || REQUEST_ALL,\n                    response,\n                },\n            });\n        };\n\n        // request starting\n        newAction(startType, {});\n\n        return instance\n            .get(endpoint, {\n                \"headers\": {\n                    \"Authorization\": `Token ${getState().auth.token}`,\n                }\n            })\n            .then((response) => {\n                // succesful request\n                newAction(successType, response);\n            })\n            .catch((error) => {\n                // failed request\n                newAction(failType, error.response);\n            });\n    };\n\nexport const wrapPost = (endpoint, [startType, successType, failType], data) =>\n    (dispatch, getState) => {\n        // creates a new action based on the response given\n        const newAction = (type, response) => {\n            dispatch({\n                type,\n                \"payload\": response,\n            });\n        };\n\n        // request starting\n        newAction(startType, {});\n\n        return instance\n            .post(endpoint, data, {\n                \"headers\": {\n                    \"Authorization\": `Token ${getState().auth.token}`,\n                },\n            })\n            .then((response) => {\n                // succesful request\n                newAction(successType, response);\n            })\n            .catch((error) => {\n                // failed request\n                newAction(failType, error.response);\n            });\n    };\n\nexport const fetchCourses = (id) =>\n    wrapGet(\n        \"/courses/catalog/\",\n        [\n            types.FETCH_COURSES_STARTED,\n            types.FETCH_COURSES_SUCCESSFUL,\n            types.FETCH_COURSES_FAILED,\n        ],\n        id,\n    );\n\nexport const fetchInstructors = (id) =>\n    wrapGet(\n        \"/account/instructor/\",\n        [\n            types.FETCH_INSTRUCTORS_STARTED,\n            types.FETCH_INSTRUCTORS_SUCCESSFUL,\n            types.FETCH_INSTRUCTORS_FAILED,\n        ],\n        id,\n    );\n"]},"metadata":{},"sourceType":"module"}