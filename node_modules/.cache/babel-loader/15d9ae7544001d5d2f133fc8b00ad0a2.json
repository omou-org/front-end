{"ast":null,"code":"/*!\nFullCalendar Resource Timeline Plugin v4.2.0\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2019 Adam Shaw\n*/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core'), require('@fullcalendar/timeline'), require('@fullcalendar/resource-common')) : typeof define === 'function' && define.amd ? define(['exports', '@fullcalendar/core', '@fullcalendar/timeline', '@fullcalendar/resource-common'], factory) : (global = global || self, factory(global.FullCalendarResourceTimeline = {}, global.FullCalendar, global.FullCalendarTimeline, global.FullCalendarResourceCommon));\n})(this, function (exports, core, TimelinePlugin, ResourceCommonPlugin) {\n  'use strict';\n\n  var TimelinePlugin__default = 'default' in TimelinePlugin ? TimelinePlugin['default'] : TimelinePlugin;\n  var ResourceCommonPlugin__default = 'default' in ResourceCommonPlugin ? ResourceCommonPlugin['default'] : ResourceCommonPlugin;\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n\n  /* global Reflect, Promise */\n\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n\n      return t;\n    };\n\n    return __assign.apply(this, arguments);\n  };\n\n  var Row =\n  /** @class */\n  function (_super) {\n    __extends(Row, _super);\n\n    function Row(context, spreadsheetParent, spreadsheetNextSibling, timeAxisParent, timeAxisNextSibling) {\n      var _this = _super.call(this, context) || this;\n\n      _this.isSizeDirty = false;\n      spreadsheetParent.insertBefore(_this.spreadsheetTr = document.createElement('tr'), spreadsheetNextSibling);\n      timeAxisParent.insertBefore(_this.timeAxisTr = document.createElement('tr'), timeAxisNextSibling);\n      return _this;\n    }\n\n    Row.prototype.destroy = function () {\n      core.removeElement(this.spreadsheetTr);\n      core.removeElement(this.timeAxisTr);\n\n      _super.prototype.destroy.call(this);\n    };\n\n    Row.prototype.updateSize = function (isResize) {\n      this.isSizeDirty = false;\n    };\n\n    return Row;\n  }(core.Component);\n\n  function updateExpanderIcon(el, isExpanded) {\n    var classList = el.classList;\n\n    if (isExpanded) {\n      classList.remove('fc-icon-plus-square');\n      classList.add('fc-icon-minus-square');\n    } else {\n      classList.remove('fc-icon-minus-square');\n      classList.add('fc-icon-plus-square');\n    }\n  }\n\n  function clearExpanderIcon(el) {\n    var classList = el.classList;\n    classList.remove('fc-icon-minus-square');\n    classList.remove('fc-icon-plus-square');\n  }\n\n  function updateTrResourceId(tr, resourceId) {\n    tr.setAttribute('data-resource-id', resourceId);\n  }\n\n  var GroupRow =\n  /** @class */\n  function (_super) {\n    __extends(GroupRow, _super);\n\n    function GroupRow() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this._renderCells = core.memoizeRendering(_this.renderCells, _this.unrenderCells);\n      _this._updateExpanderIcon = core.memoizeRendering(_this.updateExpanderIcon, null, [_this._renderCells]);\n\n      _this.onExpanderClick = function (ev) {\n        var props = _this.props;\n\n        _this.calendar.dispatch({\n          type: 'SET_RESOURCE_ENTITY_EXPANDED',\n          id: props.id,\n          isExpanded: !props.isExpanded\n        });\n      };\n\n      return _this;\n    }\n\n    GroupRow.prototype.render = function (props) {\n      this._renderCells(props.group, props.spreadsheetColCnt);\n\n      this._updateExpanderIcon(props.isExpanded);\n\n      this.isSizeDirty = true;\n    };\n\n    GroupRow.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this._renderCells.unrender(); // should unrender everything else\n\n    };\n\n    GroupRow.prototype.renderCells = function (group, spreadsheetColCnt) {\n      var spreadsheetContentEl = this.renderSpreadsheetContent(group);\n      this.spreadsheetTr.appendChild(core.createElement('td', {\n        className: 'fc-divider',\n        colSpan: spreadsheetColCnt // span across all columns\n\n      }, this.spreadsheetHeightEl = core.createElement('div', null, spreadsheetContentEl)) // needed by setTrInnerHeight\n      );\n      this.expanderIconEl = spreadsheetContentEl.querySelector('.fc-icon');\n      this.expanderIconEl.parentElement.addEventListener('click', this.onExpanderClick); // insert a single cell, with a single empty <div>.\n      // there will be no content\n\n      this.timeAxisTr.appendChild(core.createElement('td', {\n        className: 'fc-divider'\n      }, this.timeAxisHeightEl = document.createElement('div')));\n    };\n\n    GroupRow.prototype.unrenderCells = function () {\n      this.spreadsheetTr.innerHTML = '';\n      this.timeAxisTr.innerHTML = '';\n    };\n    /*\n    Renders the content wrapper element that will be inserted into this row's TD cell.\n    */\n\n\n    GroupRow.prototype.renderSpreadsheetContent = function (group) {\n      var text = this.renderCellText(group);\n      var contentEl = core.htmlToElement('<div class=\"fc-cell-content\">' + '<span class=\"fc-expander\">' + '<span class=\"fc-icon\"></span>' + '</span>' + '<span class=\"fc-cell-text\">' + (text ? core.htmlEscape(text) : '&nbsp;') + '</span>' + '</div>');\n      var filter = group.spec.render;\n\n      if (typeof filter === 'function') {\n        contentEl = filter(contentEl, group.value) || contentEl;\n      }\n\n      return contentEl;\n    };\n\n    GroupRow.prototype.renderCellText = function (group) {\n      var text = group.value || ''; // might be null/undefined if an ad-hoc grouping\n\n      var filter = group.spec.text;\n\n      if (typeof filter === 'function') {\n        text = filter(text) || text;\n      }\n\n      return text;\n    };\n\n    GroupRow.prototype.getHeightEls = function () {\n      return [this.spreadsheetHeightEl, this.timeAxisHeightEl];\n    };\n\n    GroupRow.prototype.updateExpanderIcon = function (isExpanded) {\n      updateExpanderIcon(this.expanderIconEl, isExpanded);\n    };\n\n    return GroupRow;\n  }(Row);\n\n  GroupRow.addEqualityFuncs({\n    group: ResourceCommonPlugin.isGroupsEqual // HACK for ResourceTimelineView::renderRows\n\n  });\n\n  var SpreadsheetRow =\n  /** @class */\n  function (_super) {\n    __extends(SpreadsheetRow, _super);\n\n    function SpreadsheetRow(context, tr) {\n      var _this = _super.call(this, context) || this;\n\n      _this._renderRow = core.memoizeRendering(_this.renderRow, _this.unrenderRow);\n      _this._updateTrResourceId = core.memoizeRendering(updateTrResourceId, null, [_this._renderRow]);\n      _this._updateExpanderIcon = core.memoizeRendering(_this.updateExpanderIcon, null, [_this._renderRow]);\n\n      _this.onExpanderClick = function (ev) {\n        var props = _this.props;\n\n        _this.calendar.dispatch({\n          type: 'SET_RESOURCE_ENTITY_EXPANDED',\n          id: props.id,\n          isExpanded: !props.isExpanded\n        });\n      };\n\n      _this.tr = tr;\n      return _this;\n    }\n\n    SpreadsheetRow.prototype.render = function (props) {\n      this._renderRow(props.resource, props.rowSpans, props.depth, props.colSpecs);\n\n      this._updateTrResourceId(this.tr, props.resource.id); // TODO: only use public ID?\n\n\n      this._updateExpanderIcon(props.hasChildren, props.isExpanded);\n    };\n\n    SpreadsheetRow.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n\n      this._renderRow.unrender(); // should unrender everything else\n\n    };\n\n    SpreadsheetRow.prototype.renderRow = function (resource, rowSpans, depth, colSpecs) {\n      var _a = this,\n          tr = _a.tr,\n          theme = _a.theme,\n          calendar = _a.calendar,\n          view = _a.view;\n\n      var resourceFields = ResourceCommonPlugin.buildResourceFields(resource); // slightly inefficient. already done up the call stack\n\n      var mainTd;\n\n      for (var i = 0; i < colSpecs.length; i++) {\n        var colSpec = colSpecs[i];\n        var rowSpan = rowSpans[i];\n\n        if (rowSpan === 0) {\n          // not responsible for group-based rows. VRowGroup is\n          continue;\n        } else if (rowSpan == null) {\n          rowSpan = 1;\n        }\n\n        var text = void 0;\n\n        if (colSpec.field) {\n          text = resourceFields[colSpec.field];\n        } else {\n          text = ResourceCommonPlugin.buildResourceTextFunc(colSpec.text, calendar)(resource);\n        }\n\n        var contentEl = core.htmlToElement('<div class=\"fc-cell-content\">' + (colSpec.isMain ? renderIconHtml(depth) : '') + '<span class=\"fc-cell-text\">' + (text ? core.htmlEscape(text) : '&nbsp;') + '</span>' + '</div>');\n\n        if (typeof colSpec.render === 'function') {\n          // a filter function for the element\n          contentEl = colSpec.render(new ResourceCommonPlugin.ResourceApi(calendar, resource), contentEl) || contentEl;\n        }\n\n        if (rowSpan > 1) {\n          contentEl.classList.add('fc-sticky');\n        }\n\n        var td = core.createElement('td', {\n          className: theme.getClass('widgetContent'),\n          rowspan: rowSpan\n        }, contentEl); // the first cell of the row needs to have an inner div for setTrInnerHeight\n\n        if (colSpec.isMain) {\n          td.appendChild(this.heightEl = core.createElement('div', null, td.childNodes) // inner wrap\n          );\n          mainTd = td;\n        }\n\n        tr.appendChild(td);\n      }\n\n      this.expanderIconEl = tr.querySelector('.fc-expander-space .fc-icon'); // wait until very end\n\n      view.publiclyTrigger('resourceRender', [{\n        resource: new ResourceCommonPlugin.ResourceApi(calendar, resource),\n        el: mainTd,\n        view: view\n      }]);\n    };\n\n    SpreadsheetRow.prototype.unrenderRow = function () {\n      this.tr.innerHTML = '';\n    };\n\n    SpreadsheetRow.prototype.updateExpanderIcon = function (hasChildren, isExpanded) {\n      var expanderIconEl = this.expanderIconEl;\n      var expanderEl = expanderIconEl.parentElement;\n\n      if (expanderIconEl && expanderEl // why would this be null?? was the case in IE11\n      ) {\n          if (hasChildren) {\n            expanderEl.addEventListener('click', this.onExpanderClick);\n            expanderEl.classList.add('fc-expander');\n            updateExpanderIcon(expanderIconEl, isExpanded);\n          } else {\n            expanderEl.removeEventListener('click', this.onExpanderClick);\n            expanderEl.classList.remove('fc-expander');\n            clearExpanderIcon(expanderIconEl);\n          }\n        }\n    };\n\n    return SpreadsheetRow;\n  }(core.Component);\n  /*\n  Renders the HTML responsible for the subrow expander area,\n  as well as the space before it (used to align expanders of similar depths)\n  */\n\n\n  function renderIconHtml(depth) {\n    var html = '';\n\n    for (var i = 0; i < depth; i++) {\n      html += '<span class=\"fc-icon\"></span>';\n    }\n\n    html += '<span class=\"fc-expander-space\">' + '<span class=\"fc-icon\"></span>' + '</span>';\n    return html;\n  }\n\n  var ResourceRow =\n  /** @class */\n  function (_super) {\n    __extends(ResourceRow, _super);\n\n    function ResourceRow(context, a, b, c, d, timeAxis) {\n      var _this = _super.call(this, context, a, b, c, d) || this;\n\n      _this._updateTrResourceId = core.memoizeRendering(updateTrResourceId);\n      _this.spreadsheetRow = new SpreadsheetRow(context, _this.spreadsheetTr);\n\n      _this.timeAxisTr.appendChild(core.createElement('td', {\n        className: _this.theme.getClass('widgetContent')\n      }, _this.innerContainerEl = document.createElement('div')));\n\n      _this.lane = new TimelinePlugin.TimelineLane(context, _this.innerContainerEl, _this.innerContainerEl, timeAxis);\n      return _this;\n    }\n\n    ResourceRow.prototype.destroy = function () {\n      this.spreadsheetRow.destroy();\n      this.lane.destroy();\n\n      _super.prototype.destroy.call(this);\n    };\n\n    ResourceRow.prototype.render = function (props) {\n      // spreadsheetRow handles calling updateTrResourceId for spreadsheetTr\n      this.spreadsheetRow.receiveProps({\n        colSpecs: props.colSpecs,\n        id: props.id,\n        rowSpans: props.rowSpans,\n        depth: props.depth,\n        isExpanded: props.isExpanded,\n        hasChildren: props.hasChildren,\n        resource: props.resource\n      });\n\n      this._updateTrResourceId(this.timeAxisTr, props.resource.id);\n\n      this.lane.receiveProps({\n        dateProfile: props.dateProfile,\n        nextDayThreshold: props.nextDayThreshold,\n        businessHours: props.businessHours,\n        eventStore: props.eventStore,\n        eventUiBases: props.eventUiBases,\n        dateSelection: props.dateSelection,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize\n      });\n      this.isSizeDirty = true;\n    };\n\n    ResourceRow.prototype.updateSize = function (isResize) {\n      _super.prototype.updateSize.call(this, isResize);\n\n      this.lane.updateSize(isResize);\n    };\n\n    ResourceRow.prototype.getHeightEls = function () {\n      return [this.spreadsheetRow.heightEl, this.innerContainerEl];\n    };\n\n    return ResourceRow;\n  }(Row);\n\n  ResourceRow.addEqualityFuncs({\n    rowSpans: core.isArraysEqual // HACK for isSizeDirty, ResourceTimelineView::renderRows\n\n  });\n  var COL_MIN_WIDTH = 30;\n\n  var SpreadsheetHeader =\n  /** @class */\n  function (_super) {\n    __extends(SpreadsheetHeader, _super);\n\n    function SpreadsheetHeader(context, parentEl) {\n      var _this = _super.call(this, context) || this;\n\n      _this.resizables = [];\n      _this.colWidths = [];\n      _this.emitter = new core.EmitterMixin();\n      parentEl.appendChild(_this.tableEl = core.createElement('table', {\n        className: _this.theme.getClass('tableGrid')\n      }));\n      return _this;\n    }\n\n    SpreadsheetHeader.prototype.destroy = function () {\n      for (var _i = 0, _a = this.resizables; _i < _a.length; _i++) {\n        var resizable = _a[_i];\n        resizable.destroy();\n      }\n\n      core.removeElement(this.tableEl);\n\n      _super.prototype.destroy.call(this);\n    };\n\n    SpreadsheetHeader.prototype.render = function (props) {\n      var theme = this.theme;\n      var colSpecs = props.colSpecs;\n      var html = '<colgroup>' + props.colTags + '</colgroup>' + '<tbody>';\n\n      if (props.superHeaderText) {\n        html += '<tr class=\"fc-super\">' + '<th class=\"' + theme.getClass('widgetHeader') + '\" colspan=\"' + colSpecs.length + '\">' + '<div class=\"fc-cell-content\">' + '<span class=\"fc-cell-text\">' + core.htmlEscape(props.superHeaderText) + '</span>' + '</div>' + '</th>' + '</tr>';\n      }\n\n      html += '<tr>';\n\n      for (var i = 0; i < colSpecs.length; i++) {\n        var o = colSpecs[i];\n        var isLast = i === colSpecs.length - 1;\n        html += \"<th class=\\\"\" + theme.getClass('widgetHeader') + \"\\\">\" + '<div>' + '<div class=\"fc-cell-content\">' + (o.isMain ? '<span class=\"fc-expander-space\">' + '<span class=\"fc-icon\"></span>' + '</span>' : '') + '<span class=\"fc-cell-text\">' + core.htmlEscape(o.labelText || '') + // what about normalizing this value ahead of time?\n        '</span>' + '</div>' + (!isLast ? '<div class=\"fc-col-resizer\"></div>' : '') + '</div>' + '</th>';\n      }\n\n      html += '</tr>';\n      html += '</tbody>';\n      this.tableEl.innerHTML = html;\n      this.thEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('th'));\n      this.colEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('col'));\n      this.resizerEls = Array.prototype.slice.call(this.tableEl.querySelectorAll('.fc-col-resizer'));\n      this.initColResizing();\n    };\n\n    SpreadsheetHeader.prototype.initColResizing = function () {\n      var _this = this;\n\n      var ElementDraggingImpl = this.calendar.pluginSystem.hooks.elementDraggingImpl;\n\n      if (ElementDraggingImpl) {\n        this.resizables = this.resizerEls.map(function (handleEl, colIndex) {\n          var dragging = new ElementDraggingImpl(handleEl);\n          var startWidth;\n          dragging.emitter.on('dragstart', function () {\n            startWidth = _this.colWidths[colIndex];\n\n            if (typeof startWidth !== 'number') {\n              startWidth = _this.thEls[colIndex].getBoundingClientRect().width;\n            }\n          });\n          dragging.emitter.on('dragmove', function (pev) {\n            _this.colWidths[colIndex] = Math.max(startWidth + pev.deltaX * (_this.isRtl ? -1 : 1), COL_MIN_WIDTH);\n\n            _this.emitter.trigger('colwidthchange', _this.colWidths);\n          });\n          dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n\n          return dragging;\n        });\n      }\n    };\n\n    return SpreadsheetHeader;\n  }(core.Component);\n\n  var Spreadsheet =\n  /** @class */\n  function (_super) {\n    __extends(Spreadsheet, _super);\n\n    function Spreadsheet(context, headParentEl, bodyParentEl) {\n      var _this = _super.call(this, context) || this;\n\n      _this._renderCells = core.memoizeRendering(_this.renderCells, _this.unrenderCells);\n      _this.layout = new TimelinePlugin.HeaderBodyLayout(headParentEl, bodyParentEl, 'clipped-scroll');\n      var headerEnhancedScroller = _this.layout.headerScroller.enhancedScroll;\n      var bodyEnhancedScroller = _this.layout.bodyScroller.enhancedScroll;\n      _this.header = new SpreadsheetHeader(context, headerEnhancedScroller.canvas.contentEl);\n\n      _this.header.emitter.on('colwidthchange', function (colWidths) {\n        _this.applyColWidths(colWidths);\n      });\n\n      bodyEnhancedScroller.canvas.contentEl.appendChild(_this.bodyContainerEl = core.createElement('div', {\n        className: 'fc-rows'\n      }, '<table>' + '<colgroup />' + '<tbody />' + '</table>'));\n      _this.bodyColGroup = _this.bodyContainerEl.querySelector('colgroup');\n      _this.bodyTbody = _this.bodyContainerEl.querySelector('tbody');\n      return _this;\n    }\n\n    Spreadsheet.prototype.destroy = function () {\n      this.header.destroy();\n      this.layout.destroy();\n\n      this._renderCells.unrender();\n\n      _super.prototype.destroy.call(this);\n    };\n\n    Spreadsheet.prototype.render = function (props) {\n      this._renderCells(props.superHeaderText, props.colSpecs);\n    };\n\n    Spreadsheet.prototype.renderCells = function (superHeaderText, colSpecs) {\n      var colTags = this.renderColTags(colSpecs);\n      this.header.receiveProps({\n        superHeaderText: superHeaderText,\n        colSpecs: colSpecs,\n        colTags: colTags\n      });\n      this.bodyColGroup.innerHTML = colTags;\n      this.bodyColEls = Array.prototype.slice.call(this.bodyColGroup.querySelectorAll('col'));\n      this.applyColWidths(colSpecs.map(function (colSpec) {\n        return colSpec.width;\n      }));\n    };\n\n    Spreadsheet.prototype.unrenderCells = function () {\n      this.bodyColGroup.innerHTML = '';\n    };\n\n    Spreadsheet.prototype.renderColTags = function (colSpecs) {\n      var html = '';\n\n      for (var _i = 0, colSpecs_1 = colSpecs; _i < colSpecs_1.length; _i++) {\n        var o = colSpecs_1[_i];\n\n        if (o.isMain) {\n          html += '<col class=\"fc-main-col\"/>';\n        } else {\n          html += '<col/>';\n        }\n      }\n\n      return html;\n    };\n\n    Spreadsheet.prototype.updateSize = function (isResize, totalHeight, isAuto) {\n      this.layout.setHeight(totalHeight, isAuto);\n    };\n\n    Spreadsheet.prototype.applyColWidths = function (colWidths) {\n      var _this = this;\n\n      colWidths.forEach(function (colWidth, colIndex) {\n        var headEl = _this.header.colEls[colIndex]; // bad to access child\n\n        var bodyEl = _this.bodyColEls[colIndex];\n        var styleVal;\n\n        if (typeof colWidth === 'number') {\n          styleVal = colWidth + 'px';\n        } else if (typeof colWidth == null) {\n          styleVal = '';\n        }\n\n        headEl.style.width = bodyEl.style.width = styleVal;\n      });\n    };\n\n    return Spreadsheet;\n  }(core.Component);\n\n  var MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars\n\n  var ResourceTimelineView =\n  /** @class */\n  function (_super) {\n    __extends(ResourceTimelineView, _super);\n\n    function ResourceTimelineView(context, viewSpec, dateProfileGenerator, parentEl) {\n      var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;\n\n      _this.isStickyScrollDirty = false;\n      _this.rowNodes = [];\n      _this.rowComponents = [];\n      _this.rowComponentsById = {};\n      _this.resourceAreaWidthDraggings = [];\n      _this.splitter = new ResourceCommonPlugin.ResourceSplitter(); // doesn't let it do businessHours tho\n\n      _this.hasResourceBusinessHours = core.memoize(hasResourceBusinessHours);\n      _this.buildRowNodes = core.memoize(ResourceCommonPlugin.buildRowNodes);\n      _this.hasNesting = core.memoize(hasNesting);\n      _this._updateHasNesting = core.memoizeRendering(_this.updateHasNesting);\n      var allColSpecs = _this.opt('resourceColumns') || [];\n\n      var labelText = _this.opt('resourceLabelText'); // TODO: view.override\n\n\n      var defaultLabelText = 'Resources'; // TODO: view.defaults\n\n      var superHeaderText = null;\n\n      if (!allColSpecs.length) {\n        allColSpecs.push({\n          labelText: labelText || defaultLabelText,\n          text: ResourceCommonPlugin.buildResourceTextFunc(_this.opt('resourceText'), _this.calendar)\n        });\n      } else {\n        superHeaderText = labelText;\n      }\n\n      var plainColSpecs = [];\n      var groupColSpecs = [];\n      var groupSpecs = [];\n      var isVGrouping = false;\n      var isHGrouping = false;\n\n      for (var _i = 0, allColSpecs_1 = allColSpecs; _i < allColSpecs_1.length; _i++) {\n        var colSpec = allColSpecs_1[_i];\n\n        if (colSpec.group) {\n          groupColSpecs.push(colSpec);\n        } else {\n          plainColSpecs.push(colSpec);\n        }\n      }\n\n      plainColSpecs[0].isMain = true;\n\n      if (groupColSpecs.length) {\n        groupSpecs = groupColSpecs;\n        isVGrouping = true;\n      } else {\n        var hGroupField = _this.opt('resourceGroupField');\n\n        if (hGroupField) {\n          isHGrouping = true;\n          groupSpecs.push({\n            field: hGroupField,\n            text: _this.opt('resourceGroupText'),\n            render: _this.opt('resourceGroupRender')\n          });\n        }\n      }\n\n      var allOrderSpecs = core.parseFieldSpecs(_this.opt('resourceOrder'));\n      var plainOrderSpecs = [];\n\n      for (var _a = 0, allOrderSpecs_1 = allOrderSpecs; _a < allOrderSpecs_1.length; _a++) {\n        var orderSpec = allOrderSpecs_1[_a];\n        var isGroup = false;\n\n        for (var _b = 0, groupSpecs_1 = groupSpecs; _b < groupSpecs_1.length; _b++) {\n          var groupSpec = groupSpecs_1[_b];\n\n          if (groupSpec.field === orderSpec.field) {\n            groupSpec.order = orderSpec.order; // -1, 0, 1\n\n            isGroup = true;\n            break;\n          }\n        }\n\n        if (!isGroup) {\n          plainOrderSpecs.push(orderSpec);\n        }\n      }\n\n      _this.superHeaderText = superHeaderText;\n      _this.isVGrouping = isVGrouping;\n      _this.isHGrouping = isHGrouping;\n      _this.groupSpecs = groupSpecs;\n      _this.colSpecs = groupColSpecs.concat(plainColSpecs);\n      _this.orderSpecs = plainOrderSpecs; // START RENDERING...\n\n      _this.el.classList.add('fc-timeline');\n\n      if (_this.opt('eventOverlap') === false) {\n        _this.el.classList.add('fc-no-overlap');\n      }\n\n      _this.el.innerHTML = _this.renderSkeletonHtml();\n      _this.resourceAreaHeadEl = _this.el.querySelector('thead .fc-resource-area');\n\n      _this.setResourceAreaWidth(_this.opt('resourceAreaWidth'));\n\n      _this.initResourceAreaWidthDragging();\n\n      _this.miscHeight = _this.el.offsetHeight;\n      _this.spreadsheet = new Spreadsheet(_this.context, _this.resourceAreaHeadEl, _this.el.querySelector('tbody .fc-resource-area'));\n      _this.timeAxis = new TimelinePlugin.TimeAxis(_this.context, _this.el.querySelector('thead .fc-time-area'), _this.el.querySelector('tbody .fc-time-area'));\n      var timeAxisRowContainer = core.createElement('div', {\n        className: 'fc-rows'\n      }, '<table><tbody /></table>');\n\n      _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.contentEl.appendChild(timeAxisRowContainer);\n\n      _this.timeAxisTbody = timeAxisRowContainer.querySelector('tbody');\n      _this.lane = new TimelinePlugin.TimelineLane(_this.context, null, _this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.bgEl, _this.timeAxis);\n      _this.bodyScrollJoiner = new TimelinePlugin.ScrollJoiner('vertical', [_this.spreadsheet.layout.bodyScroller, _this.timeAxis.layout.bodyScroller]); // after scrolljoiner\n\n      _this.spreadsheetBodyStickyScroller = new TimelinePlugin.StickyScroller(_this.spreadsheet.layout.bodyScroller.enhancedScroll, _this.isRtl, true // isVertical\n      );\n\n      _this.spreadsheet.receiveProps({\n        superHeaderText: _this.superHeaderText,\n        colSpecs: _this.colSpecs\n      }); // Component...\n\n\n      context.calendar.registerInteractiveComponent(_this, {\n        el: _this.timeAxis.slats.el\n      });\n      return _this;\n    }\n\n    ResourceTimelineView.prototype.renderSkeletonHtml = function () {\n      var theme = this.theme;\n      return \"<table class=\\\"\" + theme.getClass('tableGrid') + \"\\\"> <thead class=\\\"fc-head\\\"> <tr> <td class=\\\"fc-resource-area \" + theme.getClass('widgetHeader') + \"\\\"></td> <td class=\\\"fc-divider fc-col-resizer \" + theme.getClass('widgetHeader') + \"\\\"></td> <td class=\\\"fc-time-area \" + theme.getClass('widgetHeader') + \"\\\"></td> </tr> </thead> <tbody class=\\\"fc-body\\\"> <tr> <td class=\\\"fc-resource-area \" + theme.getClass('widgetContent') + \"\\\"></td> <td class=\\\"fc-divider fc-col-resizer \" + theme.getClass('widgetHeader') + \"\\\"></td> <td class=\\\"fc-time-area \" + theme.getClass('widgetContent') + \"\\\"></td> </tr> </tbody> </table>\";\n    };\n\n    ResourceTimelineView.prototype.render = function (props) {\n      _super.prototype.render.call(this, props);\n\n      var splitProps = this.splitter.splitProps(props);\n      var hasResourceBusinessHours = this.hasResourceBusinessHours(props.resourceStore);\n      this.timeAxis.receiveProps({\n        dateProfile: props.dateProfile\n      }); // for all-resource bg events / selections / business-hours\n\n      this.lane.receiveProps(__assign({}, splitProps[''], {\n        dateProfile: props.dateProfile,\n        nextDayThreshold: this.nextDayThreshold,\n        businessHours: hasResourceBusinessHours ? null : props.businessHours\n      }));\n      var newRowNodes = this.buildRowNodes(props.resourceStore, this.groupSpecs, this.orderSpecs, this.isVGrouping, props.resourceEntityExpansions, this.opt('resourcesInitiallyExpanded'));\n\n      this._updateHasNesting(this.hasNesting(newRowNodes));\n\n      this.diffRows(newRowNodes);\n      this.renderRows(props.dateProfile, hasResourceBusinessHours ? props.businessHours : null, // CONFUSING, comment\n      splitProps);\n    };\n\n    ResourceTimelineView.prototype.updateHasNesting = function (isNesting) {\n      var classList = this.el.classList;\n\n      if (isNesting) {\n        classList.remove('fc-flat');\n      } else {\n        classList.add('fc-flat');\n      }\n    };\n\n    ResourceTimelineView.prototype.diffRows = function (newNodes) {\n      var oldNodes = this.rowNodes;\n      var oldLen = oldNodes.length;\n      var oldIndexHash = {}; // id -> index\n\n      var oldI = 0;\n      var newI = 0;\n\n      for (oldI = 0; oldI < oldLen; oldI++) {\n        oldIndexHash[oldNodes[oldI].id] = oldI;\n      } // iterate new nodes\n\n\n      for (oldI = 0, newI = 0; newI < newNodes.length; newI++) {\n        var newNode = newNodes[newI];\n        var oldIFound = oldIndexHash[newNode.id];\n\n        if (oldIFound != null && oldIFound >= oldI) {\n          this.removeRows(newI, oldIFound - oldI, oldNodes); // won't do anything if same index\n\n          oldI = oldIFound + 1;\n        } else {\n          this.addRow(newI, newNode);\n        }\n      } // old rows that weren't found need to be removed\n\n\n      this.removeRows(newI, oldLen - oldI, oldNodes); // won't do anything if same index\n\n      this.rowNodes = newNodes;\n    };\n    /*\n    rowComponents is the in-progress result\n    */\n\n\n    ResourceTimelineView.prototype.addRow = function (index, rowNode) {\n      var _a = this,\n          rowComponents = _a.rowComponents,\n          rowComponentsById = _a.rowComponentsById;\n\n      var nextComponent = rowComponents[index];\n      var newComponent = this.buildChildComponent(rowNode, this.spreadsheet.bodyTbody, nextComponent ? nextComponent.spreadsheetTr : null, this.timeAxisTbody, nextComponent ? nextComponent.timeAxisTr : null);\n      rowComponents.splice(index, 0, newComponent);\n      rowComponentsById[rowNode.id] = newComponent;\n    };\n\n    ResourceTimelineView.prototype.removeRows = function (startIndex, len, oldRowNodes) {\n      if (len) {\n        var _a = this,\n            rowComponents = _a.rowComponents,\n            rowComponentsById = _a.rowComponentsById;\n\n        for (var i = 0; i < len; i++) {\n          var rowComponent = rowComponents[startIndex + i];\n          rowComponent.destroy();\n          delete rowComponentsById[oldRowNodes[i].id];\n        }\n\n        rowComponents.splice(startIndex, len);\n      }\n    };\n\n    ResourceTimelineView.prototype.buildChildComponent = function (node, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext) {\n      if (node.group) {\n        return new GroupRow(this.context, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext);\n      } else if (node.resource) {\n        return new ResourceRow(this.context, spreadsheetTbody, spreadsheetNext, timeAxisTbody, timeAxisNext, this.timeAxis);\n      }\n    };\n\n    ResourceTimelineView.prototype.renderRows = function (dateProfile, fallbackBusinessHours, splitProps) {\n      var _a = this,\n          rowNodes = _a.rowNodes,\n          rowComponents = _a.rowComponents;\n\n      for (var i = 0; i < rowNodes.length; i++) {\n        var rowNode = rowNodes[i];\n        var rowComponent = rowComponents[i];\n\n        if (rowNode.group) {\n          rowComponent.receiveProps({\n            spreadsheetColCnt: this.colSpecs.length,\n            id: rowNode.id,\n            isExpanded: rowNode.isExpanded,\n            group: rowNode.group\n          });\n        } else {\n          var resource = rowNode.resource;\n          rowComponent.receiveProps(__assign({}, splitProps[resource.id], {\n            dateProfile: dateProfile,\n            nextDayThreshold: this.nextDayThreshold,\n            businessHours: resource.businessHours || fallbackBusinessHours,\n            colSpecs: this.colSpecs,\n            id: rowNode.id,\n            rowSpans: rowNode.rowSpans,\n            depth: rowNode.depth,\n            isExpanded: rowNode.isExpanded,\n            hasChildren: rowNode.hasChildren,\n            resource: rowNode.resource\n          }));\n        }\n      }\n    };\n\n    ResourceTimelineView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n      // FYI: this ordering is really important\n      var calendar = this.calendar;\n      var isBaseSizing = isResize || calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated;\n\n      if (isBaseSizing) {\n        this.syncHeadHeights();\n        this.timeAxis.updateSize(isResize, viewHeight - this.miscHeight, isAuto);\n        this.spreadsheet.updateSize(isResize, viewHeight - this.miscHeight, isAuto);\n      }\n\n      var rowSizingCnt = this.updateRowSizes(isResize);\n      this.lane.updateSize(isResize); // is efficient. uses flags\n\n      if (isBaseSizing || rowSizingCnt) {\n        this.bodyScrollJoiner.update();\n        this.timeAxis.layout.scrollJoiner.update(); // hack\n\n        this.rowPositions = new core.PositionCache(this.timeAxis.slats.el, this.rowComponents.map(function (rowComponent) {\n          return rowComponent.timeAxisTr;\n        }), false, // isHorizontal\n        true // isVertical\n        );\n        this.rowPositions.build();\n        this.isStickyScrollDirty = true;\n      }\n    };\n\n    ResourceTimelineView.prototype.syncHeadHeights = function () {\n      var spreadsheetHeadEl = this.spreadsheet.header.tableEl;\n      var timeAxisHeadEl = this.timeAxis.header.tableEl;\n      spreadsheetHeadEl.style.height = '';\n      timeAxisHeadEl.style.height = '';\n      var max = Math.max(spreadsheetHeadEl.offsetHeight, timeAxisHeadEl.offsetHeight);\n      spreadsheetHeadEl.style.height = timeAxisHeadEl.style.height = max + 'px';\n    };\n\n    ResourceTimelineView.prototype.updateRowSizes = function (isResize) {\n      var dirtyRowComponents = this.rowComponents;\n\n      if (!isResize) {\n        dirtyRowComponents = dirtyRowComponents.filter(function (rowComponent) {\n          return rowComponent.isSizeDirty;\n        });\n      }\n\n      var elArrays = dirtyRowComponents.map(function (rowComponent) {\n        return rowComponent.getHeightEls();\n      }); // reset to natural heights\n\n      for (var _i = 0, elArrays_1 = elArrays; _i < elArrays_1.length; _i++) {\n        var elArray = elArrays_1[_i];\n\n        for (var _a = 0, elArray_1 = elArray; _a < elArray_1.length; _a++) {\n          var el = elArray_1[_a];\n          el.style.height = '';\n        }\n      } // let rows update their contents' heights\n\n\n      for (var _b = 0, dirtyRowComponents_1 = dirtyRowComponents; _b < dirtyRowComponents_1.length; _b++) {\n        var rowComponent = dirtyRowComponents_1[_b];\n        rowComponent.updateSize(isResize); // will reset isSizeDirty\n      }\n\n      var maxHeights = elArrays.map(function (elArray) {\n        var maxHeight = null;\n\n        for (var _i = 0, elArray_2 = elArray; _i < elArray_2.length; _i++) {\n          var el = elArray_2[_i];\n          var height = el.getBoundingClientRect().height;\n\n          if (maxHeight === null || height > maxHeight) {\n            maxHeight = height;\n          }\n        }\n\n        return maxHeight;\n      });\n\n      for (var i = 0; i < elArrays.length; i++) {\n        for (var _c = 0, _d = elArrays[i]; _c < _d.length; _c++) {\n          var el = _d[_c];\n          el.style.height = maxHeights[i] + 'px';\n        }\n      }\n\n      return dirtyRowComponents.length;\n    };\n\n    ResourceTimelineView.prototype.destroy = function () {\n      for (var _i = 0, _a = this.rowComponents; _i < _a.length; _i++) {\n        var rowComponent = _a[_i];\n        rowComponent.destroy();\n      }\n\n      this.rowNodes = [];\n      this.rowComponents = [];\n      this.spreadsheet.destroy();\n      this.timeAxis.destroy();\n\n      for (var _b = 0, _c = this.resourceAreaWidthDraggings; _b < _c.length; _b++) {\n        var resourceAreaWidthDragging = _c[_b];\n        resourceAreaWidthDragging.destroy();\n      }\n\n      this.spreadsheetBodyStickyScroller.destroy();\n\n      _super.prototype.destroy.call(this);\n\n      this.calendar.unregisterInteractiveComponent(this);\n    }; // Now Indicator\n    // ------------------------------------------------------------------------------------------\n\n\n    ResourceTimelineView.prototype.getNowIndicatorUnit = function (dateProfile) {\n      return this.timeAxis.getNowIndicatorUnit(dateProfile);\n    };\n\n    ResourceTimelineView.prototype.renderNowIndicator = function (date) {\n      this.timeAxis.renderNowIndicator(date);\n    };\n\n    ResourceTimelineView.prototype.unrenderNowIndicator = function () {\n      this.timeAxis.unrenderNowIndicator();\n    }; // Scrolling\n    // ------------------------------------------------------------------------------------------------------------------\n    // this is useful for scrolling prev/next dates while resource is scrolled down\n\n\n    ResourceTimelineView.prototype.queryScroll = function () {\n      var scroll = _super.prototype.queryScroll.call(this);\n\n      if (this.props.resourceStore) {\n        __assign(scroll, this.queryResourceScroll());\n      }\n\n      return scroll;\n    };\n\n    ResourceTimelineView.prototype.applyScroll = function (scroll, isResize) {\n      _super.prototype.applyScroll.call(this, scroll, isResize);\n\n      if (this.props.resourceStore) {\n        this.applyResourceScroll(scroll);\n      } // avoid updating stickyscroll too often\n\n\n      if (isResize || this.isStickyScrollDirty) {\n        this.isStickyScrollDirty = false;\n        this.spreadsheetBodyStickyScroller.updateSize();\n        this.timeAxis.updateStickyScrollers();\n      }\n    };\n\n    ResourceTimelineView.prototype.computeDateScroll = function (timeMs) {\n      return this.timeAxis.computeDateScroll(timeMs);\n    };\n\n    ResourceTimelineView.prototype.queryDateScroll = function () {\n      return this.timeAxis.queryDateScroll();\n    };\n\n    ResourceTimelineView.prototype.applyDateScroll = function (scroll) {\n      this.timeAxis.applyDateScroll(scroll);\n    };\n\n    ResourceTimelineView.prototype.queryResourceScroll = function () {\n      var _a = this,\n          rowComponents = _a.rowComponents,\n          rowNodes = _a.rowNodes;\n\n      var scroll = {};\n      var scrollerTop = this.timeAxis.layout.bodyScroller.el.getBoundingClientRect().top; // fixed position\n\n      for (var i = 0; i < rowComponents.length; i++) {\n        var rowComponent = rowComponents[i];\n        var rowNode = rowNodes[i];\n        var el = rowComponent.timeAxisTr;\n        var elBottom = el.getBoundingClientRect().bottom; // fixed position\n\n        if (elBottom > scrollerTop) {\n          scroll.rowId = rowNode.id;\n          scroll.bottom = elBottom - scrollerTop;\n          break;\n        }\n      } // TODO: what about left scroll state for spreadsheet area?\n\n\n      return scroll;\n    };\n\n    ResourceTimelineView.prototype.applyResourceScroll = function (scroll) {\n      var rowId = scroll.forcedRowId || scroll.rowId;\n\n      if (rowId) {\n        var rowComponent = this.rowComponentsById[rowId];\n\n        if (rowComponent) {\n          var el = rowComponent.timeAxisTr;\n\n          if (el) {\n            var innerTop = this.timeAxis.layout.bodyScroller.enhancedScroll.canvas.el.getBoundingClientRect().top;\n            var rowRect = el.getBoundingClientRect();\n            var scrollTop = (scroll.forcedRowId ? rowRect.top : // just use top edge\n            rowRect.bottom - scroll.bottom) - // pixels from bottom edge\n            innerTop;\n            this.timeAxis.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);\n            this.spreadsheet.layout.bodyScroller.enhancedScroll.setScrollTop(scrollTop);\n          }\n        }\n      }\n    }; // TODO: scrollToResource\n    // Hit System\n    // ------------------------------------------------------------------------------------------\n\n\n    ResourceTimelineView.prototype.buildPositionCaches = function () {\n      this.timeAxis.slats.updateSize();\n      this.rowPositions.build();\n    };\n\n    ResourceTimelineView.prototype.queryHit = function (positionLeft, positionTop) {\n      var rowPositions = this.rowPositions;\n      var slats = this.timeAxis.slats;\n      var rowIndex = rowPositions.topToIndex(positionTop);\n\n      if (rowIndex != null) {\n        var resource = this.rowNodes[rowIndex].resource;\n\n        if (resource) {\n          // not a group\n          var slatHit = slats.positionToHit(positionLeft);\n\n          if (slatHit) {\n            return {\n              component: this,\n              dateSpan: {\n                range: slatHit.dateSpan.range,\n                allDay: slatHit.dateSpan.allDay,\n                resourceId: resource.id\n              },\n              rect: {\n                left: slatHit.left,\n                right: slatHit.right,\n                top: rowPositions.tops[rowIndex],\n                bottom: rowPositions.bottoms[rowIndex]\n              },\n              dayEl: slatHit.dayEl,\n              layer: 0\n            };\n          }\n        }\n      }\n    }; // Resource Area\n    // ------------------------------------------------------------------------------------------------------------------\n\n\n    ResourceTimelineView.prototype.setResourceAreaWidth = function (widthVal) {\n      this.resourceAreaWidth = widthVal;\n      core.applyStyleProp(this.resourceAreaHeadEl, 'width', widthVal || '');\n    };\n\n    ResourceTimelineView.prototype.initResourceAreaWidthDragging = function () {\n      var _this = this;\n\n      var resourceAreaDividerEls = Array.prototype.slice.call(this.el.querySelectorAll('.fc-col-resizer'));\n      var ElementDraggingImpl = this.calendar.pluginSystem.hooks.elementDraggingImpl;\n\n      if (ElementDraggingImpl) {\n        this.resourceAreaWidthDraggings = resourceAreaDividerEls.map(function (el) {\n          var dragging = new ElementDraggingImpl(el);\n          var dragStartWidth;\n          var viewWidth;\n          dragging.emitter.on('dragstart', function () {\n            dragStartWidth = _this.resourceAreaWidth;\n\n            if (typeof dragStartWidth !== 'number') {\n              dragStartWidth = _this.resourceAreaHeadEl.getBoundingClientRect().width;\n            }\n\n            viewWidth = _this.el.getBoundingClientRect().width;\n          });\n          dragging.emitter.on('dragmove', function (pev) {\n            var newWidth = dragStartWidth + pev.deltaX * (_this.isRtl ? -1 : 1);\n            newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);\n            newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH);\n\n            _this.setResourceAreaWidth(newWidth);\n          });\n          dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n\n          return dragging;\n        });\n      }\n    };\n\n    ResourceTimelineView.needsResourceData = true; // for ResourceViewProps\n\n    return ResourceTimelineView;\n  }(core.View);\n\n  function hasResourceBusinessHours(resourceStore) {\n    for (var resourceId in resourceStore) {\n      var resource = resourceStore[resourceId];\n\n      if (resource.businessHours) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function hasNesting(nodes) {\n    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n      var node = nodes_1[_i];\n\n      if (node.group) {\n        return true;\n      } else if (node.resource) {\n        if (node.hasChildren) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  var main = core.createPlugin({\n    deps: [ResourceCommonPlugin__default, TimelinePlugin__default],\n    defaultView: 'resourceTimelineDay',\n    views: {\n      resourceTimeline: {\n        class: ResourceTimelineView,\n        resourceAreaWidth: '30%',\n        resourcesInitiallyExpanded: true,\n        eventResizableFromStart: true // TODO: not DRY with this same setting in the main timeline config\n\n      },\n      resourceTimelineDay: {\n        type: 'resourceTimeline',\n        duration: {\n          days: 1\n        }\n      },\n      resourceTimelineWeek: {\n        type: 'resourceTimeline',\n        duration: {\n          weeks: 1\n        }\n      },\n      resourceTimelineMonth: {\n        type: 'resourceTimeline',\n        duration: {\n          months: 1\n        }\n      },\n      resourceTimelineYear: {\n        type: 'resourceTimeline',\n        duration: {\n          years: 1\n        }\n      }\n    }\n  });\n  exports.ResourceTimelineView = ResourceTimelineView;\n  exports.default = main;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}