{"ast":null,"code":"import _objectSpread from \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actions from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\nimport { REQUEST_ALL } from \"../actions/apiActions\";\nexport default ((state = initialState.Course, {\n  payload,\n  type\n}) => {\n  switch (type) {\n    case actions.FETCH_COURSE_SUCCESSFUL:\n      return handleCoursesFetch(state, payload);\n\n    default:\n      return state;\n  }\n});\nconst dayToNum = {\n  \"Sunday\": 0,\n  \"Monday\": 1,\n  \"Tuesday\": 2,\n  \"Wednesday\": 3,\n  \"Thursday\": 4,\n  \"Friday\": 5,\n  \"Saturday\": 6\n};\n\nconst handleCoursesFetch = (state, {\n  id,\n  response\n}) => {\n  const data = response.data;\n\n  if (id !== REQUEST_ALL) {\n    return updateCourse(state, id, data);\n  }\n\n  let NewCourseList = state.NewCourseList;\n  data.forEach(course => {\n    NewCourseList = updateCourse(NewCourseList, course.id, course);\n  });\n  return _objectSpread({}, state, {\n    NewCourseList\n  });\n};\n\nconst updateCourse = (courses, id, course) => _objectSpread({}, courses, {\n  [id]: {\n    \"course_id\": id,\n    \"title\": course.subject,\n    \"schedule\": {\n      start_date: \"2020-06-02\",\n      end_date: \"2020-08-18\",\n      start_time: \"T18:00\",\n      end_time: \"T20:00\",\n      days: [1]\n    },\n    \"instructor_id\": course.instructor,\n    \"tuition\": course.tuition,\n    \"capacity\": course.max_capacity,\n    \"grade\": 10,\n    \"description\": course.description,\n    \"room_id\": course.room,\n    \"type\": \"C\",\n    \"subject\": \"Math\",\n    \"tags\": [],\n    \"roster\": [23, 99, 64]\n  }\n});","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/reducers/courseReducer.js"],"names":["actions","initialState","REQUEST_ALL","state","Course","payload","type","FETCH_COURSE_SUCCESSFUL","handleCoursesFetch","dayToNum","id","response","data","updateCourse","NewCourseList","forEach","course","courses","subject","start_date","end_date","start_time","end_time","days","instructor","tuition","max_capacity","description","room"],"mappings":";AAAA,OAAO,KAAKA,OAAZ,MAAyB,wBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,WAAR,QAA0B,uBAA1B;AAEA,gBAAe,CAACC,KAAK,GAAGF,YAAY,CAACG,MAAtB,EAA8B;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAA9B,KAAkD;AAC7D,UAAQA,IAAR;AACI,SAAKN,OAAO,CAACO,uBAAb;AACI,aAAOC,kBAAkB,CAACL,KAAD,EAAQE,OAAR,CAAzB;;AACJ;AACI,aAAOF,KAAP;AAJR;AAMH,CAPD;AASA,MAAMM,QAAQ,GAAG;AACb,YAAU,CADG;AAEb,YAAU,CAFG;AAGb,aAAW,CAHE;AAIb,eAAa,CAJA;AAKb,cAAY,CALC;AAMb,YAAU,CANG;AAOb,cAAY;AAPC,CAAjB;;AAUA,MAAMD,kBAAkB,GAAG,CAACL,KAAD,EAAQ;AAACO,EAAAA,EAAD;AAAKC,EAAAA;AAAL,CAAR,KAA2B;AAAA,QAC3CC,IAD2C,GACnCD,QADmC,CAC3CC,IAD2C;;AAElD,MAAIF,EAAE,KAAKR,WAAX,EAAwB;AACpB,WAAOW,YAAY,CAACV,KAAD,EAAQO,EAAR,EAAYE,IAAZ,CAAnB;AACH;;AAJiD,MAK7CE,aAL6C,GAK5BX,KAL4B,CAK7CW,aAL6C;AAMlDF,EAAAA,IAAI,CAACG,OAAL,CAAcC,MAAD,IAAY;AACrBF,IAAAA,aAAa,GAAGD,YAAY,CAACC,aAAD,EAAgBE,MAAM,CAACN,EAAvB,EAA2BM,MAA3B,CAA5B;AACH,GAFD;AAGA,2BACOb,KADP;AAEIW,IAAAA;AAFJ;AAIH,CAbD;;AAgBA,MAAMD,YAAY,GAAG,CAACI,OAAD,EAAUP,EAAV,EAAcM,MAAd,uBACdC,OADc;AAEjB,GAACP,EAAD,GAAM;AACF,iBAAaA,EADX;AAEF,aAASM,MAAM,CAACE,OAFd;AAGF,gBAAY;AACRC,MAAAA,UAAU,EAAE,YADJ;AAERC,MAAAA,QAAQ,EAAE,YAFF;AAGRC,MAAAA,UAAU,EAAE,QAHJ;AAIRC,MAAAA,QAAQ,EAAE,QAJF;AAKRC,MAAAA,IAAI,EAAE,CAAC,CAAD;AALE,KAHV;AAUF,qBAAiBP,MAAM,CAACQ,UAVtB;AAWF,eAAWR,MAAM,CAACS,OAXhB;AAYF,gBAAYT,MAAM,CAACU,YAZjB;AAaF,aAAS,EAbP;AAcF,mBAAeV,MAAM,CAACW,WAdpB;AAeF,eAAWX,MAAM,CAACY,IAfhB;AAgBF,YAAQ,GAhBN;AAiBF,eAAW,MAjBT;AAkBF,YAAQ,EAlBN;AAmBF,cAAU,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT;AAnBR;AAFW,EAArB","sourcesContent":["import * as actions from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\nimport {REQUEST_ALL} from \"../actions/apiActions\";\n\nexport default (state = initialState.Course, {payload, type}) => {\n    switch (type) {\n        case actions.FETCH_COURSE_SUCCESSFUL:\n            return handleCoursesFetch(state, payload);\n        default:\n            return state;\n    }\n};\n\nconst dayToNum = {\n    \"Sunday\": 0,\n    \"Monday\": 1,\n    \"Tuesday\": 2,\n    \"Wednesday\": 3,\n    \"Thursday\": 4,\n    \"Friday\": 5,\n    \"Saturday\": 6,\n};\n\nconst handleCoursesFetch = (state, {id, response}) => {\n    const {data} = response;\n    if (id !== REQUEST_ALL) {\n        return updateCourse(state, id, data);\n    }\n    let {NewCourseList} = state;\n    data.forEach((course) => {\n        NewCourseList = updateCourse(NewCourseList, course.id, course);\n    });\n    return {\n        ...state,\n        NewCourseList,\n    };\n};\n\n\nconst updateCourse = (courses, id, course) => ({\n    ...courses,\n    [id]: {\n        \"course_id\": id,\n        \"title\": course.subject,\n        \"schedule\": {\n            start_date: \"2020-06-02\",\n            end_date: \"2020-08-18\",\n            start_time: \"T18:00\",\n            end_time: \"T20:00\",\n            days: [1],\n        },\n        \"instructor_id\": course.instructor,\n        \"tuition\": course.tuition,\n        \"capacity\": course.max_capacity,\n        \"grade\": 10,\n        \"description\": course.description,\n        \"room_id\": course.room,\n        \"type\": \"C\",\n        \"subject\": \"Math\",\n        \"tags\": [],\n        \"roster\": [23, 99, 64],\n    },\n});\n"]},"metadata":{},"sourceType":"module"}