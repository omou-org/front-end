{"ast":null,"code":"import _objectSpread from \"/Users/js/Desktop/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/js/Desktop/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as actions from \"./../actions/actionTypes\";\nimport initialState from \"./initialState\";\nimport { REQUEST_ALL } from \"../actions/apiActions\";\nexport default function users(state = initialState.Users, {\n  payload,\n  type\n}) {\n  switch (type) {\n    case actions.FETCH_STUDENTS_SUCCESSFUL:\n      console.log(\"FETCHED STUDENTS\", payload);\n      return addStudents(state, payload);\n\n    case actions.FETCH_STUDENTS_FAILED:\n      console.error(\"FAILED TO FETCH STUDENTS\", payload);\n      return state;\n\n    case actions.FETCH_PARENTS_SUCCESSFUL:\n      console.log(\"FETCHED PARENTS\", payload);\n      return addParents(state, payload);\n\n    case actions.FETCH_PARENTS_FAILED:\n      console.error(\"FAILED TO FETCH PARENTS\", payload);\n      return state;\n\n    case actions.FETCH_INSTRUCTORS_SUCCESSFUL:\n      console.log(\"FETCHED INSTRUCTORS\", payload);\n      return handleInstructorsFetch(state, payload);\n\n    case actions.FETCH_INSTRUCTORS_FAILED:\n      console.error(\"FAILED TO FETCH INSTRUCTORS\", payload);\n      return state;\n\n    default:\n      return state;\n  }\n}\nconst parseRelationship = {\n  \"MOTHER\": \"Mother\",\n  \"FATHER\": \"Father\",\n  \"GUARDIAN\": \"Guardian\",\n  \"OTHER\": \"Other\"\n};\n\nconst parseBirthday = date => {\n  const _date$split = date.split(\"-\"),\n        _date$split2 = _slicedToArray(_date$split, 3),\n        year = _date$split2[0],\n        month = _date$split2[1],\n        day = _date$split2[2];\n\n  return \"\".concat(month, \"/\").concat(day, \"/\").concat(year);\n};\n\nconst addStudents = (state, students) => {\n  const newState = JSON.parse(JSON.stringify(state));\n  students.forEach(student => {\n    newState.StudentList[student.user.id] = {\n      \"user_id\": student.user.id,\n      \"gender\": student.gender,\n      \"birth_date\": parseBirthday(student.birth_date),\n      \"address\": student.address,\n      \"city\": student.city,\n      \"phone_number\": student.phone_number,\n      \"state\": student.state,\n      \"zipcode\": student.zipcode,\n      \"grade\": student.grade,\n      \"age\": student.age,\n      \"school\": student.school,\n      \"first_name\": student.user.first_name,\n      \"last_name\": student.user.last_name,\n      \"name\": \"\".concat(student.user.first_name, \" \").concat(student.user.last_name),\n      \"email\": student.user.email,\n      \"parent_id\": student.parent,\n      // below is not from database\n      \"role\": \"student\",\n      \"balance\": 0,\n      \"notes\": {}\n    };\n  });\n  return newState;\n};\n\nconst addParents = (state, parents) => {\n  const newState = JSON.parse(JSON.stringify(state));\n  parents.forEach(parent => {\n    newState.ParentList[parent.user.id] = {\n      \"user_id\": parent.user.id,\n      \"gender\": parent.gender,\n      \"birth_date\": parseBirthday(parent.birth_date),\n      \"address\": parent.address,\n      \"city\": parent.city,\n      \"phone_number\": parent.phone_number,\n      \"state\": parent.state,\n      \"zipcode\": parent.zipcode,\n      \"relationship\": parseRelationship[parent.relationship],\n      \"first_name\": parent.user.first_name,\n      \"last_name\": parent.user.last_name,\n      \"name\": \"\".concat(parent.user.first_name, \" \").concat(parent.user.last_name),\n      \"email\": parent.user.email,\n      // below is not from database\n      \"role\": \"parent\",\n      \"notes\": {}\n    };\n  });\n  return newState;\n};\n\nconst handleInstructorsFetch = (state, {\n  id,\n  response\n}) => {\n  const data = response.data;\n\n  if (id !== REQUEST_ALL) {\n    return updateInstructor(state, id, data);\n  }\n\n  let InstructorList = state.InstructorList;\n  data.forEach(instructor => {\n    InstructorList = updateInstructor(InstructorList, instructor.user.id, instructor);\n  });\n  return _objectSpread({}, state, {\n    InstructorList\n  });\n};\n\nconst updateInstructor = (instructors, id, instructor) => _objectSpread({}, instructors, {\n  [id]: {\n    \"user_id\": instructor.user.id,\n    \"gender\": instructor.gender,\n    \"birth_date\": parseBirthday(instructor.birth_date),\n    \"address\": instructor.address,\n    \"city\": instructor.city,\n    \"phone_number\": instructor.phone_number,\n    \"state\": instructor.state,\n    \"zipcode\": instructor.zipcode,\n    \"age\": instructor.age,\n    \"first_name\": instructor.user.first_name,\n    \"last_name\": instructor.user.last_name,\n    \"name\": \"\".concat(instructor.user.first_name, \" \").concat(instructor.user.last_name),\n    \"email\": instructor.user.email,\n    // below is not from database\n    \"role\": \"instructor\",\n    \"background\": {\n      \"bio\": \"\",\n      \"experience\": 0,\n      \"subjects\": [],\n      \"languages\": []\n    },\n    \"schedule\": {\n      \"work_hours\": {\n        \"1\": {\n          \"start\": \"T17:00\",\n          \"end\": \"T20:00\",\n          \"title\": \"\"\n        },\n        \"2\": {\n          \"start\": \"T17:00\",\n          \"end\": \"T20:00\",\n          \"title\": \"\"\n        },\n        \"3\": {\n          \"start\": \"T18:00\",\n          \"end\": \"T20:00\",\n          \"title\": \"\"\n        },\n        \"4\": {\n          \"start\": \"T00:00\",\n          \"end\": \"T00:00\",\n          \"title\": \"\"\n        },\n        \"5\": {\n          \"start\": \"T16:00\",\n          \"end\": \"T21:00\",\n          \"title\": \"\"\n        },\n        \"6\": {\n          \"start\": \"T09:00\",\n          \"end\": \"T12:00\",\n          \"title\": \"\"\n        }\n      },\n      \"time_off\": {\n        \"1\": {\n          \"start\": \"2020-01-14T00:00\",\n          \"end\": \"2020-01-21T00:00\",\n          \"title\": \"Daniel Time Off\"\n        },\n        \"2\": {\n          \"start\": \"2020-03-22T00:00\",\n          \"end\": \"2020-03-22T00:00\",\n          \"title\": \"Daniel Time Off\"\n        }\n      }\n    },\n    \"notes\": {}\n  }\n});","map":{"version":3,"sources":["/Users/js/Desktop/front-end/src/reducers/usersReducer.js"],"names":["actions","initialState","REQUEST_ALL","users","state","Users","payload","type","FETCH_STUDENTS_SUCCESSFUL","console","log","addStudents","FETCH_STUDENTS_FAILED","error","FETCH_PARENTS_SUCCESSFUL","addParents","FETCH_PARENTS_FAILED","FETCH_INSTRUCTORS_SUCCESSFUL","handleInstructorsFetch","FETCH_INSTRUCTORS_FAILED","parseRelationship","parseBirthday","date","split","year","month","day","students","newState","JSON","parse","stringify","forEach","student","StudentList","user","id","gender","birth_date","address","city","phone_number","zipcode","grade","age","school","first_name","last_name","email","parent","parents","ParentList","relationship","response","data","updateInstructor","InstructorList","instructor","instructors"],"mappings":"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","sourcesContent":["import * as actions from \"./../actions/actionTypes\";\nimport initialState from \"./initialState\";\nimport {REQUEST_ALL} from \"../actions/apiActions\";\n\nexport default function users(state = initialState.Users, {payload, type}) {\n    switch (type) {\n        case actions.FETCH_STUDENTS_SUCCESSFUL:\n            console.log(\"FETCHED STUDENTS\", payload);\n            return addStudents(state, payload);\n        case actions.FETCH_STUDENTS_FAILED:\n            console.error(\"FAILED TO FETCH STUDENTS\", payload);\n            return state;\n        case actions.FETCH_PARENTS_SUCCESSFUL:\n            console.log(\"FETCHED PARENTS\", payload);\n            return addParents(state, payload);\n        case actions.FETCH_PARENTS_FAILED:\n            console.error(\"FAILED TO FETCH PARENTS\", payload);\n            return state;\n        case actions.FETCH_INSTRUCTORS_SUCCESSFUL:\n            console.log(\"FETCHED INSTRUCTORS\", payload);\n            return handleInstructorsFetch(state, payload);\n        case actions.FETCH_INSTRUCTORS_FAILED:\n            console.error(\"FAILED TO FETCH INSTRUCTORS\", payload);\n            return state;\n        default:\n            return state;\n    }\n}\n\nconst parseRelationship = {\n    \"MOTHER\": \"Mother\",\n    \"FATHER\": \"Father\",\n    \"GUARDIAN\": \"Guardian\",\n    \"OTHER\": \"Other\",\n};\n\nconst parseBirthday = (date) => {\n    const [year, month, day] = date.split(\"-\");\n    return `${month}/${day}/${year}`;\n};\n\nconst addStudents = (state, students) => {\n    const newState = JSON.parse(JSON.stringify(state));\n    students.forEach((student) => {\n        newState.StudentList[student.user.id] = {\n            \"user_id\": student.user.id,\n            \"gender\": student.gender,\n            \"birth_date\": parseBirthday(student.birth_date),\n            \"address\": student.address,\n            \"city\": student.city,\n            \"phone_number\": student.phone_number,\n            \"state\": student.state,\n            \"zipcode\": student.zipcode,\n            \"grade\": student.grade,\n            \"age\": student.age,\n            \"school\": student.school,\n            \"first_name\": student.user.first_name,\n            \"last_name\": student.user.last_name,\n            \"name\": `${student.user.first_name} ${student.user.last_name}`,\n            \"email\": student.user.email,\n            \"parent_id\": student.parent,\n            // below is not from database\n            \"role\": \"student\",\n            \"balance\": 0,\n            \"notes\": {},\n        };\n    });\n    return newState;\n};\n\nconst addParents = (state, parents) => {\n    const newState = JSON.parse(JSON.stringify(state));\n    parents.forEach((parent) => {\n        newState.ParentList[parent.user.id] = {\n            \"user_id\": parent.user.id,\n            \"gender\": parent.gender,\n            \"birth_date\": parseBirthday(parent.birth_date),\n            \"address\": parent.address,\n            \"city\": parent.city,\n            \"phone_number\": parent.phone_number,\n            \"state\": parent.state,\n            \"zipcode\": parent.zipcode,\n            \"relationship\": parseRelationship[parent.relationship],\n            \"first_name\": parent.user.first_name,\n            \"last_name\": parent.user.last_name,\n            \"name\": `${parent.user.first_name} ${parent.user.last_name}`,\n            \"email\": parent.user.email,\n            // below is not from database\n            \"role\": \"parent\",\n            \"notes\": {},\n        };\n    });\n    return newState;\n};\n\nconst handleInstructorsFetch = (state, {id, response}) => {\n    const {data} = response;\n    if (id !== REQUEST_ALL) {\n        return updateInstructor(state, id, data);\n    }\n    let {InstructorList} = state;\n    data.forEach((instructor) => {\n        InstructorList = updateInstructor(InstructorList, instructor.user.id, instructor);\n    });\n    return {\n        ...state,\n        InstructorList,\n    };\n};\n\n\nconst updateInstructor = (instructors, id, instructor) => ({\n    ...instructors,\n    [id]: {\n        \"user_id\": instructor.user.id,\n        \"gender\": instructor.gender,\n        \"birth_date\": parseBirthday(instructor.birth_date),\n        \"address\": instructor.address,\n        \"city\": instructor.city,\n        \"phone_number\": instructor.phone_number,\n        \"state\": instructor.state,\n        \"zipcode\": instructor.zipcode,\n        \"age\": instructor.age,\n        \"first_name\": instructor.user.first_name,\n        \"last_name\": instructor.user.last_name,\n        \"name\": `${instructor.user.first_name} ${instructor.user.last_name}`,\n        \"email\": instructor.user.email,\n        // below is not from database\n        \"role\": \"instructor\",\n        \"background\": {\n            \"bio\": \"\",\n            \"experience\": 0,\n            \"subjects\": [],\n            \"languages\": [],\n        },\n        \"schedule\": {\n            \"work_hours\": {\n                \"1\": {\n                    \"start\": \"T17:00\",\n                    \"end\": \"T20:00\",\n                    \"title\": \"\",\n                },\n                \"2\": {\n                    \"start\": \"T17:00\",\n                    \"end\": \"T20:00\",\n                    \"title\": \"\",\n                },\n                \"3\": {\n                    \"start\": \"T18:00\",\n                    \"end\": \"T20:00\",\n                    \"title\": \"\",\n                },\n                \"4\": {\n                    \"start\": \"T00:00\",\n                    \"end\": \"T00:00\",\n                    \"title\": \"\",\n                },\n                \"5\": {\n                    \"start\": \"T16:00\",\n                    \"end\": \"T21:00\",\n                    \"title\": \"\",\n                },\n                \"6\": {\n                    \"start\": \"T09:00\",\n                    \"end\": \"T12:00\",\n                    \"title\": \"\",\n                },\n            },\n            \"time_off\": {\n                \"1\": {\n                    \"start\": \"2020-01-14T00:00\",\n                    \"end\": \"2020-01-21T00:00\",\n                    \"title\": \"Daniel Time Off\",\n                },\n                \"2\": {\n                    \"start\": \"2020-03-22T00:00\",\n                    \"end\": \"2020-03-22T00:00\",\n                    \"title\": \"Daniel Time Off\",\n                },\n            },\n        },\n        \"notes\": {},\n    },\n});\n"]},"metadata":{},"sourceType":"module"}