{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport { keys as breakpointKeys } from '../styles/createBreakpoints';\nimport { capitalize } from '../utils/helpers';\nimport withStyles from '../styles/withStyles';\n\nconst styles = theme => {\n  const hidden = {\n    display: 'none'\n  };\n  return breakpointKeys.reduce((acc, key) => {\n    acc[\"only\".concat(capitalize(key))] = {\n      [theme.breakpoints.only(key)]: hidden\n    };\n    acc[\"\".concat(key, \"Up\")] = {\n      [theme.breakpoints.up(key)]: hidden\n    };\n    acc[\"\".concat(key, \"Down\")] = {\n      [theme.breakpoints.down(key)]: hidden\n    };\n    return acc;\n  }, {});\n};\n/**\n * @ignore - internal component.\n */\n\n\nfunction HiddenCss(props) {\n  const children = props.children,\n        classes = props.classes,\n        className = props.className,\n        only = props.only,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"lgDown\", \"lgUp\", \"mdDown\", \"mdUp\", \"only\", \"smDown\", \"smUp\", \"xlDown\", \"xlUp\", \"xsDown\", \"xsUp\"]);\n\n  process.env.NODE_ENV !== \"production\" ? warning(Object.keys(other).length === 0 || Object.keys(other).length === 1 && other.hasOwnProperty('ref'), \"Material-UI: unsupported properties received \".concat(Object.keys(other).join(', '), \" by `<Hidden />`.\")) : void 0;\n  const classNames = [];\n\n  if (className) {\n    classNames.push(className);\n  }\n\n  for (let i = 0; i < breakpointKeys.length; i += 1) {\n    const breakpoint = breakpointKeys[i];\n    const breakpointUp = props[\"\".concat(breakpoint, \"Up\")];\n    const breakpointDown = props[\"\".concat(breakpoint, \"Down\")];\n\n    if (breakpointUp) {\n      classNames.push(classes[\"\".concat(breakpoint, \"Up\")]);\n    }\n\n    if (breakpointDown) {\n      classNames.push(classes[\"\".concat(breakpoint, \"Down\")]);\n    }\n  }\n\n  if (only) {\n    const onlyBreakpoints = Array.isArray(only) ? only : [only];\n    onlyBreakpoints.forEach(breakpoint => {\n      classNames.push(classes[\"only\".concat(capitalize(breakpoint))]);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: classNames.join(' ')\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? HiddenCss.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiPrivateHiddenCss'\n})(HiddenCss);","map":null,"metadata":{},"sourceType":"module"}