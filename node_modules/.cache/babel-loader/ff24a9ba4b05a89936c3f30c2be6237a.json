{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // Sorted ASC by size. That's important.\n// It can't be configured as it's used statically for propTypes.\n\nexport const keys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.\n\nexport default function createBreakpoints(breakpoints) {\n  const _breakpoints$values = breakpoints.values,\n        values = _breakpoints$values === void 0 ? {\n    xs: 0,\n    sm: 600,\n    md: 960,\n    lg: 1280,\n    xl: 1920\n  } : _breakpoints$values,\n        _breakpoints$unit = breakpoints.unit,\n        unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,\n        _breakpoints$step = breakpoints.step,\n        step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,\n        other = _objectWithoutPropertiesLoose(breakpoints, [\"values\", \"unit\", \"step\"]);\n\n  function up(key) {\n    const value = typeof values[key] === 'number' ? values[key] : key;\n    return \"@media (min-width:\".concat(value).concat(unit, \")\");\n  }\n\n  function down(key) {\n    const endIndex = keys.indexOf(key) + 1;\n    const upperbound = values[keys[endIndex]];\n\n    if (endIndex === keys.length) {\n      // xl down applies to all sizes\n      return up('xs');\n    }\n\n    const value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;\n    return \"@media (max-width:\".concat(value - step / 100).concat(unit, \")\");\n  }\n\n  function between(start, end) {\n    const endIndex = keys.indexOf(end) + 1;\n\n    if (endIndex === keys.length) {\n      return up(start);\n    }\n\n    return \"@media (min-width:\".concat(values[start]).concat(unit, \") and \") + \"(max-width:\".concat(values[keys[endIndex]] - step / 100).concat(unit, \")\");\n  }\n\n  function only(key) {\n    return between(key, key);\n  }\n\n  function width(key) {\n    return values[key];\n  }\n\n  return _extends({\n    keys,\n    values,\n    up,\n    down,\n    between,\n    only,\n    width\n  }, other);\n}","map":null,"metadata":{},"sourceType":"module"}