{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/* eslint-disable no-underscore-dangle */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName, ponyfillGlobal } from '@material-ui/utils';\nimport createMuiTheme from './createMuiTheme';\nimport themeListener from './themeListener';\nlet defaultTheme;\n\nfunction getDefaultTheme() {\n  if (defaultTheme) {\n    return defaultTheme;\n  }\n\n  defaultTheme = createMuiTheme({\n    typography: {\n      suppressWarning: true\n    }\n  });\n  return defaultTheme;\n} // Provide the theme object as a property to the input component.\n\n\nconst withThemeOld = () => Component => {\n  class WithTheme extends React.Component {\n    constructor(props, context) {\n      super();\n      this.state = {\n        // We use || as the function call is lazy evaluated.\n        theme: themeListener.initial(context) || getDefaultTheme()\n      };\n    }\n\n    componentDidMount() {\n      this.unsubscribeId = themeListener.subscribe(this.context, theme => {\n        this.setState({\n          theme\n        });\n      });\n    }\n\n    componentWillUnmount() {\n      if (this.unsubscribeId !== null) {\n        themeListener.unsubscribe(this.context, this.unsubscribeId);\n      }\n    }\n\n    render() {\n      const _this$props = this.props,\n            innerRef = _this$props.innerRef,\n            other = _objectWithoutPropertiesLoose(_this$props, [\"innerRef\"]);\n\n      return React.createElement(Component, _extends({\n        theme: this.state.theme,\n        ref: innerRef\n      }, other));\n    }\n\n  }\n\n  process.env.NODE_ENV !== \"production\" ? WithTheme.propTypes = {\n    /**\n     * Use that property to pass a ref callback to the decorated component.\n     */\n    innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  } : void 0;\n  WithTheme.contextTypes = themeListener.contextTypes;\n\n  if (process.env.NODE_ENV !== 'production') {\n    WithTheme.displayName = \"WithTheme(\".concat(getDisplayName(Component), \")\");\n  }\n\n  hoistNonReactStatics(WithTheme, Component);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Exposed for test purposes.\n    WithTheme.Naked = Component;\n  }\n\n  return WithTheme;\n};\n/* istanbul ignore if */\n\n\nif (!ponyfillGlobal.__MUI_STYLES__) {\n  ponyfillGlobal.__MUI_STYLES__ = {};\n}\n\nif (!ponyfillGlobal.__MUI_STYLES__.withTheme) {\n  ponyfillGlobal.__MUI_STYLES__.withTheme = withThemeOld;\n}\n\nexport default ponyfillGlobal.__MUI_STYLES__.withTheme;","map":null,"metadata":{},"sourceType":"module"}