{"ast":null,"code":"import _slicedToArray from \"/Users/4e65696c/Documents/GitHub/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport initialState from \"./initialState\";\nimport * as actions from \"./../actions/actionTypes\";\nexport default function users(state = initialState.Users, {\n  payload,\n  type\n}) {\n  switch (type) {\n    case actions.FETCH_STUDENTS_SUCCESSFUL:\n      console.log(\"FETCHED STUDENTS\", payload);\n      return addStudents(state, payload);\n\n    case actions.FETCH_STUDENTS_FAILED:\n      console.error(\"FAILED TO FETCH STUDENTS\", payload);\n      return state;\n\n    case actions.FETCH_PARENTS_SUCCESSFUL:\n      console.log(\"FETCHED PARENTS\", payload);\n      return addParents(state, payload);\n\n    case actions.FETCH_PARENTS_FAILED:\n      console.error(\"FAILED TO FETCH PARENTS\", payload);\n      return state;\n\n    case actions.FETCH_INSTRUCTORS_SUCCESSFUL:\n      console.log(\"FETCHED INSTRUCTORS\", payload);\n      return addInstructors(state, payload);\n\n    case actions.FETCH_INSTRUCTORS_FAILED:\n      console.error(\"FAILED TO FETCH INSTRUCTORS\", payload);\n      return state;\n\n    case actions.FETCH_COURSES_SUCCESSFUL:\n      console.log(\"FETCHED COURSES\", payload);\n      return state;\n\n    case actions.FETCH_COURSES_FAILED:\n      console.error(\"FAILED TO FETCH COURSES\", payload);\n      return state;\n\n    case actions.FETCH_CATEGORIES_SUCCESSFUL:\n      console.log(\"FETCHED STUDENTS\", payload);\n      return state;\n\n    case actions.FETCH_CATEGORIES_FAILED:\n      console.error(\"FAILED TO FETCH CATEGORIES\", payload);\n      return state;\n\n    default:\n      return state;\n  }\n}\nconst parseRelationship = {\n  \"MOTHER\": \"Mother\",\n  \"FATHER\": \"Father\",\n  \"GUARDIAN\": \"Guardian\",\n  \"OTHER\": \"Other\"\n};\n\nconst parseBirthday = date => {\n  const _date$split = date.split(\"-\"),\n        _date$split2 = _slicedToArray(_date$split, 3),\n        year = _date$split2[0],\n        month = _date$split2[1],\n        day = _date$split2[2];\n\n  return \"\".concat(month, \"/\").concat(day, \"/\").concat(year);\n};\n\nconst addStudents = (state, students) => {\n  let newState = JSON.parse(JSON.stringify(state));\n  students.forEach(student => {\n    newState.StudentList[student.user.id] = {\n      \"user_id\": student.user.id,\n      \"gender\": student.gender,\n      \"birth_date\": parseBirthday(student.birth_date),\n      \"address\": student.address,\n      \"city\": student.city,\n      \"phone_number\": student.phone_number,\n      \"state\": student.state,\n      \"zipcode\": student.zipcode,\n      \"grade\": student.grade,\n      \"age\": student.age,\n      \"school\": student.school,\n      \"first_name\": student.user.first_name,\n      \"last_name\": student.user.last_name,\n      \"name\": \"\".concat(student.user.first_name, \" \").concat(student.user.last_name),\n      \"email\": student.user.email,\n      \"parent_id\": student.parent,\n      // below is not from database\n      \"role\": \"student\",\n      \"balance\": 0,\n      \"notes\": {}\n    };\n  });\n  return newState;\n};\n\nconst addParents = (state, parents) => {\n  let newState = JSON.parse(JSON.stringify(state));\n  parents.forEach(parent => {\n    newState.ParentList[parent.user.id] = {\n      \"user_id\": parent.user.id,\n      \"gender\": parent.gender,\n      \"birth_date\": parseBirthday(parent.birth_date),\n      \"address\": parent.address,\n      \"city\": parent.city,\n      \"phone_number\": parent.phone_number,\n      \"state\": parent.state,\n      \"zipcode\": parent.zipcode,\n      \"relationship\": parseRelationship[parent.relationship],\n      \"first_name\": parent.user.first_name,\n      \"last_name\": parent.user.last_name,\n      \"name\": \"\".concat(parent.user.first_name, \" \").concat(parent.user.last_name),\n      \"email\": parent.user.email,\n      // below is not from database\n      \"role\": \"parent\",\n      \"notes\": {}\n    };\n  });\n  return newState;\n};\n\nconst addInstructors = (state, instructors) => {\n  let newState = JSON.parse(JSON.stringify(state));\n  instructors.forEach(instructor => {\n    newState.InstructorList[instructor.user.id] = {\n      \"user_id\": instructor.user.id,\n      \"gender\": instructor.gender,\n      \"birth_date\": parseBirthday(instructor.birth_date),\n      \"address\": instructor.address,\n      \"city\": instructor.city,\n      \"phone_number\": instructor.phone_number,\n      \"state\": instructor.state,\n      \"zipcode\": instructor.zipcode,\n      \"age\": instructor.age,\n      \"first_name\": instructor.user.first_name,\n      \"last_name\": instructor.user.last_name,\n      \"name\": \"\".concat(instructor.user.first_name, \" \").concat(instructor.user.last_name),\n      \"email\": instructor.user.email,\n      // below is not from database\n      \"role\": \"instructor\",\n      \"background\": {\n        \"bio\": \"\",\n        \"experience\": 0,\n        \"subjects\": [],\n        \"languages\": []\n      },\n      schedule: {\n        work_hours: {\n          1: {\n            start: \"T17:00\",\n            end: \"T20:00\",\n            title: \"\"\n          },\n          2: {\n            start: \"T17:00\",\n            end: \"T20:00\",\n            title: \"\"\n          },\n          3: {\n            start: \"T18:00\",\n            end: \"T20:00\",\n            title: \"\"\n          },\n          4: {\n            start: \"T00:00\",\n            end: \"T00:00\",\n            title: \"\"\n          },\n          5: {\n            start: \"T16:00\",\n            end: \"T21:00\",\n            title: \"\"\n          },\n          6: {\n            start: \"T09:00\",\n            end: \"T12:00\",\n            title: \"\"\n          }\n        },\n        time_off: {\n          1: {\n            start: \"2020-01-14T00:00\",\n            end: \"2020-01-21T00:00\",\n            title: \"Daniel Time Off\"\n          },\n          2: {\n            start: \"2020-03-22T00:00\",\n            end: \"2020-03-22T00:00\",\n            title: \"Daniel Time Off\"\n          }\n        }\n      },\n      \"notes\": {}\n    };\n  });\n  return newState;\n};","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/src/reducers/usersReducer.js"],"names":["initialState","actions","users","state","Users","payload","type","FETCH_STUDENTS_SUCCESSFUL","console","log","addStudents","FETCH_STUDENTS_FAILED","error","FETCH_PARENTS_SUCCESSFUL","addParents","FETCH_PARENTS_FAILED","FETCH_INSTRUCTORS_SUCCESSFUL","addInstructors","FETCH_INSTRUCTORS_FAILED","FETCH_COURSES_SUCCESSFUL","FETCH_COURSES_FAILED","FETCH_CATEGORIES_SUCCESSFUL","FETCH_CATEGORIES_FAILED","parseRelationship","parseBirthday","date","split","year","month","day","students","newState","JSON","parse","stringify","forEach","student","StudentList","user","id","gender","birth_date","address","city","phone_number","zipcode","grade","age","school","first_name","last_name","email","parent","parents","ParentList","relationship","instructors","instructor","InstructorList","schedule","work_hours","start","end","title","time_off"],"mappings":"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","sourcesContent":["import initialState from \"./initialState\";\nimport * as actions from \"./../actions/actionTypes\";\n\nexport default function users(state = initialState.Users, {payload, type}) {\n    switch (type) {\n        case actions.FETCH_STUDENTS_SUCCESSFUL:\n            console.log(\"FETCHED STUDENTS\", payload);\n            return addStudents(state, payload);\n        case actions.FETCH_STUDENTS_FAILED:\n            console.error(\"FAILED TO FETCH STUDENTS\", payload);\n            return state;\n        case actions.FETCH_PARENTS_SUCCESSFUL:\n            console.log(\"FETCHED PARENTS\", payload);\n            return addParents(state, payload);\n        case actions.FETCH_PARENTS_FAILED:\n            console.error(\"FAILED TO FETCH PARENTS\", payload);\n            return state;\n        case actions.FETCH_INSTRUCTORS_SUCCESSFUL:\n            console.log(\"FETCHED INSTRUCTORS\", payload);\n            return addInstructors(state, payload);\n        case actions.FETCH_INSTRUCTORS_FAILED:\n            console.error(\"FAILED TO FETCH INSTRUCTORS\", payload);\n            return state;\n        case actions.FETCH_COURSES_SUCCESSFUL:\n            console.log(\"FETCHED COURSES\", payload);\n            return state;\n        case actions.FETCH_COURSES_FAILED:\n            console.error(\"FAILED TO FETCH COURSES\", payload);\n            return state;\n        case actions.FETCH_CATEGORIES_SUCCESSFUL:\n            console.log(\"FETCHED STUDENTS\", payload);\n            return state;\n        case actions.FETCH_CATEGORIES_FAILED:\n            console.error(\"FAILED TO FETCH CATEGORIES\", payload);\n            return state;\n        default:\n            return state;\n    }\n}\n\nconst parseRelationship = {\n    \"MOTHER\": \"Mother\",\n    \"FATHER\": \"Father\",\n    \"GUARDIAN\": \"Guardian\",\n    \"OTHER\": \"Other\",\n};\n\nconst parseBirthday = (date) => {\n    const [year, month, day] = date.split(\"-\");\n    return `${month}/${day}/${year}`;\n};\n\nconst addStudents = (state, students) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    students.forEach((student) => {\n        newState.StudentList[student.user.id] = {\n            \"user_id\": student.user.id,\n            \"gender\": student.gender,\n            \"birth_date\": parseBirthday(student.birth_date),\n            \"address\": student.address,\n            \"city\": student.city,\n            \"phone_number\": student.phone_number,\n            \"state\": student.state,\n            \"zipcode\": student.zipcode,\n            \"grade\": student.grade,\n            \"age\": student.age,\n            \"school\": student.school,\n            \"first_name\": student.user.first_name,\n            \"last_name\": student.user.last_name,\n            \"name\": `${student.user.first_name} ${student.user.last_name}`,\n            \"email\": student.user.email,\n            \"parent_id\": student.parent,\n            // below is not from database\n            \"role\": \"student\",\n            \"balance\": 0,\n            \"notes\": {},\n        };\n    });\n    return newState;\n};\n\nconst addParents = (state, parents) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    parents.forEach((parent) => {\n        newState.ParentList[parent.user.id] = {\n            \"user_id\": parent.user.id,\n            \"gender\": parent.gender,\n            \"birth_date\": parseBirthday(parent.birth_date),\n            \"address\": parent.address,\n            \"city\": parent.city,\n            \"phone_number\": parent.phone_number,\n            \"state\": parent.state,\n            \"zipcode\": parent.zipcode,\n            \"relationship\": parseRelationship[parent.relationship],\n            \"first_name\": parent.user.first_name,\n            \"last_name\": parent.user.last_name,\n            \"name\": `${parent.user.first_name} ${parent.user.last_name}`,\n            \"email\": parent.user.email,\n            // below is not from database\n            \"role\": \"parent\",\n            \"notes\": {},\n        };\n    });\n    return newState;\n};\n\nconst addInstructors = (state, instructors) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    instructors.forEach((instructor) => {\n        newState.InstructorList[instructor.user.id] = {\n            \"user_id\": instructor.user.id,\n            \"gender\": instructor.gender,\n            \"birth_date\": parseBirthday(instructor.birth_date),\n            \"address\": instructor.address,\n            \"city\": instructor.city,\n            \"phone_number\": instructor.phone_number,\n            \"state\": instructor.state,\n            \"zipcode\": instructor.zipcode,\n            \"age\": instructor.age,\n            \"first_name\": instructor.user.first_name,\n            \"last_name\": instructor.user.last_name,\n            \"name\": `${instructor.user.first_name} ${instructor.user.last_name}`,\n            \"email\": instructor.user.email,\n            // below is not from database\n            \"role\": \"instructor\",\n            \"background\": {\n                \"bio\": \"\",\n                \"experience\": 0,\n                \"subjects\": [],\n                \"languages\": [],\n            },\n            schedule: {\n                work_hours: {\n                    1: {\n                        start: \"T17:00\",\n                        end: \"T20:00\",\n                        title: \"\",\n                    },\n                    2: {\n                        start: \"T17:00\",\n                        end: \"T20:00\",\n                        title: \"\",\n                    },\n                    3: {\n                        start: \"T18:00\",\n                        end: \"T20:00\",\n                        title: \"\",\n                    },\n                    4: {\n                        start: \"T00:00\",\n                        end: \"T00:00\",\n                        title: \"\",\n                    },\n                    5: {\n                        start: \"T16:00\",\n                        end: \"T21:00\",\n                        title: \"\",\n                    },\n                    6: {\n                        start: \"T09:00\",\n                        end: \"T12:00\",\n                        title: \"\",\n                    },\n                },\n                time_off: {\n                    1: {\n                        start: \"2020-01-14T00:00\",\n                        end: \"2020-01-21T00:00\",\n                        title: \"Daniel Time Off\",\n                    },\n                    2: {\n                        start: \"2020-03-22T00:00\",\n                        end: \"2020-03-22T00:00\",\n                        title: \"Daniel Time Off\",\n                    },\n                },\n            },\n            \"notes\": {},\n        };\n    });\n    return newState;\n};\n"]},"metadata":{},"sourceType":"module"}