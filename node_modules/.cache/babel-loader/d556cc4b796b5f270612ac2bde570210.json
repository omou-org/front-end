{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/* eslint-disable no-underscore-dangle */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport warning from 'warning';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { getDisplayName, ponyfillGlobal } from '@material-ui/utils';\nimport { create } from 'jss';\nimport ns from './reactJssContext';\nimport jssPreset from './jssPreset';\nimport mergeClasses from './mergeClasses';\nimport multiKeyStore from './multiKeyStore';\nimport createMuiTheme from './createMuiTheme';\nimport themeListener from './themeListener';\nimport createGenerateClassName from './createGenerateClassName';\nimport getStylesCreator from './getStylesCreator';\nimport getThemeProps from './getThemeProps'; // Default JSS instance.\n\nconst jss = create(jssPreset()); // Use a singleton or the provided one by the context.\n//\n// The counter-based approach doesn't tolerate any mistake.\n// It's much safer to use the same counter everywhere.\n\nconst generateClassName = createGenerateClassName(); // Global index counter to preserve source order.\n// We create the style sheet during at the creation of the component,\n// children are handled after the parents, so the order of style elements would be parent->child.\n// It is a problem though when a parent passes a className\n// which needs to override any child's styles.\n// StyleSheet of the child has a higher specificity, because of the source order.\n// So our solution is to render sheets them in the reverse order child->sheet, so\n// that parent has a higher specificity.\n\nlet indexCounter = -10e10; // Exported for test purposes\n\nexport const sheetsManager = new Map(); // We use the same empty object to ref count the styles that don't need a theme object.\n\nconst noopTheme = {}; // In order to have self-supporting components, we rely on default theme when not provided.\n\nconst defaultTheme = createMuiTheme({\n  typography: {\n    suppressWarning: true\n  }\n}); // Link a style sheet with a component.\n// It does not modify the component passed to it;\n// instead, it returns a new component, with a `classes` property.\n\nconst withStylesOld = (stylesOrCreator, options = {}) => Component => {\n  const _options$withTheme = options.withTheme,\n        withTheme = _options$withTheme === void 0 ? false : _options$withTheme,\n        _options$flip = options.flip,\n        flip = _options$flip === void 0 ? null : _options$flip,\n        name = options.name,\n        styleSheetOptions = _objectWithoutPropertiesLoose(options, [\"withTheme\", \"flip\", \"name\"]);\n\n  const stylesCreator = getStylesCreator(stylesOrCreator);\n  const listenToTheme = stylesCreator.themingEnabled || typeof name === 'string' || withTheme;\n  indexCounter += 1;\n  stylesCreator.options.index = indexCounter;\n  process.env.NODE_ENV !== \"production\" ? warning(indexCounter < 0, ['Material-UI: you might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\\n')) : void 0;\n\n  class WithStyles extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      this.jss = context[ns.jss] || jss;\n      this.sheetsManager = sheetsManager;\n      this.unsubscribeId = null;\n      const muiThemeProviderOptions = context.muiThemeProviderOptions;\n\n      if (muiThemeProviderOptions) {\n        if (muiThemeProviderOptions.sheetsManager) {\n          this.sheetsManager = muiThemeProviderOptions.sheetsManager;\n        }\n\n        this.sheetsCache = muiThemeProviderOptions.sheetsCache;\n        this.disableStylesGeneration = muiThemeProviderOptions.disableStylesGeneration;\n      } // Attach the stylesCreator to the instance of the component as in the context\n      // of react-hot-loader the hooks can be executed in a different closure context:\n      // https://github.com/gaearon/react-hot-loader/blob/master/src/patch.dev.js#L107\n\n\n      this.stylesCreatorSaved = stylesCreator;\n      this.sheetOptions = _extends({\n        generateClassName\n      }, context[ns.sheetOptions]); // We use || as the function call is lazy evaluated.\n\n      this.theme = listenToTheme ? themeListener.initial(context) || defaultTheme : noopTheme;\n      this.attach(this.theme);\n      this.cacheClasses = {\n        // Cache for the finalized classes value.\n        value: null,\n        // Cache for the last used classes prop pointer.\n        lastProp: null,\n        // Cache for the last used rendered classes pointer.\n        lastJSS: {}\n      };\n    }\n\n    componentDidMount() {\n      if (!listenToTheme) {\n        return;\n      }\n\n      this.unsubscribeId = themeListener.subscribe(this.context, theme => {\n        const oldTheme = this.theme;\n        this.theme = theme;\n        this.attach(this.theme); // Rerender the component so the underlying component gets the theme update.\n        // By theme update we mean receiving and applying the new class names.\n\n        this.setState({}, () => {\n          this.detach(oldTheme);\n        });\n      });\n    }\n\n    componentDidUpdate() {\n      // react-hot-loader specific logic\n      if (this.stylesCreatorSaved === stylesCreator || process.env.NODE_ENV === 'production') {\n        return;\n      }\n\n      this.detach(this.theme);\n      this.stylesCreatorSaved = stylesCreator;\n      this.attach(this.theme);\n      this.forceUpdate();\n    }\n\n    componentWillUnmount() {\n      this.detach(this.theme);\n\n      if (this.unsubscribeId !== null) {\n        themeListener.unsubscribe(this.context, this.unsubscribeId);\n      }\n    }\n\n    getClasses() {\n      if (this.disableStylesGeneration) {\n        return this.props.classes || {};\n      } // Tracks if either the rendered classes or classes prop has changed,\n      // requiring the generation of a new finalized classes object.\n\n\n      let generate = false;\n      const sheetManager = multiKeyStore.get(this.sheetsManager, this.stylesCreatorSaved, this.theme);\n\n      if (sheetManager.sheet.classes !== this.cacheClasses.lastJSS) {\n        this.cacheClasses.lastJSS = sheetManager.sheet.classes;\n        generate = true;\n      }\n\n      if (this.props.classes !== this.cacheClasses.lastProp) {\n        this.cacheClasses.lastProp = this.props.classes;\n        generate = true;\n      }\n\n      if (generate) {\n        this.cacheClasses.value = mergeClasses({\n          baseClasses: this.cacheClasses.lastJSS,\n          newClasses: this.props.classes,\n          Component\n        });\n      }\n\n      return this.cacheClasses.value;\n    }\n\n    attach(theme) {\n      if (this.disableStylesGeneration) {\n        return;\n      }\n\n      const stylesCreatorSaved = this.stylesCreatorSaved;\n      let sheetManager = multiKeyStore.get(this.sheetsManager, stylesCreatorSaved, theme);\n\n      if (!sheetManager) {\n        sheetManager = {\n          refs: 0,\n          sheet: null\n        };\n        multiKeyStore.set(this.sheetsManager, stylesCreatorSaved, theme, sheetManager);\n      }\n\n      if (sheetManager.refs === 0) {\n        let sheet;\n\n        if (this.sheetsCache) {\n          sheet = multiKeyStore.get(this.sheetsCache, stylesCreatorSaved, theme);\n        }\n\n        if (!sheet) {\n          sheet = this.createSheet(theme);\n          sheet.attach();\n\n          if (this.sheetsCache) {\n            multiKeyStore.set(this.sheetsCache, stylesCreatorSaved, theme, sheet);\n          }\n        }\n\n        sheetManager.sheet = sheet;\n        const sheetsRegistry = this.context[ns.sheetsRegistry];\n\n        if (sheetsRegistry) {\n          sheetsRegistry.add(sheet);\n        }\n      }\n\n      sheetManager.refs += 1;\n    }\n\n    createSheet(theme) {\n      const styles = this.stylesCreatorSaved.create(theme, name);\n      let meta = name;\n\n      if (process.env.NODE_ENV !== 'production' && !meta) {\n        // Provide a better DX outside production.\n        meta = getDisplayName(Component);\n        process.env.NODE_ENV !== \"production\" ? warning(typeof meta === 'string', ['Material-UI: the component displayName is invalid. It needs to be a string.', \"Please fix the following component: \".concat(Component, \".\")].join('\\n')) : void 0;\n      }\n\n      const sheet = this.jss.createStyleSheet(styles, _extends({\n        meta,\n        classNamePrefix: meta,\n        flip: typeof flip === 'boolean' ? flip : theme.direction === 'rtl',\n        link: false\n      }, this.sheetOptions, this.stylesCreatorSaved.options, {\n        name: name || Component.displayName\n      }, styleSheetOptions));\n      return sheet;\n    }\n\n    detach(theme) {\n      if (this.disableStylesGeneration) {\n        return;\n      }\n\n      const sheetManager = multiKeyStore.get(this.sheetsManager, this.stylesCreatorSaved, theme);\n      sheetManager.refs -= 1;\n\n      if (sheetManager.refs === 0) {\n        multiKeyStore.delete(this.sheetsManager, this.stylesCreatorSaved, theme);\n        this.jss.removeStyleSheet(sheetManager.sheet);\n        const sheetsRegistry = this.context[ns.sheetsRegistry];\n\n        if (sheetsRegistry) {\n          sheetsRegistry.remove(sheetManager.sheet);\n        }\n      }\n    }\n\n    render() {\n      const _this$props = this.props,\n            innerRef = _this$props.innerRef,\n            other = _objectWithoutPropertiesLoose(_this$props, [\"classes\", \"innerRef\"]);\n\n      const more = getThemeProps({\n        theme: this.theme,\n        name,\n        props: other\n      }); // Provide the theme to the wrapped component.\n      // So we don't have to use the `withTheme()` Higher-order Component.\n\n      if (withTheme && !more.theme) {\n        more.theme = this.theme;\n      }\n\n      return React.createElement(Component, _extends({}, more, {\n        classes: this.getClasses(),\n        ref: innerRef\n      }));\n    }\n\n  }\n\n  process.env.NODE_ENV !== \"production\" ? WithStyles.propTypes = {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes: PropTypes.object,\n\n    /**\n     * Use that property to pass a ref callback to the decorated component.\n     */\n    innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  } : void 0;\n  WithStyles.contextTypes = _extends({\n    muiThemeProviderOptions: PropTypes.object,\n    [ns.jss]: PropTypes.object,\n    [ns.sheetOptions]: PropTypes.object,\n    [ns.sheetsRegistry]: PropTypes.object\n  }, listenToTheme ? themeListener.contextTypes : {});\n\n  if (process.env.NODE_ENV !== 'production') {\n    WithStyles.displayName = \"WithStyles(\".concat(getDisplayName(Component), \")\");\n  }\n\n  hoistNonReactStatics(WithStyles, Component);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Exposed for test purposes.\n    WithStyles.Naked = Component;\n    WithStyles.options = options;\n  }\n\n  return WithStyles;\n};\n/* istanbul ignore if */\n\n\nif (!ponyfillGlobal.__MUI_STYLES__) {\n  ponyfillGlobal.__MUI_STYLES__ = {};\n}\n\nif (!ponyfillGlobal.__MUI_STYLES__.withStyles) {\n  ponyfillGlobal.__MUI_STYLES__.withStyles = withStylesOld;\n}\n\nexport default ((styles, options) => ponyfillGlobal.__MUI_STYLES__.withStyles(styles, _extends({\n  defaultTheme\n}, options)));","map":null,"metadata":{},"sourceType":"module"}