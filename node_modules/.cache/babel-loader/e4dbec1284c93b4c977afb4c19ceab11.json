{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/front-end/src/components/FeatureViews/Accounts/TabComponents/Notes.js\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport \"./TabComponents.scss\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\nimport DoneIcon from \"@material-ui/icons/CheckCircleOutlined\";\nimport NotificationIcon from \"@material-ui/icons/NotificationImportant\";\nimport AddIcon from \"@material-ui/icons/AddOutlined\";\nimport InputBase from '@material-ui/core/InputBase';\nimport TextField from '@material-ui/core/TextField';\n\nclass Notes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notes: [],\n      alert: false,\n      noteBody: \"\",\n      noteIndex: 0\n    };\n  }\n\n  componentWillMount() {\n    //TODO: notes in descending order\n    this.setState(() => {\n      let notes = Object.keys(this.props.user_notes).map(noteID => {\n        return this.props.user_notes[noteID];\n      });\n      return {\n        notes: notes\n      };\n    });\n  }\n\n  handleClick(note, i) {\n    this.setState({\n      alert: true,\n      noteBody: note.body,\n      noteIndex: i\n    });\n  }\n\n  hideWarning() {\n    this.setState({\n      alert: false\n    });\n  }\n\n  renderPopUp() {\n    return React.createElement(Modal, {\n      \"aria-labelledby\": \"simple-modal-title\",\n      \"aria-describedby\": \"simple-modal-description\",\n      open: this.state.alert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"onClick=\", this.hideWarning.bind(this), \">\", React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      id: \"modal-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"asd\")));\n  }\n\n  render() {\n    console.log(this.props);\n    let iconStyle = {\n      fontSize: \"16px\",\n      align: \"right\"\n    };\n    let notificationColor;\n\n    if (this.state.notification) {\n      notificationColor = {\n        color: \"red\",\n        cursor: \"pointer\"\n      };\n    } else {\n      notificationColor = {\n        color: \"grey\",\n        cursor: \"pointer\"\n      };\n    }\n\n    let popup = {\n      minHeight: 381,\n      minWidth: 381\n    };\n\n    let numericDateString = date => {\n      let DateObject = new Date(date),\n          numericOptions = {\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      };\n      return DateObject.toLocaleTimeString(\"en-US\", numericOptions);\n    };\n\n    return React.createElement(Grid, {\n      item: true,\n      md: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"addNote\",\n      onClick: () => {\n        this.handleClick();\n      },\n      style: {\n        \"cursor\": \"pointer\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), \"Add Note\")), React.createElement(Modal, {\n      \"aria-labelledby\": \"simple-modal-title\",\n      \"aria-describedby\": \"simple-modal-description\",\n      open: this.state.alert,\n      className: \"popup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"exit-popup\",\n      style: popup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"standard-name\",\n      label: \"Subject\",\n      className: \"textfield\",\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(NotificationIcon, {\n      className: \"notification\",\n      style: notificationColor,\n      onClick: () => {\n        this.props.user_notes[this.state.note] = !this.state.note.important;\n        this.forceUpdate();\n        console.log(this.props);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(InputBase, {\n      defaultValue: this.state.noteBody,\n      multiline: true,\n      rows: 10,\n      variant: \"filled\",\n      margin: \"normal\",\n      required: true,\n      className: \"textfield\",\n      inputProps: {\n        'aria-label': 'naked'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"popUpActions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Delete\"), React.createElement(Button, {\n      onClick: this.hideWarning.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Save\"))))), this.state.notes.map((note, i) => {\n      let notificationColor;\n\n      if (note.important) {\n        notificationColor = {\n          color: \"red\"\n        };\n      } else {\n        notificationColor = {\n          color: \"grey\"\n        };\n      }\n\n      return React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: \"note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: \"header\",\n        align: 'left',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, note.subject), React.createElement(NotificationIcon, {\n        style: notificationColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })), React.createElement(Typography, {\n        className: \"body\",\n        align: 'left',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, note.body), React.createElement(Typography, {\n        className: \"date\",\n        style: {\n          fontWeight: \"500\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, numericDateString(note.timestamp).replace(\",\", \"ãƒ»\")), React.createElement(\"div\", {\n        className: \"actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(EditIcon, {\n        style: iconStyle,\n        onClick: () => {\n          this.handleClick(note, i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), React.createElement(DoneIcon, {\n        style: iconStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }))));\n    })));\n  }\n\n}\n\nNotes.propTypes = {\n  user_notes: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);","map":{"version":3,"sources":["/Users/js/Desktop/front-end/src/components/FeatureViews/Accounts/TabComponents/Notes.js"],"names":["connect","PropTypes","React","Component","Grid","Typography","Paper","Modal","Button","EditIcon","DoneIcon","NotificationIcon","AddIcon","InputBase","TextField","Notes","constructor","props","state","notes","alert","noteBody","noteIndex","componentWillMount","setState","Object","keys","user_notes","map","noteID","handleClick","note","i","body","hideWarning","renderPopUp","bind","render","console","log","iconStyle","fontSize","align","notificationColor","notification","color","cursor","popup","minHeight","minWidth","numericDateString","date","DateObject","Date","numericOptions","month","day","hour","minute","toLocaleTimeString","important","forceUpdate","subject","fontWeight","timestamp","replace","propTypes","object","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport \"./TabComponents.scss\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\nimport DoneIcon from \"@material-ui/icons/CheckCircleOutlined\";\nimport NotificationIcon from \"@material-ui/icons/NotificationImportant\";\nimport AddIcon from \"@material-ui/icons/AddOutlined\";\nimport InputBase from '@material-ui/core/InputBase';\nimport TextField from '@material-ui/core/TextField';\n\nclass Notes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notes: [],\n            alert: false,\n            noteBody: \"\",\n            noteIndex:0,\n        };\n    }\n\n    componentWillMount() {\n        //TODO: notes in descending order\n        this.setState(() => {\n            let notes = Object.keys(this.props.user_notes).map((noteID) => {\n                return this.props.user_notes[noteID];\n            });\n            return {\n                notes: notes,\n            }\n        });\n    }\n\n    handleClick(note, i) {\n        this.setState({\n            alert: true,\n            noteBody: note.body,\n            noteIndex: i,\n        })\n    }\n\n    hideWarning() {\n        this.setState({\n            alert: false,\n        });\n    }\n\n    renderPopUp() {\n        return (\n            <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={this.state.alert}>\n                onClick={this.hideWarning.bind(this)}>\n                        <div><Typography variant=\"h6\" id=\"modal-title\">\n                    asd\n                        </Typography>\n                </div>\n            </Modal>\n        );\n    }\n\n    render() {\n        console.log(this.props);\n        let iconStyle = {\n            fontSize: \"16px\",\n            align: \"right\",\n        }\n        let notificationColor\n        if (this.state.notification) {\n            notificationColor = {\n                color: \"red\",\n                cursor: \"pointer\",\n            }\n        }\n        else {\n            notificationColor = {\n                color: \"grey\",\n                cursor: \"pointer\",\n            }\n        }\n        let popup = {\n            minHeight: 381,\n            minWidth: 381,\n        };\n        let numericDateString = (date) => {\n            let DateObject = new Date(date),\n                numericOptions = {\n                    month: \"numeric\",\n                    day: \"numeric\",\n                    hour: \"2-digit\",\n                    minute: \"2-digit\"\n                };\n            return DateObject.toLocaleTimeString(\"en-US\", numericOptions);\n        };\n        return (<Grid item md={12}>\n            <Grid container spacing={16}>\n                <Grid item md={3}>\n                    <div className=\"addNote\"\n                        onClick={() => {\n                            this.handleClick();\n                        }}\n                        style={{\n                            \"cursor\": \"pointer\",\n                        }}>\n                        <Typography className=\"center\">\n                            <AddIcon />\n                            <br />\n                            Add Note\n                        </Typography>\n                    </div>\n                    <Modal\n                        aria-labelledby=\"simple-modal-title\"\n                        aria-describedby=\"simple-modal-description\"\n                        open={this.state.alert}\n                        className=\"popup\"\n                    >\n                        <div className=\"exit-popup\" style={popup}>\n                            <Grid>\n                                <TextField\n                                    id=\"standard-name\"\n                                    label=\"Subject\"\n                                    className=\"textfield\"\n                                    margin=\"normal\"\n                                />\n                                <NotificationIcon\n                                    className={\"notification\"}\n                                    style={notificationColor}\n                                    onClick={() => {\n                                        this.props.user_notes[this.state.note]=!this.state.note.important;\n                                        this.forceUpdate();\n                                        console.log(this.props);\n                                    }}\n                                />\n                            </Grid>\n                            <Grid>\n                                <InputBase\n                                    defaultValue={this.state.noteBody}\n                                    multiline\n                                    rows={10}\n                                    variant=\"filled\"\n                                    margin=\"normal\"\n                                    required={true}\n                                    className=\"textfield\"\n                                    inputProps={{ 'aria-label': 'naked' }}\n                                />\n                            </Grid>\n                            <div className=\"popUpActions\">\n                                <Button>\n                                    Delete\n                            </Button>\n                                <Button onClick={this.hideWarning.bind(this)}>\n                                    Cancel\n                            </Button>\n                                <Button>\n                                    Save\n                            </Button>\n                            </div>\n                        </div>\n                    </Modal>\n                </Grid>\n                {this.state.notes.map((note, i) => {\n                    let notificationColor;\n                    if(note.important){\n                        notificationColor={color:\"red\"}\n                    }\n                    else{\n                        notificationColor={color:\"grey\"}\n                    }\n                    return <Grid item xs={3} key={i}>\n                        <Paper className={\"note\"}>\n                            <Grid container>\n                                <Typography className={\"header\"} align={'left'}>\n                                    {note.subject}\n                                </Typography>\n                                <NotificationIcon\n                                style={notificationColor}/>\n                            </Grid>\n                            <Typography className={\"body\"} align={'left'}>\n                                {note.body}\n                            </Typography>\n                            <Typography className={\"date\"} style={{ fontWeight: \"500\" }}>\n                                {numericDateString(note.timestamp).replace(\",\", \"ãƒ»\")}\n                            </Typography>\n                            <div className={\"actions\"}>\n                                <EditIcon style={iconStyle}\n                                    onClick={() => {\n                                        this.handleClick(note, i);\n                                    }}\n                                />\n                                <DoneIcon style={iconStyle} />\n                            </div>\n                        </Paper>\n                    </Grid>\n                })}\n            </Grid>\n        </Grid>)\n    }\n\n}\n\nNotes.propTypes = {\n    user_notes: PropTypes.object,\n};\n\nfunction mapStateToProps(state) {\n    return {\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {};\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Notes);"]},"metadata":{},"sourceType":"module"}