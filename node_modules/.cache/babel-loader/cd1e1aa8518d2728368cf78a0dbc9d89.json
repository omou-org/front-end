{"ast":null,"code":"import _objectSpread from \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actions from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\nimport * as api from \"../actions/apiActions\";\nexport default ((state = initialState.RequestStatus, {\n  payload,\n  type\n}) => {\n  console.log(type);\n  let status;\n\n  if (payload && payload.response && payload.response.status) {\n    status = payload.response.status;\n  } else {\n    // general server error\n    status = 500;\n  }\n\n  switch (type) {\n    case actions.LOGIN_STARTED:\n      return updateLogin(state, api.REQUEST_STARTED);\n\n    case actions.LOGIN_SUCCESSFUL:\n      return updateLogin(state, status);\n\n    case actions.LOGIN_FAILED:\n      return updateLogin(state, status);\n\n    case actions.RESET_ATTEMPT:\n      return clearLogin(state);\n\n    case actions.LOGOUT:\n      return clearLogin(state);\n\n    case actions.FETCH_COURSE_STARTED:\n      return updateCourseFetch(state, payload.id, api.REQUEST_STARTED);\n\n    case actions.FETCH_COURSE_SUCCESSFUL:\n      return updateCourseFetch(state, payload.id, status);\n\n    case actions.FETCH_COURSE_FAILED:\n      return updateCourseFetch(state, payload.id, status);\n\n    case actions.FETCH_INSTRUCTOR_STARTED:\n      return updateInstructorFetch(state, payload.id, api.REQUEST_STARTED);\n\n    case actions.FETCH_INSTRUCTOR_SUCCESSFUL:\n      return updateInstructorFetch(state, payload.id, status);\n\n    case actions.FETCH_INSTRUCTOR_FAILED:\n      return updateInstructorFetch(state, payload.id, status);\n\n    case actions.POST_INSTRUCTOR_STARTED:\n      return updateInstructorPost(state, api.REQUEST_STARTED);\n\n    case actions.POST_INSTRUCTOR_SUCCESSFUL:\n      return updateInstructorPost(state, status);\n\n    case actions.POST_INSTRUCTOR_FAILED:\n      return updateInstructorPost(state, status);\n\n    case actions.PATCH_INSTRUCTOR_STARTED:\n      return updateInstructorPatch(state, payload.id, api.REQUEST_STARTED);\n\n    case actions.POST_INSTRUCTOR_SUCCESSFUL:\n      return updateInstructorPatch(state, payload.id, status);\n\n    case actions.POST_INSTRUCTOR_FAILED:\n      return updateInstructorPatch(state, payload.id, status);\n\n    default:\n      return state;\n  }\n});\n\nconst clearLogin = state => _objectSpread({}, state, {\n  \"login\": null\n});\n\nconst updateLogin = (state, status) => _objectSpread({}, state, {\n  \"login\": status\n});\n\nconst updateCourseFetch = (state, id, status) => {\n  let newState = JSON.parse(JSON.stringify(state));\n  newState.course[actions.GET][id] = status;\n  return newState;\n};\n\nconst updateInstructorFetch = (state, id, status) => {\n  let newState = JSON.parse(JSON.stringify(state));\n  newState.instructor[actions.GET][id] = status;\n  return newState;\n};\n\nconst updateInstructorPost = (state, status) => {\n  let newState = JSON.parse(JSON.stringify(state));\n  newState.instructor[actions.POST] = status;\n  return newState;\n};\n\nconst updateInstructorPatch = (state, id, status) => {\n  console.log(\"hit\");\n  let newState = JSON.parse(JSON.stringify(state));\n  newState.instructor[actions.PATCH][id] = status;\n  return newState;\n};","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/reducers/apiReducer.js"],"names":["actions","initialState","api","state","RequestStatus","payload","type","console","log","status","response","LOGIN_STARTED","updateLogin","REQUEST_STARTED","LOGIN_SUCCESSFUL","LOGIN_FAILED","RESET_ATTEMPT","clearLogin","LOGOUT","FETCH_COURSE_STARTED","updateCourseFetch","id","FETCH_COURSE_SUCCESSFUL","FETCH_COURSE_FAILED","FETCH_INSTRUCTOR_STARTED","updateInstructorFetch","FETCH_INSTRUCTOR_SUCCESSFUL","FETCH_INSTRUCTOR_FAILED","POST_INSTRUCTOR_STARTED","updateInstructorPost","POST_INSTRUCTOR_SUCCESSFUL","POST_INSTRUCTOR_FAILED","PATCH_INSTRUCTOR_STARTED","updateInstructorPatch","newState","JSON","parse","stringify","course","GET","instructor","POST","PATCH"],"mappings":"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","sourcesContent":["import * as actions from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\nimport * as api from \"../actions/apiActions\";\n\nexport default (state = initialState.RequestStatus, {payload, type}) => {\n    console.log(type)\n    let status;\n    if (payload && payload.response && payload.response.status) {\n        ({status} = payload.response);\n    } else {\n        // general server error\n        status = 500;\n    }\n    switch (type) {\n        case actions.LOGIN_STARTED:\n            return updateLogin(state, api.REQUEST_STARTED);\n        case actions.LOGIN_SUCCESSFUL:\n            return updateLogin(state, status);\n        case actions.LOGIN_FAILED:\n            return updateLogin(state, status);\n        case actions.RESET_ATTEMPT:\n            return clearLogin(state);\n        case actions.LOGOUT:\n            return clearLogin(state);\n\n        case actions.FETCH_COURSE_STARTED:\n            return updateCourseFetch(state, payload.id, api.REQUEST_STARTED);\n        case actions.FETCH_COURSE_SUCCESSFUL:\n            return updateCourseFetch(state, payload.id, status);\n        case actions.FETCH_COURSE_FAILED:\n            return updateCourseFetch(state, payload.id, status);\n\n        case actions.FETCH_INSTRUCTOR_STARTED:\n            return updateInstructorFetch(state, payload.id, api.REQUEST_STARTED);\n        case actions.FETCH_INSTRUCTOR_SUCCESSFUL:\n            return updateInstructorFetch(state, payload.id, status);\n        case actions.FETCH_INSTRUCTOR_FAILED:\n            return updateInstructorFetch(state, payload.id, status);\n\n        case actions.POST_INSTRUCTOR_STARTED:\n            return updateInstructorPost(state, api.REQUEST_STARTED);\n        case actions.POST_INSTRUCTOR_SUCCESSFUL:\n            return updateInstructorPost(state, status);\n        case actions.POST_INSTRUCTOR_FAILED:\n            return updateInstructorPost(state, status);\n\n        case actions.PATCH_INSTRUCTOR_STARTED:\n            return updateInstructorPatch(state, payload.id, api.REQUEST_STARTED);\n        case actions.POST_INSTRUCTOR_SUCCESSFUL:\n            return updateInstructorPatch(state, payload.id, status);\n        case actions.POST_INSTRUCTOR_FAILED:\n            return updateInstructorPatch(state, payload.id, status);\n\n        default:\n            return state;\n    }\n};\n\nconst clearLogin = (state) => ({\n    ...state,\n    \"login\": null,\n});\n\nconst updateLogin = (state, status) => ({\n    ...state,\n    \"login\": status,\n});\n\nconst updateCourseFetch = (state, id, status) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.course[actions.GET][id] = status;\n    return newState;\n};\n\nconst updateInstructorFetch = (state, id, status) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.instructor[actions.GET][id] = status;\n    return newState;\n};\n\nconst updateInstructorPost = (state, status) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.instructor[actions.POST] = status;\n    return newState;\n};\n\nconst updateInstructorPatch = (state, id, status) => {\n    console.log(\"hit\")\n    let newState = JSON.parse(JSON.stringify(state));\n    newState.instructor[actions.PATCH][id] = status;\n    return newState;\n};\n"]},"metadata":{},"sourceType":"module"}