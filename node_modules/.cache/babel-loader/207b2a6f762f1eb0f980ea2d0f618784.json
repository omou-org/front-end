{"ast":null,"code":"var _jsxFileName = \"/Users/js/Desktop/front-end/src/components/FeatureViews/Accounts/TabComponents/PayCourses.js\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Button } from \"@material-ui/core\";\nimport { NavLink } from \"react-router-dom\";\nconst msPerWeek = 1000 * 60 * 60 * 24 * 7;\n\nconst calcSessionCost = ({\n  \"schedule\": {\n    start_date,\n    end_date,\n    days\n  },\n  tuition\n}) => {\n  const startDate = new Date(start_date);\n  const endDate = new Date(end_date);\n  const numWeeks = (endDate - startDate) / msPerWeek;\n  const numSessions = numWeeks * days.length;\n  return tuition / numSessions;\n};\n\nconst PayCourses = props => {\n  const rows = props.user.student_ids.map(studentID => {\n    const student = props.students[studentID];\n    const unpaidEnrollments = Object.entries(props.enrollments[studentID]).map(([courseID, {\n      session_payment_status\n    }]) => {\n      const unpaidCount = Object.values(session_payment_status).reduce((total, paymentStatus) => total + (paymentStatus === 0), 0);\n      return {\n        courseID,\n        unpaidCount\n      };\n    });\n    const numUnpaid = unpaidEnrollments.reduce((total, {\n      unpaidCount\n    }) => total + unpaidCount, 0);\n    const tuition = unpaidEnrollments.reduce((total, {\n      courseID,\n      unpaidCount\n    }) => total + Math.round(unpaidCount * calcSessionCost(props.courses[courseID])), 0);\n    return {\n      student,\n      numUnpaid,\n      tuition\n    };\n  });\n  return React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Table, {\n    component: Paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Student\"), React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Unpaid\\xA0Courses\"), React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Tuition\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, rows.map(({\n    \"student\": {\n      first_name,\n      last_name,\n      user_id\n    },\n    numUnpaid,\n    tuition\n  }) => React.createElement(TableRow, {\n    key: user_id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, first_name, \"\\xA0\", last_name), React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, numUnpaid), React.createElement(TableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, tuition))))), React.createElement(Button, {\n    style: {\n      \"float\": \"right\"\n    },\n    component: NavLink,\n    to: \"/accounts/parents/\".concat(props.user.user_id, \"/pay\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"$ Pay\")));\n};\n\nPayCourses.propTypes = {\n  \"user\": PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  \"payments\": state.Payments,\n  \"courses\": state.Course.NewCourseList,\n  \"parents\": state.Users.ParentList,\n  \"students\": state.Users.StudentList,\n  \"enrollments\": state.Enrollments\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PayCourses);","map":{"version":3,"sources":["/Users/js/Desktop/front-end/src/components/FeatureViews/Accounts/TabComponents/PayCourses.js"],"names":["connect","PropTypes","React","Table","Grid","TableBody","TableCell","TableHead","TableRow","Paper","Button","NavLink","msPerWeek","calcSessionCost","start_date","end_date","days","tuition","startDate","Date","endDate","numWeeks","numSessions","length","PayCourses","props","rows","user","student_ids","map","studentID","student","students","unpaidEnrollments","Object","entries","enrollments","courseID","session_payment_status","unpaidCount","values","reduce","total","paymentStatus","numUnpaid","Math","round","courses","first_name","last_name","user_id","propTypes","object","isRequired","mapStateToProps","state","Payments","Course","NewCourseList","Users","ParentList","StudentList","Enrollments","mapDispatchToProps"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {Button} from \"@material-ui/core\";\nimport {NavLink} from \"react-router-dom\";\n\nconst msPerWeek = 1000 * 60 * 60 * 24 * 7;\n\nconst calcSessionCost = ({\n    \"schedule\": {start_date, end_date, days},\n    tuition,\n}) => {\n    const startDate = new Date(start_date);\n    const endDate = new Date(end_date);\n    const numWeeks = (endDate - startDate) / msPerWeek;\n    const numSessions = numWeeks * days.length;\n    return tuition / numSessions;\n};\n\nconst PayCourses = (props) => {\n    const rows = props.user.student_ids.map((studentID) => {\n        const student = props.students[studentID];\n\n        const unpaidEnrollments = Object.entries(props.enrollments[studentID])\n            .map(([courseID, {session_payment_status}]) => {\n                const unpaidCount = Object.values(session_payment_status)\n                    .reduce((total, paymentStatus) => total + (paymentStatus === 0), 0);\n                return {\n                    courseID,\n                    unpaidCount,\n                };\n            });\n\n        const numUnpaid = unpaidEnrollments\n            .reduce((total, {unpaidCount}) => total + unpaidCount, 0);\n        const tuition = unpaidEnrollments.reduce(\n            (total, {courseID, unpaidCount}) =>\n                total + Math.round(unpaidCount * calcSessionCost(props.courses[courseID])), 0\n        );\n\n        return {\n            student,\n            numUnpaid,\n            tuition,\n        };\n    });\n\n    return (\n        <Grid>\n            <Grid item md={6}>\n                <Table component={Paper}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\">\n                                Student\n                            </TableCell>\n                            <TableCell align=\"left\">\n                                Unpaid&nbsp;Courses\n                            </TableCell>\n                            <TableCell align=\"left\">\n                                Tuition\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map(({\n                            \"student\": {first_name, last_name, user_id},\n                            numUnpaid,\n                            tuition,\n                        }) => (\n                            <TableRow key={user_id}>\n                                <TableCell align=\"left\">\n                                    {first_name}&nbsp;{last_name}\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {numUnpaid}\n                                </TableCell>\n                                <TableCell align=\"left\">\n                                    {tuition}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n                <Button\n                    style={{\n                        \"float\": \"right\",\n                    }}\n                    component={NavLink}\n                    to={`/accounts/parents/${props.user.user_id}/pay`}>\n                    $ Pay\n                </Button>\n            </Grid>\n        </Grid>\n    );\n};\n\nPayCourses.propTypes = {\n    \"user\": PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    \"payments\": state.Payments,\n    \"courses\": state.Course.NewCourseList,\n    \"parents\": state.Users.ParentList,\n    \"students\": state.Users.StudentList,\n    \"enrollments\": state.Enrollments,\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PayCourses);\n"]},"metadata":{},"sourceType":"module"}