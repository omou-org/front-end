{"ast":null,"code":"import _objectSpread from \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/components/FeatureViews/Scheduler/Scheduler.js\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport PropTypes, { bool } from \"prop-types\";\nimport React, { Component } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport listViewPlugin from \"@fullcalendar/list\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport resourceTimelinePlugin from \"@fullcalendar/resource-timeline\";\nimport * as calenderActions from \"../../../actions/calenderActions\"; // material-Ui dependencies\n\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftOutlinedIcon from '@material-ui/icons/ChevronLeftOutlined';\nimport ChevronRightOutlinedIcon from '@material-ui/icons/ChevronRightOutlined';\nimport Paper from \"@material-ui/core/Paper\";\nimport DateRangeOutlinedIcon from \"@material-ui/icons/DateRangeOutlined\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\nimport SearchIcon from \"@material-ui/icons/Search\"; // tool tip dependencies\n\nimport tippy from \"tippy.js\";\nimport \"tippy.js/themes/google.css\";\nimport \"./scheduler.scss\";\nimport { GET } from \"../../../actions/actionTypes\";\n\nclass Scheduler extends Component {\n  constructor(props) {\n    super(props);\n    this.calendarComponentRef = React.createRef();\n\n    this.toggleWeekends = () => {\n      this.setState({\n        // update a property\n        \"calendarWeekends\": !this.state.calendarWeekends\n      });\n    };\n\n    this.changeView = value => {\n      let calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.changeView(value);\n      const date = this.currentDate();\n      this.setState({\n        \"viewValue\": value,\n        \"currentDate\": date\n      });\n    };\n\n    this.goToNext = () => {\n      const calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.next();\n      const date = this.currentDate();\n      this.setState({\n        \"currentDate\": date\n      });\n    };\n\n    this.goToPrev = () => {\n      let calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.prev();\n      const date = this.currentDate();\n      this.setState({\n        \"currentDate\": date\n      });\n    };\n\n    this.today = () => {\n      const calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.today();\n      this.currentDate();\n    };\n\n    this.currentDate = () => {\n      const calendarApi = this.calendarComponentRef.current.getApi();\n      const date = calendarApi.view.title;\n      return date;\n    };\n\n    this.changeViewToResource = () => {\n      let calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.changeView('resourceTimeline');\n      let date = this.currentDate();\n      this.setState({\n        resourceIcon: true,\n        calendarIcon: false,\n        calendarResourcesViews: this.getRoomResources(),\n        currentDate: date\n      });\n    };\n\n    this.changeViewToCalendar = () => {\n      let calendarApi = this.calendarComponentRef.current.getApi();\n      calendarApi.changeView('dayGridMonth');\n      let date = this.currentDate();\n      this.setState({\n        calendarIcon: true,\n        resourceIcon: false,\n        currentDate: date\n      });\n    };\n\n    this.getEvents = () => {\n      const courseKeys = Object.keys(this.props.sessions);\n      const instructorKeys = Object.keys(this.props.instructors); // creates an array from courseKeys [0,1,2,3,...,10]\n\n      const sessionsInViewList = courseKeys.map(courseKey => {\n        // course will get each session and map with courseKey\n        let course = this.props.sessions[courseKey]; // gets the keys to each session that was mapped\n\n        let courseSessionKeys = Object.keys(course); // creates an array that maps through courseSessionKey\n\n        let courseSessions = courseSessionKeys.map(sessionKey => {\n          // sessions = sessions from initial state\n          // courseKey is the key value from inital state\n          // sessionKey is the variable named inside the map, this is mapping over each coursekey\n          // session is the matched pairs of course and session objects\n          let session = this.props.sessions[courseKey][sessionKey];\n          const allSessions = this.props.courses[session.course_id];\n          session[\"title\"] = allSessions.title;\n          session[\"description\"] = allSessions.description;\n          session['type'] = allSessions.type;\n          session['resourceId'] = allSessions.room_id;\n          session['room_id'] = allSessions.room_id;\n          session[\"start_time\"] = this.props.sessions[courseKey][sessionKey].start;\n          session[\"end_time\"] = this.props.sessions[courseKey][sessionKey].end;\n          return session;\n        });\n        return courseSessions;\n      });\n      let sessionsInView = [];\n      sessionsInViewList.forEach(sessionsList => {\n        sessionsInView = sessionsInView.concat(sessionsList);\n      });\n      const sessionsInViewWithUrl = sessionsInView.map(el => {\n        const newSessions = _objectSpread({}, el);\n\n        newSessions.url = \"http:/scheduler/view-session/\".concat(newSessions.course_id, \"/\").concat(newSessions.session_id);\n        return newSessions;\n      });\n      return sessionsInViewWithUrl;\n    };\n\n    this.handleFilterChange = name => event => {\n      this.setState({\n        \"filterEvent\": event.target.value\n      });\n      this.filterEvent(event.target.value);\n    };\n\n    this.filterEvent = filterType => {\n      // grabs the array of objects to filter\n      const items = this.getEvents();\n      const newEvents = items.filter(({\n        type\n      }) => type !== filterType);\n      this.setState(prevState => ({\n        \"calendarEvents\": prevState.calendarEvents = newEvents\n      }));\n    };\n\n    this.handleResourceFilterChange = name => event => {\n      this.setState(_objectSpread({}, this.state, {\n        [name]: event.target.value\n      }));\n\n      if (event.target.value === \"R\") {\n        let rooms = this.getRoomResources();\n        this.setState(prevState => ({\n          calendarResourcesViews: rooms\n        }));\n      } else {\n        let instructors = this.getInstructorResources();\n        this.setState(prevState => ({\n          calendarResourcesViews: instructors\n        }));\n      }\n\n      this.setState(prevState => prevState.counter + 1);\n    };\n\n    this.getRoomResources = () => {\n      let courses = Object.values(this.props.courses);\n      let resourceList = courses.map(({\n        room_id\n      }) => ({\n        \"id\": room_id,\n        \"title\": \"Room \".concat(room_id)\n      }));\n      return resourceList;\n    };\n\n    this.getInstructorResources = () => {\n      let instructor = Object.values(this.props.instructors);\n      let instructorList = instructor.map(({\n        user_id,\n        name\n      }) => {\n        return {\n          \"id\": user_id,\n          'title': name\n        };\n      });\n      return instructorList;\n    };\n\n    this.state = {\n      calendarWeekends: true,\n      calendarResourcesViews: [],\n      calendarEvents: [],\n      currentDate: \"\",\n      viewValue: '',\n      filterValue: \"C\",\n      resourceFilterValue: \"R\",\n      calendarIcon: true,\n      resourceIcon: false\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      calendarEvents: this.getEvents()\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      currentDate: this.currentDate(),\n      filterValue: this.filterEvent(\"C\")\n    });\n  } // the eventRender function handles the tooltip\n\n\n  handleToolTip(info) {\n    function truncate(string) {\n      const numberOfCharRemoved = 88;\n\n      if (string.length > numberOfCharRemoved) {\n        return string.substring(0, numberOfCharRemoved) + '...';\n      } else {\n        return string;\n      }\n    }\n\n    function formatDate(start, end) {\n      const DayConverter = {\n        1: \"Monday\",\n        2: \"Tuesday\",\n        3: \"Wednesday\",\n        4: \"Thursday\",\n        5: \"Friday\",\n        6: \"Saturday\"\n      };\n      const MonthConverter = {\n        0: \"January\",\n        1: \"February\",\n        2: \"March\",\n        3: \"April\",\n        4: \"May\",\n        5: \"June\",\n        6: \"July\",\n        7: \"August\",\n        8: \"September\",\n        9: \"October\",\n        10: \"November\",\n        11: \"December\"\n      };\n      const date = new Date(start);\n      const dateNumber = date.getDate();\n      const dayOfWeek = date.getDay();\n      const startMonth = date.getMonth(); // Gets days\n\n      const Days = DayConverter[dayOfWeek]; //Gets months\n\n      const Month = MonthConverter[startMonth]; //Start times and end times variable\n\n      let startTime = start.slice(11);\n      let endTime = end.slice(11); // Converts 24hr to 12 hr time\n\n      function timeConverter(time) {\n        let Hour = time.substr(0, 2);\n        let to12HourTime = Hour % 12 || 12;\n        let ampm = Hour < 12 ? \"a\" : \"p\";\n        time = to12HourTime + time.substr(2, 3) + ampm;\n        return time;\n      }\n\n      let finalTime = \"\".concat(Days, \", \").concat(Month, \" \").concat(dateNumber, \" <br> \").concat(timeConverter(startTime), \" - \").concat(timeConverter(endTime));\n      return finalTime;\n    }\n\n    new tippy(info.el, {\n      content: \"\\n                <div class=\\\"toolTip\\\">\\n                    <div class='title'><h3> \".concat(info.event.title, \" </h3></div>\\n                    <div class=\\\"container\\\">\\n                        <div class='clock'><span class='clock_icon'>  \").concat(formatDate(info.event.extendedProps.start_time, info.event.extendedProps.end_time), \"</span></div>\\n                        <span>\\n                            \").concat(info.event.extendedProps.type, \"\\n                        </span>\\n                        <div class='pin_icon'><span class=''>Room # \").concat(info.event.extendedProps.room_id, \"</span></div>\\n                        <div class='teacher_icon'><span class=''>\").concat(info.event.extendedProps.instructor ? info.event.extendedProps.instructor : \"No teacher Yet\", \"</span></div>\\n                        <div class='discription_icon'><span class='description-text'>\").concat(truncate(info.event.extendedProps.description), \"</span></div>\\n                    </div>\\n                </div>\\n            \"),\n      theme: \"light\",\n      placement: 'right',\n      interactive: true\n    });\n  } // full Calendar API used to change calendar views\n\n\n  // ID of instructors should match resourceID\n  // Object needs to be pushed into calendar events\n  // Need to use daysOfWeek with start time,endTime,startRecur and endRecur\n  // Step one take use this.state.instructorlists to get the instructors object\n  // Take the user_id, name,\n  //\n\n  /*\n      Events should be stored like\n      [{\n          title : \"name of instructor\",\n          id: \"instructor ID\",\n          resourceID : \"instructor ID\",\n          daysOfWeek : [ 0,1,4] = the amount of recurring days, 0 = sunday , 1 = monday ect.\n          startTime : \"Time of work in 24hour time ie, 10:30 ,\n          endTime : \"Time to end work in 24hour time ie, 14:00\",\n          startRecur : \"when recurrence of event starts '2019-09-25\"\n          endRecur : \"when the recurrence of events end '2020-01-25\" (should be the semester long )\n       }]\n           with time off same applys with everything on top, but we need\n          [{\n              resourceID \" instructor ID\"\n              start\n              rendering: \"background\",\n              color  : \"gray\"\n          }]\n        */\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main-calendar-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: \"paper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h3\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Scheduler\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      alignItems: \"center\",\n      justify: \"center\",\n      className: \"scheduler-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: this.state.calendarIcon ? \"primary\" : \"default\",\n      onClick: this.changeViewToCalendar,\n      className: 'calendar-icon',\n      \"aria-label\": \"next-month\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(DateRangeOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      color: this.state.resourceIcon ? \"primary\" : \"default\",\n      onClick: this.changeViewToResource,\n      className: 'resource-icon',\n      \"aria-label\": \"next-month\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(ViewListIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: 'next-month',\n      \"aria-label\": \"next-month\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(SearchIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, this.state.calendarIcon ? React.createElement(FormControl, {\n      className: 'filter-select',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      htmlFor: \"filter-class-type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), React.createElement(Select, {\n      native: true,\n      value: this.state.filterValue,\n      onChange: this.handleFilterChange('filterValue'),\n      inputProps: {\n        name: 'filterValue',\n        id: 'filter-class-type'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"C\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Class\"), React.createElement(\"option\", {\n      value: \"T\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"Tutor\"))) : React.createElement(FormControl, {\n      className: 'filter-select',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      htmlFor: \"filter-resource-type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }), React.createElement(Select, {\n      native: true,\n      value: this.state.resourceFilterValue,\n      onChange: this.handleResourceFilterChange('resourceFilterValue'),\n      inputProps: {\n        name: 'resourceFilterValue',\n        id: 'filter-resource-type'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"R\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }, \"Room\"), React.createElement(\"option\", {\n      value: \"I\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"Instructors\")))), React.createElement(Grid, {\n      item: true,\n      md: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.goToPrev,\n      className: 'prev-month',\n      \"aria-label\": \"prev-month\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(ChevronLeftOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: 'h6',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, this.state.currentDate)), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      onClick: this.goToNext,\n      className: 'next-month',\n      \"aria-label\": \"next-month\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(ChevronRightOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      md: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      className: 'change-view',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, React.createElement(InputLabel, {\n      htmlFor: \"change-view-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }), React.createElement(Select, {\n      native: true,\n      value: this.state.viewValue,\n      onChange: event => this.changeView(event.target.value),\n      inputProps: {\n        name: 'viewValue',\n        id: 'change-view-select'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"timeGridDay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }, \"Day\"), React.createElement(\"option\", {\n      value: \"timeGridWeek\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, \"Week\"), React.createElement(\"option\", {\n      value: \"dayGridMonth\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"Month\")))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        this.changeViewToCalendar();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, \"Calendar\")), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        this.changeViewToResource();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, \"Resource\"))), React.createElement(Grid, {\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      className: \"demo-app-calendar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, React.createElement(FullCalendar, {\n      defaultView: \"timeGridDay\",\n      header: false,\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listViewPlugin, resourceTimelinePlugin],\n      ref: this.calendarComponentRef,\n      weekends: this.state.calendarWeekends,\n      displayEventTime: true,\n      eventColor: \"none\",\n      eventSources: [{\n        events: this.state.calendarEvents\n      }],\n      titleFormat: {\n        month: \"long\",\n        day: \"numeric\"\n      },\n      views: {\n        dayGrid: {\n          titleFormat: {\n            month: \"long\"\n          }\n        }\n      },\n      timeZone: 'local',\n      eventMouseEnter: this.handleToolTip,\n      eventLimit: 4,\n      nowIndicator: true,\n      resourceOrder: 'title',\n      resourceAreaWidth: '20%',\n      resources: this.state.calendarResourcesViews,\n      schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nScheduler.propTypes = {};\n\nfunction mapStateToProps(state) {\n  return {\n    \"courses\": state.Course.NewCourseList,\n    \"sessions\": state.Course.CourseSessions,\n    \"instructors\": state.Users.InstructorList\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    \"calenderActions\": bindActionCreators(calenderActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Scheduler);","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/components/FeatureViews/Scheduler/Scheduler.js"],"names":["connect","bindActionCreators","PropTypes","bool","React","Component","FullCalendar","dayGridPlugin","timeGridPlugin","listViewPlugin","interactionPlugin","resourceTimelinePlugin","calenderActions","Button","withStyles","Typography","Grid","FormControl","Select","InputLabel","IconButton","ChevronLeftOutlinedIcon","ChevronRightOutlinedIcon","Paper","DateRangeOutlinedIcon","ViewListIcon","SearchIcon","tippy","GET","Scheduler","constructor","props","calendarComponentRef","createRef","toggleWeekends","setState","state","calendarWeekends","changeView","value","calendarApi","current","getApi","date","currentDate","goToNext","next","goToPrev","prev","today","view","title","changeViewToResource","resourceIcon","calendarIcon","calendarResourcesViews","getRoomResources","changeViewToCalendar","getEvents","courseKeys","Object","keys","sessions","instructorKeys","instructors","sessionsInViewList","map","courseKey","course","courseSessionKeys","courseSessions","sessionKey","session","allSessions","courses","course_id","description","type","room_id","start","end","sessionsInView","forEach","sessionsList","concat","sessionsInViewWithUrl","el","newSessions","url","session_id","handleFilterChange","name","event","target","filterEvent","filterType","items","newEvents","filter","prevState","calendarEvents","handleResourceFilterChange","rooms","getInstructorResources","counter","values","resourceList","instructor","instructorList","user_id","viewValue","filterValue","resourceFilterValue","componentWillMount","componentDidMount","handleToolTip","info","truncate","string","numberOfCharRemoved","length","substring","formatDate","DayConverter","MonthConverter","Date","dateNumber","getDate","dayOfWeek","getDay","startMonth","getMonth","Days","Month","startTime","slice","endTime","timeConverter","time","Hour","substr","to12HourTime","ampm","finalTime","content","extendedProps","start_time","end_time","theme","placement","interactive","render","id","events","month","day","dayGrid","titleFormat","propTypes","mapStateToProps","Course","NewCourseList","CourseSessions","Users","InstructorList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport PropTypes, {bool} from \"prop-types\";\nimport React, {Component} from \"react\";\n\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport listViewPlugin from \"@fullcalendar/list\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport resourceTimelinePlugin from \"@fullcalendar/resource-timeline\";\n\nimport * as calenderActions from \"../../../actions/calenderActions\";\n\n// material-Ui dependencies\n\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport IconButton from \"@material-ui/core/IconButton\"\nimport ChevronLeftOutlinedIcon from '@material-ui/icons/ChevronLeftOutlined';\nimport ChevronRightOutlinedIcon from '@material-ui/icons/ChevronRightOutlined';\nimport Paper from \"@material-ui/core/Paper\";\nimport DateRangeOutlinedIcon from \"@material-ui/icons/DateRangeOutlined\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\n// tool tip dependencies\nimport tippy from \"tippy.js\";\nimport \"tippy.js/themes/google.css\";\nimport \"./scheduler.scss\";\nimport {GET} from \"../../../actions/actionTypes\";\n\n\n\nclass Scheduler extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            calendarWeekends: true,\n            calendarResourcesViews: [],\n            calendarEvents: [],\n            currentDate: \"\",\n            viewValue: '',\n            filterValue: \"C\",\n            resourceFilterValue: \"R\",\n            calendarIcon: true,\n            resourceIcon: false,\n\n        };\n    }\n\n    calendarComponentRef = React.createRef();\n\n    componentWillMount() {\n        this.setState({\n            calendarEvents: this.getEvents(),\n\n        })\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            currentDate: this.currentDate(),\n            filterValue: this.filterEvent(\"C\")\n        })\n\n    }\n\n    // the eventRender function handles the tooltip\n    handleToolTip(info) {\n        function truncate(string) {\n            const numberOfCharRemoved = 88;\n            if (string.length > numberOfCharRemoved) {return string.substring(0, numberOfCharRemoved) + '...';}\n            else {return string;}\n        }\n\n        function formatDate(start, end) {\n            const DayConverter = {\n                1: \"Monday\",\n                2: \"Tuesday\",\n                3: \"Wednesday\",\n                4: \"Thursday\",\n                5: \"Friday\",\n                6: \"Saturday\",\n            };\n            const MonthConverter = {\n                0: \"January\",\n                1: \"February\",\n                2: \"March\",\n                3: \"April\",\n                4: \"May\",\n                5: \"June\",\n                6: \"July\",\n                7: \"August\",\n                8: \"September\",\n                9: \"October\",\n                10: \"November\",\n                11: \"December\"\n            }\n\n            const date = new Date(start)\n            const dateNumber = date.getDate()\n            const dayOfWeek = date.getDay()\n            const startMonth = date.getMonth()\n            // Gets days\n            const Days = DayConverter[dayOfWeek]\n\n            //Gets months\n            const Month = MonthConverter[startMonth]\n\n            //Start times and end times variable\n            let startTime = start.slice(11)\n            let endTime = end.slice(11)\n\n            // Converts 24hr to 12 hr time\n            function timeConverter(time) {\n\n                let Hour = time.substr(0, 2);\n                let to12HourTime = (Hour % 12) || 12;\n                let ampm = Hour < 12 ? \"a\" : \"p\";\n                time = to12HourTime + time.substr(2, 3) + ampm;\n                return time\n\n            }\n\n            let finalTime = `${Days}, ${Month} ${dateNumber} <br> ${timeConverter(startTime)} - ${timeConverter(endTime)}`\n\n            return finalTime\n\n        }\n\n\n\n        new tippy(info.el, {\n\n            content:\n                `\n                <div class=\"toolTip\">\n                    <div class='title'><h3> ${info.event.title} </h3></div>\n                    <div class=\"container\">\n                        <div class='clock'><span class='clock_icon'>  ${formatDate(info.event.extendedProps.start_time, info.event.extendedProps.end_time)}</span></div>\n                        <span>\n                            ${info.event.extendedProps.type}\n                        </span>\n                        <div class='pin_icon'><span class=''>Room # ${info.event.extendedProps.room_id}</span></div>\n                        <div class='teacher_icon'><span class=''>${info.event.extendedProps.instructor ? info.event.extendedProps.instructor : \"No teacher Yet\"}</span></div>\n                        <div class='discription_icon'><span class='description-text'>${truncate(info.event.extendedProps.description)}</span></div>\n                    </div>\n                </div>\n            `\n            ,\n            theme: \"light\",\n            placement: 'right',\n            interactive: true,\n        })\n\n    }\n\n\n    // full Calendar API used to change calendar views\n    toggleWeekends = () => {\n        this.setState({ // update a property\n            \"calendarWeekends\": !this.state.calendarWeekends,\n        });\n    };\n\n    // change from day,week, and month views\n    changeView = (value) => {\n        let calendarApi = this.calendarComponentRef.current.getApi()\n        calendarApi.changeView(value)\n        const date = this.currentDate()\n        this.setState({\n            \"viewValue\": value,\n            \"currentDate\": date,\n        });\n    }\n\n    goToNext = () => {\n        const calendarApi = this.calendarComponentRef.current.getApi();\n\n        calendarApi.next()\n        const date = this.currentDate();\n        this.setState({\n            \"currentDate\": date,\n        });\n    }\n\n    goToPrev = () => {\n        let calendarApi = this.calendarComponentRef.current.getApi()\n        calendarApi.prev()\n        const date = this.currentDate();\n\n        this.setState({\n            \"currentDate\": date,\n        });\n    }\n\n    today = () => {\n        const calendarApi = this.calendarComponentRef.current.getApi();\n        calendarApi.today();\n        this.currentDate();\n    }\n\n    currentDate = () => {\n        const calendarApi = this.calendarComponentRef.current.getApi();\n        const date = calendarApi.view.title;\n        return date;\n    }\n\n    // this function changes the resouce view when click as well as change the color of the icon\n    changeViewToResource = () => {\n        let calendarApi = this.calendarComponentRef.current.getApi()\n        calendarApi.changeView('resourceTimeline');\n        let date = this.currentDate()\n        this.setState({\n            resourceIcon: true,\n            calendarIcon: false,\n            calendarResourcesViews: this.getRoomResources(),\n            currentDate: date\n        })\n\n    }\n\n    changeViewToCalendar = () => {\n        let calendarApi = this.calendarComponentRef.current.getApi()\n        calendarApi.changeView('dayGridMonth');\n        let date = this.currentDate()\n        this.setState({\n            calendarIcon: true,\n            resourceIcon: false,\n            currentDate: date\n        })\n    }\n\n    // function to parse the inital state into data that full calendar could\n    getEvents = () => {\n        const courseKeys = Object.keys(this.props.sessions);\n        const instructorKeys = Object.keys(this.props.instructors);\n\n\n        // creates an array from courseKeys [0,1,2,3,...,10]\n        const sessionsInViewList = courseKeys.map((courseKey) => {\n            // course will get each session and map with courseKey\n            let course = this.props.sessions[courseKey];\n            // gets the keys to each session that was mapped\n            let courseSessionKeys = Object.keys(course);\n            // creates an array that maps through courseSessionKey\n            let courseSessions = courseSessionKeys.map((sessionKey) => {\n                // sessions = sessions from initial state\n                // courseKey is the key value from inital state\n                // sessionKey is the variable named inside the map, this is mapping over each coursekey\n                // session is the matched pairs of course and session objects\n                let session = this.props.sessions[courseKey][sessionKey];\n                const allSessions = this.props.courses[session.course_id]\n\n                session[\"title\"] = allSessions.title;\n                session[\"description\"] = allSessions.description;\n                session['type'] = allSessions.type;\n                session['resourceId'] = allSessions.room_id;\n                session['room_id'] = allSessions.room_id;\n                session[\"start_time\"] = this.props.sessions[courseKey][sessionKey].start\n                session[\"end_time\"] = this.props.sessions[courseKey][sessionKey].end\n                return session;\n\n            })\n\n            return courseSessions;\n        });\n\n        let sessionsInView = [];\n        sessionsInViewList.forEach((sessionsList) => {\n            sessionsInView = sessionsInView.concat(sessionsList);\n        });\n\n        const sessionsInViewWithUrl = sessionsInView.map((el) => {\n            const newSessions = {...el};\n            newSessions.url = `http:/scheduler/view-session/${newSessions.course_id}/${newSessions.session_id}`;\n            return newSessions;\n        });\n\n        return sessionsInViewWithUrl;\n    }\n    // This function is used in material-ui for the eventhandler\n    handleFilterChange = (name) => event => {\n        this.setState({\n\n            \"filterEvent\": event.target.value\n        })\n        this.filterEvent(event.target.value)\n    }\n\n    // this will filter out event based on type\n    filterEvent = (filterType) => {\n        // grabs the array of objects to filter\n        const items = this.getEvents();\n        const newEvents = items.filter(({type}) => type !== filterType);\n        this.setState((prevState) => (\n            {\n                \"calendarEvents\": prevState.calendarEvents = newEvents,\n            }));\n    }\n\n    handleResourceFilterChange = (name) => (event) => {\n        this.setState({\n            ...this.state,\n            [name]: event.target.value,\n        });\n        if (event.target.value === \"R\") {\n            let rooms = this.getRoomResources()\n            this.setState(prevState => (\n                {\n                    calendarResourcesViews: rooms\n                }\n            ))\n\n        } else {\n            let instructors = this.getInstructorResources()\n\n            this.setState(prevState => (\n                {\n                    calendarResourcesViews: instructors\n                }\n            ))\n        }\n        this.setState((prevState) => prevState.counter + 1);\n    }\n\n\n    // gets the values of course object\n    getRoomResources = () => {\n        let courses = Object.values(this.props.courses);\n        let resourceList = courses.map(({ room_id }) => ({\n                \"id\": room_id,\n                \"title\": `Room ${room_id}`,\n        }));\n\n        return resourceList;\n    }\n\n    // gets values of instructors and places them in the resource col\n    getInstructorResources = () => {\n        let instructor = Object.values(this.props.instructors)\n        let instructorList = instructor.map(({ user_id, name }) => {\n\n            return {\n                \"id\": user_id,\n                'title': name\n            }\n        })\n        return instructorList\n    }\n\n    // ID of instructors should match resourceID\n    // Object needs to be pushed into calendar events\n    // Need to use daysOfWeek with start time,endTime,startRecur and endRecur\n    // Step one take use this.state.instructorlists to get the instructors object\n    // Take the user_id, name,\n    //\n    /*\n        Events should be stored like\n        [{\n            title : \"name of instructor\",\n            id: \"instructor ID\",\n            resourceID : \"instructor ID\",\n            daysOfWeek : [ 0,1,4] = the amount of recurring days, 0 = sunday , 1 = monday ect.\n            startTime : \"Time of work in 24hour time ie, 10:30 ,\n            endTime : \"Time to end work in 24hour time ie, 14:00\",\n            startRecur : \"when recurrence of event starts '2019-09-25\"\n            endRecur : \"when the recurrence of events end '2020-01-25\" (should be the semester long )\n\n        }]\n\n            with time off same applys with everything on top, but we need\n            [{\n                resourceID \" instructor ID\"\n                start\n                rendering: \"background\",\n                color  : \"gray\"\n            }]\n\n\n        */\n\n    render() {\n\n        return (\n            <div className=\"main-calendar-div\">\n                <Paper className=\"paper\">\n                    <Typography variant=\"h3\" align=\"left\">Scheduler</Typography>\n                    <br />\n                    <Grid container\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        justify=\"center\"\n                        className=\"scheduler-header\">\n                        <Grid item >\n                            <IconButton\n                                color={this.state.calendarIcon ? \"primary\" : \"default\"}\n                                onClick={this.changeViewToCalendar}\n                                className={'calendar-icon'} aria-label='next-month'>\n                                <DateRangeOutlinedIcon />\n                            </IconButton>\n                        </Grid>\n                        <Grid item >\n                            <IconButton\n                                color={this.state.resourceIcon ? \"primary\" : \"default\"}\n                                onClick={this.changeViewToResource}\n                                className={'resource-icon'}\n                                aria-label='next-month'>\n                                <ViewListIcon />\n                            </IconButton>\n                        </Grid>\n                        <Grid item  >\n                            <IconButton\n                                className={'next-month'}\n                                aria-label='next-month'>\n                                <SearchIcon />\n                            </IconButton>\n                        </Grid>\n                        <Grid item >\n                            {(this.state.calendarIcon) ?\n                                <FormControl className={'filter-select'}  >\n                                    <InputLabel htmlFor=\"filter-class-type\"></InputLabel>\n                                    <Select\n                                        native\n                                        value={this.state.filterValue}\n                                        onChange={this.handleFilterChange('filterValue')}\n                                        inputProps={{\n                                            name: 'filterValue',\n                                            id: 'filter-class-type',\n                                        }}\n                                    >\n                                        <option value={\"C\"}>Class</option>\n                                        <option value={\"T\"}>Tutor</option>\n                                    </Select>\n                                </FormControl>\n                                :\n                                <FormControl className={'filter-select'} >\n                                    <InputLabel htmlFor=\"filter-resource-type\"></InputLabel>\n\n                                    <Select\n                                        native\n                                        value={this.state.resourceFilterValue}\n                                        onChange={this.handleResourceFilterChange('resourceFilterValue')}\n                                        inputProps={{\n                                            name: 'resourceFilterValue',\n                                            id: 'filter-resource-type',\n                                        }}\n                                    >\n                                        <option value={\"R\"}>Room</option>\n                                        <option value={\"I\"}>Instructors</option>\n                                    </Select>\n                                </FormControl>\n                            }\n\n                        </Grid>\n\n                        <Grid item md={1}>\n                            <IconButton onClick={this.goToPrev} className={'prev-month'} aria-label=\"prev-month\">\n                                <ChevronLeftOutlinedIcon />\n                            </IconButton>\n                        </Grid>\n                        <Grid item md={2} >\n                            <Typography variant={'h6'} >{this.state.currentDate}</Typography>\n                        </Grid>\n                        <Grid item>\n                            <IconButton onClick={this.goToNext} className={'next-month'} aria-label='next-month'>\n                                <ChevronRightOutlinedIcon />\n                            </IconButton>\n                        </Grid>\n\n                        <Grid item md={1} >\n                            <FormControl className={'change-view'} >\n                                <InputLabel htmlFor=\"change-view-select\"></InputLabel>\n                                <Select\n                                    native\n                                    value={this.state.viewValue}\n                                    onChange={(event) => this.changeView(event.target.value)}\n                                    inputProps={{\n                                        name: 'viewValue',\n                                        id: 'change-view-select'\n                                    }}\n                                >\n                                    <option value={\"timeGridDay\"}>Day</option>\n                                    <option value={\"timeGridWeek\"}>Week</option>\n                                    <option value={\"dayGridMonth\"}>Month</option>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                onClick={() => { this.changeViewToCalendar() }}\n                            >Calendar</Button>\n                        </Grid>\n                        <Grid item >\n                            <Button\n                                onClick={() => { this.changeViewToResource() }}\n                            >Resource</Button>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        <Grid className='demo-app-calendar'>\n                            <FullCalendar\n                                defaultView=\"timeGridDay\"\n                                header={false}\n                                plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, listViewPlugin, resourceTimelinePlugin]}\n                                ref={this.calendarComponentRef}\n                                weekends={this.state.calendarWeekends}\n                                displayEventTime={true}\n                                eventColor={\"none\"}\n                                eventSources={[\n                                    { events: this.state.calendarEvents }\n                                ]}\n                                titleFormat={{\n                                    month: \"long\",\n                                    day: \"numeric\",\n                                }}\n                                views={{\n                                    dayGrid: {\n                                        titleFormat: {\n                                            month: \"long\"\n                                        }\n                                    }\n                                }}\n                                timeZone={'local'}\n                                eventMouseEnter={this.handleToolTip}\n                                eventLimit={4}\n                                nowIndicator={true}\n                                resourceOrder={'title'}\n                                resourceAreaWidth={'20%'}\n                                resources={this.state.calendarResourcesViews}\n                                schedulerLicenseKey={'GPL-My-Project-Is-Open-Source'}\n                            />\n                        </Grid>\n                    </Grid>\n                </Paper >\n\n            </div >\n        )\n    }\n}\n\nScheduler.propTypes = {};\n\nfunction mapStateToProps(state) {\n    return {\n        \"courses\": state.Course.NewCourseList,\n        \"sessions\": state.Course.CourseSessions,\n        \"instructors\": state.Users.InstructorList,\n\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        \"calenderActions\": bindActionCreators(calenderActions, dispatch),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Scheduler);\n"]},"metadata":{},"sourceType":"module"}