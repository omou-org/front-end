{"ast":null,"code":"export const addDashes = string => {\n  if (string.length === 10 && string.match(/^[0-9]+$/) !== null) {\n    return \"(\".concat(string.slice(0, 3), \"-\").concat(string.slice(3, 6), \"-\").concat(string.slice(6, 15), \")\");\n  } else {\n    return \"error\";\n  }\n};\nexport const stringToColor = string => {\n  let hash = 0;\n  let i;\n  /* eslint-disable no-bitwise */\n\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let colour = \"#\";\n\n  for (i = 0; i < 3; i += 1) {\n    const value = hash >> i * 8 & 0xff;\n    colour += \"00\".concat(value.toString(16)).substr(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n\n  return colour;\n};","map":{"version":3,"sources":["/Users/js/Desktop/front-end/src/components/FeatureViews/Accounts/accountUtils.js"],"names":["addDashes","string","length","match","slice","stringToColor","hash","i","charCodeAt","colour","value","toString","substr"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAEC,MAAD,IAAU;AAC7B,MAAIA,MAAM,CAACC,MAAP,KAAkB,EAAlB,IAAwBD,MAAM,CAACE,KAAP,CAAa,UAAb,MAA6B,IAAzD,EAA+D;AAC/D,sBACSF,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgB,CAAhB,CADT,cAC+BH,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAD/B,cACqDH,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgB,EAAhB,CADrD;AAEC,GAHD,MAII;AACA,WAAO,OAAP;AACH;AACJ,CARM;AASP,OAAO,MAAMC,aAAa,GAAEJ,MAAD,IAAW;AAClC,MAAIK,IAAI,GAAG,CAAX;AACA,MAAIC,CAAJ;AAEA;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGN,MAAM,CAACC,MAAvB,EAA+BK,CAAC,IAAI,CAApC,EAAuC;AACnCD,IAAAA,IAAI,GAAGL,MAAM,CAACO,UAAP,CAAkBD,CAAlB,KAAwB,CAACD,IAAI,IAAI,CAAT,IAAcA,IAAtC,CAAP;AACH;;AAED,MAAIG,MAAM,GAAG,GAAb;;AAEA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2B;AACvB,UAAMG,KAAK,GAAIJ,IAAI,IAAKC,CAAC,GAAG,CAAd,GAAoB,IAAlC;AACAE,IAAAA,MAAM,IAAI,YAAKC,KAAK,CAACC,QAAN,CAAe,EAAf,CAAL,EAA0BC,MAA1B,CAAiC,CAAC,CAAlC,CAAV;AACH;AACD;;;AAEA,SAAOH,MAAP;AACH,CAlBM","sourcesContent":["export const addDashes=(string)=>{\n    if (string.length === 10 && string.match(/^[0-9]+$/) !== null) {\n    return(\n         `(${string.slice(0, 3)}-${string.slice(3, 6)}-${string.slice(6, 15)})`);\n    }\n    else{\n        return(\"error\");\n    }\n}\nexport const stringToColor=(string) =>{\n    let hash = 0;\n    let i;\n\n    /* eslint-disable no-bitwise */\n    for (i = 0; i < string.length; i += 1) {\n        hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let colour = \"#\";\n\n    for (i = 0; i < 3; i += 1) {\n        const value = (hash >> (i * 8)) & 0xff;\n        colour += `00${value.toString(16)}`.substr(-2);\n    }\n    /* eslint-enable no-bitwise */\n\n    return colour;\n}"]},"metadata":{},"sourceType":"module"}