{"ast":null,"code":"import _objectSpread from \"/Users/4e65696c/Documents/GitHub/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/4e65696c/Documents/GitHub/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/4e65696c/Documents/GitHub/front-end/src/components/Form/ParentPayment.js\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport BackButton from \"../BackButton\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport { Button } from \"@material-ui/core\";\nconst msPerWeek = 1000 * 60 * 60 * 24 * 7;\n\nconst renderDate = date => {\n  const _date$split = date.split(\"-\"),\n        _date$split2 = _slicedToArray(_date$split, 3),\n        year = _date$split2[0],\n        month = _date$split2[1],\n        day = _date$split2[2];\n\n  return \"\".concat(month, \"/\").concat(day, \"/\").concat(year);\n};\n\nconst calcSessionCost = ({\n  \"schedule\": {\n    start_date,\n    end_date,\n    days\n  },\n  tuition\n}) => {\n  const startDate = new Date(start_date);\n  const endDate = new Date(end_date);\n  const numWeeks = (endDate - startDate) / msPerWeek;\n  const numSessions = numWeeks * days.length;\n  return tuition / numSessions;\n};\n\nconst ParentPayment = props => {\n  const parent = props.parents[props.computedMatch.params.parentID];\n  const sessionsMax = {};\n  const initialSelectedRows = {};\n  parent.student_ids.forEach(studentID => {\n    sessionsMax[studentID] = {};\n    initialSelectedRows[studentID] = {};\n    Object.entries(props.enrollments[studentID]).forEach(([courseID, {\n      session_payment_status\n    }]) => {\n      const unpaidCount = Object.values(session_payment_status).reduce((total, paymentStatus) => total + (paymentStatus === 0), 0);\n\n      if (unpaidCount !== 0) {\n        sessionsMax[studentID][courseID] = unpaidCount;\n        initialSelectedRows[studentID][courseID] = false;\n      }\n    });\n  });\n\n  const _useState = useState(sessionsMax),\n        _useState2 = _slicedToArray(_useState, 2),\n        sessionFields = _useState2[0],\n        setSessionFields = _useState2[1];\n\n  const _useState3 = useState(initialSelectedRows),\n        _useState4 = _slicedToArray(_useState3, 2),\n        selectedRows = _useState4[0],\n        setSelectedRows = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        paymentType = _useState6[0],\n        setPaymentType = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        enteredDiscountCode = _useState8[0],\n        setEnteredDiscountCode = _useState8[1];\n\n  const getPaymentInfo = student => {\n    const unpaidCourses = Object.keys(props.enrollments[student.user_id]).filter(courseID => // only use courses that need to be paid\n    Object.values(props.enrollments[student.user_id][courseID].session_payment_status).some(paymentStatus => paymentStatus === 0)).map(courseID => props.courses[courseID]);\n    return unpaidCourses.map(course => {\n      const numSessions = sessionFields[student.user_id][course.course_id];\n      return {\n        course,\n        \"sessions\": numSessions,\n        \"tuition\": numSessions * calcSessionCost(course)\n      };\n    });\n  };\n\n  const getTotalCost = () => {\n    let total = 0;\n    Object.entries(sessionFields).forEach(([studentID, studentCourses]) => {\n      Object.entries(studentCourses).forEach(([courseID, sessionCount]) => {\n        if (selectedRows[studentID][courseID] && sessionCount > 0 && sessionCount <= sessionsMax[studentID][courseID]) {\n          total += sessionCount * calcSessionCost(props.courses[courseID]);\n        }\n      });\n    });\n    return total;\n  };\n\n  const renderStudentPayments = student => {\n    const rows = getPaymentInfo(student);\n    return React.createElement(\"div\", {\n      key: student.user_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, student.name), React.createElement(Table, {\n      padding: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"colgroup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"col\", {\n      width: \"0%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"col\", {\n      width: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(\"col\", {\n      width: \"0%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"col\", {\n      width: \"0%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"col\", {\n      width: \"0%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"col\", {\n      width: \"0%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Session\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Dates\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Sessions\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Tuition\"), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Material Fee\"))), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, rows.map(({\n      course,\n      tuition\n    }) => {\n      const validSessions = sessionFields[student.user_id][course.course_id] > 0 && sessionFields[student.user_id][course.course_id] <= sessionsMax[student.user_id][course.course_id];\n      return React.createElement(TableRow, {\n        hover: true,\n        tabIndex: -1,\n        key: course.course_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        padding: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        checked: selectedRows[student.user_id][course.course_id],\n        onClick: () => {\n          setSelectedRows(_objectSpread({}, selectedRows, {\n            [student.user_id]: _objectSpread({}, selectedRows[student.user_id], {\n              [course.course_id]: !selectedRows[student.user_id][course.course_id]\n            })\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      })), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          \"width\": \"50%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, course.title)), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, renderDate(course.schedule.start_date), \"\\xA0-\\xA0\", renderDate(course.schedule.end_date)), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-name\",\n        type: \"number\",\n        error: !validSessions,\n        value: sessionFields[student.user_id][course.course_id],\n        onChange: ({\n          \"target\": {\n            value\n          }\n        }) => {\n          setSessionFields(_objectSpread({}, sessionFields, {\n            [student.user_id]: _objectSpread({}, sessionFields[student.user_id], {\n              [course.course_id]: value\n            })\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, validSessions && \"$\".concat(Math.round(tuition))), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"$50\"));\n    }))));\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 11,\n    style: {\n      \"padding\": \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(BackButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, \"Pay for Course(s)\"), parent.student_ids.map(studentID => renderStudentPayments(props.students[studentID])), React.createElement(Grid, {\n    container: true,\n    style: {\n      \"paddingTop\": \"5vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 6,\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    component: \"fieldset\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    component: \"legend\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"Payment Method\")), React.createElement(RadioGroup, {\n    \"aria-label\": \"position\",\n    name: \"position\",\n    value: paymentType,\n    onChange: ({\n      \"target\": value\n    }) => {\n      setPaymentType(value);\n    },\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    value: \"Credit Card\",\n    control: React.createElement(Radio, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }),\n    label: \"Credit Card\",\n    labelPlacement: \"end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    value: \"Check\",\n    control: React.createElement(Radio, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }),\n    label: \"Check\",\n    labelPlacement: \"end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    value: \"Cash\",\n    control: React.createElement(Radio, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }),\n    label: \"Cash\",\n    labelPlacement: \"end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }))), React.createElement(FormControl, {\n    variant: \"outlined\",\n    style: {\n      \"paddingTop\": \"2vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    row: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, React.createElement(OutlinedInput, {\n    placeholder: \"Enter Discount Code\",\n    id: \"component-outlined\",\n    onChange: ({\n      \"target\": {\n        value\n      }\n    }) => {\n      setEnteredDiscountCode(value);\n    },\n    value: enteredDiscountCode,\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }), React.createElement(Button, {\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, \"Apply\")))), React.createElement(Grid, {\n    item: true,\n    xs: 5,\n    align: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, \"Total\")), React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, \"$\", getTotalCost()))));\n};\n\nParentPayment.propTypes = {\n  \"computedMatch\": PropTypes.shape({\n    \"params\": PropTypes.shape({\n      \"parentID\": PropTypes.string.isRequired\n    }).isRequired\n  }).isRequired\n};\n\nconst mapStateToProps = state => ({\n  \"payments\": state.Payments,\n  \"courses\": state.Course.NewCourseList,\n  \"parents\": state.Users.ParentList,\n  \"students\": state.Users.StudentList,\n  \"enrollments\": state.Enrollments\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ParentPayment);","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/src/components/Form/ParentPayment.js"],"names":["connect","PropTypes","React","useState","BackButton","Grid","Table","TableBody","TableCell","TableHead","TableRow","Checkbox","TextField","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","InputLabel","OutlinedInput","Button","msPerWeek","renderDate","date","split","year","month","day","calcSessionCost","start_date","end_date","days","tuition","startDate","Date","endDate","numWeeks","numSessions","length","ParentPayment","props","parent","parents","computedMatch","params","parentID","sessionsMax","initialSelectedRows","student_ids","forEach","studentID","Object","entries","enrollments","courseID","session_payment_status","unpaidCount","values","reduce","total","paymentStatus","sessionFields","setSessionFields","selectedRows","setSelectedRows","paymentType","setPaymentType","enteredDiscountCode","setEnteredDiscountCode","getPaymentInfo","student","unpaidCourses","keys","user_id","filter","some","map","courses","course","course_id","getTotalCost","studentCourses","sessionCount","renderStudentPayments","rows","name","validSessions","title","schedule","value","Math","round","students","propTypes","shape","string","isRequired","mapStateToProps","state","Payments","Course","NewCourseList","Users","ParentList","StudentList","Enrollments","mapDispatchToProps"],"mappings":"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","sourcesContent":["import {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport React, {useState} from \"react\";\n\nimport BackButton from \"../BackButton\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport {Button} from \"@material-ui/core\";\n\nconst msPerWeek = 1000 * 60 * 60 * 24 * 7;\n\nconst renderDate = (date) => {\n    const [year, month, day] = date.split(\"-\");\n    return `${month}/${day}/${year}`;\n};\n\nconst calcSessionCost = ({\n    \"schedule\": {start_date, end_date, days},\n    tuition,\n}) => {\n    const startDate = new Date(start_date);\n    const endDate = new Date(end_date);\n    const numWeeks = (endDate - startDate) / msPerWeek;\n    const numSessions = numWeeks * days.length;\n    return tuition / numSessions;\n};\n\nconst ParentPayment = (props) => {\n    const parent = props.parents[props.computedMatch.params.parentID];\n\n    const sessionsMax = {};\n    const initialSelectedRows = {};\n    parent.student_ids.forEach((studentID) => {\n        sessionsMax[studentID] = {};\n        initialSelectedRows[studentID] = {};\n        Object.entries(props.enrollments[studentID])\n            .forEach(([courseID, {session_payment_status}]) => {\n                const unpaidCount = Object.values(session_payment_status)\n                    .reduce((total, paymentStatus) => total + (paymentStatus === 0), 0);\n                if (unpaidCount !== 0) {\n                    sessionsMax[studentID][courseID] = unpaidCount;\n                    initialSelectedRows[studentID][courseID] = false;\n                }\n            });\n    });\n\n    const [sessionFields, setSessionFields] = useState(sessionsMax);\n    const [selectedRows, setSelectedRows] = useState(initialSelectedRows);\n    const [paymentType, setPaymentType] = useState();\n    const [enteredDiscountCode, setEnteredDiscountCode] = useState();\n\n    const getPaymentInfo = (student) => {\n        const unpaidCourses = Object.keys(props.enrollments[student.user_id])\n            .filter((courseID) =>\n                // only use courses that need to be paid\n                Object.values(\n                    props.enrollments[student.user_id][courseID].session_payment_status\n                ).some((paymentStatus) => paymentStatus === 0))\n            .map((courseID) => props.courses[courseID]);\n\n        return unpaidCourses.map((course) => {\n            const numSessions = sessionFields[student.user_id][course.course_id];\n            return {\n                course,\n                \"sessions\": numSessions,\n                \"tuition\": numSessions * calcSessionCost(course),\n            };\n        });\n    };\n\n    const getTotalCost = () => {\n        let total = 0;\n\n        Object.entries(sessionFields).forEach(([studentID, studentCourses]) => {\n            Object.entries(studentCourses).forEach(([courseID, sessionCount]) => {\n                if (selectedRows[studentID][courseID] &&\n                    sessionCount > 0 &&\n                    sessionCount <= sessionsMax[studentID][courseID]) {\n                    total += sessionCount * calcSessionCost(props.courses[courseID]);\n                }\n            });\n        });\n\n        return total;\n    };\n\n    const renderStudentPayments = (student) => {\n        const rows = getPaymentInfo(student);\n        return (\n            <div key={student.user_id}>\n                <h3 align=\"left\">{student.name}</h3>\n                <Table padding=\"default\">\n                    <colgroup>\n                        <col width=\"0%\" />\n                        <col width=\"100%\" />\n                        <col width=\"0%\" />\n                        <col width=\"0%\" />\n                        <col width=\"0%\" />\n                        <col width=\"0%\" />\n                    </colgroup>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell />\n                            <TableCell align=\"left\">\n                                Session\n                            </TableCell>\n                            <TableCell align=\"left\">\n                                Dates\n                            </TableCell>\n                            <TableCell align=\"left\">\n                                Sessions\n                            </TableCell>\n                            <TableCell align=\"left\">\n                                Tuition\n                            </TableCell>\n                            <TableCell align=\"left\">\n                                Material Fee\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map(({course, tuition}) => {\n                            const validSessions = sessionFields[student.user_id][course.course_id] > 0 &&\n                                sessionFields[student.user_id][course.course_id] <= sessionsMax[student.user_id][course.course_id];\n                            return (\n                                <TableRow\n                                    hover\n                                    tabIndex={-1}\n                                    key={course.course_id}>\n                                    <TableCell padding=\"checkbox\">\n                                        <Checkbox\n                                            checked={selectedRows[student.user_id][course.course_id]}\n                                            onClick={() => {\n                                                setSelectedRows({\n                                                    ...selectedRows,\n                                                    [student.user_id]: {\n                                                        ...selectedRows[student.user_id],\n                                                        [course.course_id]: !selectedRows[student.user_id][course.course_id],\n                                                    },\n                                                });\n                                            }}\n                                        />\n                                    </TableCell>\n                                    <TableCell align=\"left\">\n                                        <span style={{\n                                            \"width\": \"50%\",\n                                        }}>{course.title}</span>\n                                    </TableCell>\n                                    <TableCell align=\"left\">\n                                        {renderDate(course.schedule.start_date)}&nbsp;-&nbsp;{renderDate(course.schedule.end_date)}\n                                    </TableCell>\n                                    <TableCell align=\"left\">\n                                        <TextField\n                                            id=\"standard-name\"\n                                            type=\"number\"\n                                            error={!validSessions}\n                                            value={sessionFields[student.user_id][course.course_id]}\n                                            onChange={({\"target\": {value}}) => {\n                                                setSessionFields({\n                                                    ...sessionFields,\n                                                    [student.user_id]: {\n                                                        ...sessionFields[student.user_id],\n                                                        [course.course_id]: value,\n                                                    },\n                                                });\n                                            }}\n                                        />\n                                    </TableCell>\n                                    <TableCell align=\"left\">\n                                        {validSessions && `$${Math.round(tuition)}`}\n                                    </TableCell>\n                                    <TableCell>\n                                        $50\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    };\n\n    return (\n        <Grid container className=\"\">\n            <Grid item xs={11} style={{\"padding\": \"20px\"}}>\n                <BackButton />\n                <h1 align=\"left\">Pay for Course(s)</h1>\n                {\n                    parent.student_ids.map((studentID) =>\n                        renderStudentPayments(props.students[studentID]))\n                }\n                <Grid container style={{\n                    \"paddingTop\": \"5vh\",\n                }}>\n                    <Grid item xs={6} align=\"left\">\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\"><b>Payment Method</b></FormLabel>\n                            <RadioGroup\n                                aria-label=\"position\"\n                                name=\"position\"\n                                value={paymentType}\n                                onChange={({\"target\": value}) => {\n                                    setPaymentType(value);\n                                }} row>\n                                <FormControlLabel\n                                    value=\"Credit Card\"\n                                    control={<Radio color=\"primary\" />}\n                                    label=\"Credit Card\"\n                                    labelPlacement=\"end\"\n                                />\n                                <FormControlLabel\n                                    value=\"Check\"\n                                    control={<Radio color=\"primary\" />}\n                                    label=\"Check\"\n                                    labelPlacement=\"end\"\n                                />\n                                <FormControlLabel\n                                    value=\"Cash\"\n                                    control={<Radio color=\"primary\" />}\n                                    label=\"Cash\"\n                                    labelPlacement=\"end\"\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                        <FormControl variant=\"outlined\" style={{\n                            \"paddingTop\": \"2vh\",\n                        }}>\n                            <div row>\n                                <OutlinedInput\n                                    placeholder=\"Enter Discount Code\"\n                                    id=\"component-outlined\"\n                                    onChange={({\"target\": {value}}) => {\n                                        setEnteredDiscountCode(value);\n                                    }}\n                                    value={enteredDiscountCode}\n                                    disabled\n                                />\n                                <Button disabled>Apply</Button>\n                            </div>\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={5} align=\"right\">\n                        <b>Total</b>\n                    </Grid>\n                    <Grid item xs={1}>\n                        ${getTotalCost()}\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nParentPayment.propTypes = {\n    \"computedMatch\": PropTypes.shape({\n        \"params\": PropTypes.shape({\n            \"parentID\": PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n    \"payments\": state.Payments,\n    \"courses\": state.Course.NewCourseList,\n    \"parents\": state.Users.ParentList,\n    \"students\": state.Users.StudentList,\n    \"enrollments\": state.Enrollments,\n});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ParentPayment);\n"]},"metadata":{},"sourceType":"module"}