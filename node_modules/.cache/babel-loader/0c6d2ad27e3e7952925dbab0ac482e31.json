{"ast":null,"code":"import _objectSpread from \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/components/Form/Form.js\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as registrationActions from \"../../actions/registrationActions\";\nimport React, { Component } from \"react\";\nimport { Prompt } from \"react-router\";\nimport { NavLink } from \"react-router-dom\"; // Material UI Imports\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Typography } from \"@material-ui/core\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { InputValidation } from \"../FeatureViews/Registration/Validations\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Clear\"; // Outside React Component\n\nimport SearchSelect from \"react-select\";\nimport BackButton from \"../BackButton.js\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nconst parseGender = {\n  \"M\": \"Male\",\n  \"F\": \"Female\",\n  \"U\": \"Do not disclose\"\n};\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onBack = () => {\n      // clear session storage\n      sessionStorage.removeItem(\"form\");\n      this.props.registrationActions.resetSubmitStatus();\n    };\n\n    this.state = {\n      conditional: \"\",\n      nextSection: false,\n      activeStep: 0,\n      activeSection: \"\",\n      form: \"\",\n      submitPending: false,\n      preLoaded: false,\n      existingUser: false\n    };\n  }\n\n  componentWillMount() {\n    let prevState = JSON.parse(sessionStorage.getItem(\"form\") || null);\n    const formType = this.props.match.params.type;\n    const id = this.props.match.params.id;\n\n    if (this.props.match.params.edit === \"edit\") {\n      switch (formType) {\n        case \"student\":\n          {\n            const student = this.props.students[id];\n\n            if (student) {\n              const parent = this.props.parents[student.parent_id];\n              prevState = _objectSpread({}, this.state, {\n                \"Basic Information\": {\n                  \"Student First Name\": student.first_name,\n                  \"Student Last Name\": student.last_name,\n                  \"Gender\": parseGender[student.gender],\n                  \"Grade\": student.grade,\n                  \"Age\": student.age,\n                  \"School\": student.school,\n                  \"Student Email\": student.email,\n                  \"Student Phone Number\": student.phone_number\n                },\n                \"Parent Information\": {\n                  \"Select Parent\": {\n                    value: parent.user_id,\n                    label: \"\".concat(parent.user_id, \": \").concat(parent.name, \" - \").concat(parent.email)\n                  },\n                  \"Parent First Name\": parent.first_name,\n                  \"Parent Last Name\": parent.last_name,\n                  \"Gender\": parseGender[parent.gender],\n                  \"Parent Email\": parent.email,\n                  \"Address\": parent.address,\n                  \"City\": parent.city,\n                  \"State\": parent.state,\n                  \"Zip Code\": parent.zipcode,\n                  \"Relationship to Student\": parent.relationship,\n                  \"Phone Number\": parent.phone_number\n                },\n                \"Basic Information_validated\": {\n                  \"Student First Name\": true,\n                  \"Student Last Name\": true,\n                  \"Gender\": true,\n                  \"Grade\": true,\n                  \"Age\": true,\n                  \"School\": true,\n                  \"Student Email\": true,\n                  \"Student Phone Number\": true\n                },\n                \"Parent Information_validated\": {\n                  \"Parent First Name\": true,\n                  \"Parent Last Name\": true,\n                  \"Gender\": true,\n                  \"Parent Email\": true,\n                  \"Address\": true,\n                  \"City\": true,\n                  \"State\": true,\n                  \"Zip Code\": true,\n                  \"Relationship to Student\": true,\n                  \"Phone Number\": true\n                },\n                \"form\": formType,\n                \"activeSection\": \"Basic Information\",\n                \"nextSection\": true,\n                \"preLoaded\": true\n              });\n            }\n\n            break;\n          }\n\n        case \"instructor\":\n          {\n            const instructor = this.props.instructors[id];\n\n            if (instructor) {\n              prevState = _objectSpread({}, this.state, {\n                \"Basic Information\": {\n                  \"First Name\": instructor.first_name,\n                  \"Last Name\": instructor.last_name,\n                  \"E-Mail\": instructor.email,\n                  \"Phone Number\": instructor.phone_number,\n                  \"Gender\": parseGender[instructor.gender],\n                  \"Address\": instructor.address,\n                  \"City\": instructor.city,\n                  \"Zip Code\": instructor.zipcode,\n                  \"State\": instructor.state,\n                  \"Date of Birth\": instructor.birth_date\n                },\n                \"Education\": {\n                  \"College\": \"\",\n                  \"Degree(s)\": \"\",\n                  \"Minor(s)\": \"\"\n                },\n                \"Experience\": {\n                  \"Subject(s) Tutor Can Teach\": \"\",\n                  \"Specialties\": \"\",\n                  \"Background\": \"\",\n                  \"Notes\": \"\"\n                },\n                \"Basic Information_validated\": {\n                  \"First Name\": true,\n                  \"Last Name\": true,\n                  \"E-Mail\": true,\n                  \"Phone Number\": true,\n                  \"Gender\": true,\n                  \"Address\": true,\n                  \"City\": true,\n                  \"Zip Code\": true,\n                  \"State\": true,\n                  \"Date of Birth\": true\n                },\n                \"Education_validated\": {\n                  \"College\": true,\n                  \"Degree(s)\": true,\n                  \"Minor(s)\": true\n                },\n                \"Experience_validated\": {\n                  \"Subject(s) Tutor Can Teach\": true,\n                  \"Specialties\": true,\n                  \"Background\": true,\n                  \"Notes\": true\n                },\n                \"form\": formType,\n                \"activeSection\": \"Basic Information\",\n                \"nextSection\": true,\n                \"preLoaded\": true\n              });\n            }\n\n            break;\n          }\n\n        default:\n          console.warn(\"Invalid form type!\");\n      }\n    }\n\n    if (!prevState || formType !== prevState.form || prevState[\"submitPending\"] || id && this.props.match.params.edit !== \"edit\") {\n      if (this.props.registrationForm[formType]) {\n        this.setState(oldState => {\n          const formContents = JSON.parse(JSON.stringify(this.props.registrationForm[formType]));\n\n          let NewState = _objectSpread({}, oldState, {\n            \"activeSection\": formContents.section_titles[0],\n            \"form\": formType\n          });\n\n          let course = null;\n\n          if (this.props.courses.hasOwnProperty(id)) {\n            const _this$props$courses$t = this.props.courses[this.props.match.params.id],\n                  course_id = _this$props$courses$t.course_id,\n                  title = _this$props$courses$t.title; // convert it to a format that onselectChange can use\n\n            course = {\n              \"value\": course_id,\n              \"label\": title\n            };\n          }\n\n          formContents.section_titles.forEach(title => {\n            // create blank fields based on form type\n            NewState[title] = {};\n            NewState[\"\".concat(title, \"_validated\")] = {}; // set a value for every non-conditional field (object)\n\n            if (Array.isArray(formContents[title])) {\n              formContents[title].forEach(({\n                name,\n                type\n              }) => {\n                NewState[\"\".concat(title, \"_validated\")][name] = true;\n\n                switch (type) {\n                  case \"course\":\n                    NewState[title][name] = course;\n                    break;\n\n                  default:\n                    NewState[title][name] = null;\n                }\n              });\n            }\n          });\n\n          if (formType === \"tutoring\" && id && this.props.courses.hasOwnProperty(id)) {\n            NewState[\"Tutor Selection\"][\"Course / Subject\"] = this.props.courses[id].title;\n          }\n\n          return NewState;\n        }, () => {\n          this.setState({\n            \"nextSection\": this.validateSection()\n          });\n        });\n      }\n    } else if (prevState && !prevState[\"submitPending\"]) {\n      if (formType === \"tutoring\" && this.props.courses.hasOwnProperty(id)) {\n        prevState[\"Tutor Selection\"][\"Course / Subject\"] = this.props.courses[id].title;\n      }\n\n      this.setState(prevState);\n    }\n  }\n\n  getFormObject() {\n    return this.props.registrationForm[this.state.form];\n  }\n\n  getActiveSection() {\n    const section = this.getFormObject()[this.state.activeSection];\n\n    if (Array.isArray(section)) {\n      return section;\n    } else {\n      return section[this.state.conditional];\n    }\n  }\n\n  getStepContent(step, formType) {\n    return this.props.registrationForm[formType][step];\n  }\n\n  validateSection() {\n    const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n    return this.getActiveSection().filter(({\n      required\n    }) => required).every(({\n      name\n    }) => this.state[currSectionTitle][name]) && Object.values(this.state[\"\".concat(currSectionTitle, \"_validated\")]).every(valid => valid);\n  }\n\n  getConditionalFieldFromCurrentSection() {\n    let nextSectionInput = false;\n    const currSectionTitle = this.state.activeSection; // Get input from the conditional field\n\n    if (Array.isArray(this.getFormObject()[currSectionTitle])) {\n      this.getFormObject()[currSectionTitle].some(field => {\n        if (field.conditional) {\n          nextSectionInput = this.state[currSectionTitle][field.name];\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n\n    return nextSectionInput;\n  } // Progresses to next section in registration form\n\n\n  handleNext() {\n    const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n    let section = this.props.registrationForm[this.state.form][this.state.activeSection];\n\n    if (!Array.isArray(section)) {\n      section = section[this.state.conditional];\n    }\n\n    section.forEach(field => {\n      this.validateField(currSectionTitle, field, this.state[currSectionTitle][field.name]);\n    });\n    this.setState(oldState => {\n      if (this.validateSection()) {\n        if (oldState.activeStep === this.getFormObject().section_titles.length - 1) {\n          if (!oldState.submitPending) {\n            if (this.props.match.params.edit === \"edit\") {\n              this.props.registrationActions.submitForm(this.state, this.props.match.params.id);\n            } else {\n              this.props.registrationActions.submitForm(this.state);\n            }\n          }\n\n          return {\n            submitPending: true\n          };\n        } else {\n          const conditionalField = this.getConditionalFieldFromCurrentSection(),\n                nextActiveStep = oldState.activeStep + 1,\n                nextActiveSection = this.getFormObject().section_titles[nextActiveStep];\n          let newState = {\n            activeStep: nextActiveStep,\n            activeSection: nextActiveSection,\n            conditional: conditionalField ? conditionalField : oldState.conditional,\n            nextSection: false\n          };\n\n          if (conditionalField) {\n            let formContents = this.getFormObject(),\n                title = nextActiveSection; // create blank fields based on form type\n\n            newState[title] = {};\n            formContents[nextActiveSection][conditionalField].forEach(field => {\n              newState[title][field.name] = \"\";\n            }); // create validated state for each field\n\n            newState[\"\".concat(title, \"_validated\")] = {};\n            formContents[nextActiveSection][conditionalField].forEach(field => {\n              newState[\"\".concat(title, \"_validated\")][field.name] = true;\n            });\n          }\n\n          return newState;\n        }\n      } else {\n        return {};\n      }\n    }, () => {\n      this.setState({\n        nextSection: this.validateSection()\n      });\n    });\n  } // Regresses to previous section in registration form\n\n\n  handleBack() {\n    this.setState(oldState => {\n      if (oldState.activeStep !== 0 && oldState.activeSection) {\n        return {\n          activeStep: oldState.activeStep - 1,\n          activeSection: this.getFormObject().section_titles[oldState.activeStep - 1]\n        };\n      } else {\n        return {};\n      }\n    }, () => {\n      this.setState({\n        nextSection: this.validateSection()\n      });\n    });\n  }\n\n  handleReset() {\n    this.setState({\n      activeStep: 0\n    });\n  }\n\n  handleFieldUpdate(sectionTitle, field, fieldValue) {\n    this.setState(oldState => {\n      oldState[sectionTitle][field.name] = fieldValue;\n      return oldState;\n    });\n  }\n\n  validateField(sectionTitle, field, fieldValue) {\n    this.setState(oldState => {\n      if (!fieldValue) {\n        // if empty field\n        oldState[\"\".concat(sectionTitle, \"_validated\")][field.name] = !field.required;\n      } else if (InputValidation(fieldValue, field.type)) {\n        // if valid input\n        let isValid = true;\n\n        if (field.type === \"number\") {\n          // parse if number\n          oldState[sectionTitle][field.name] = parseInt(fieldValue, 10);\n        } else if (field.type === \"email\") {\n          let emails = [];\n\n          if (field.field === \"Student Email\") {\n            emails = Object.values(this.props.students).map(({\n              email\n            }) => email);\n          } // validate that email doesn't exist in database already\n\n\n          isValid = !emails.includes(fieldValue) || this.state.preLoaded;\n\n          if (!isValid) {\n            oldState.existingUser = true;\n          }\n        }\n\n        oldState[\"\".concat(sectionTitle, \"_validated\")][field.name] = isValid;\n      } else {\n        oldState[\"\".concat(sectionTitle, \"_validated\")][field.name] = false;\n      }\n\n      return oldState;\n    }, () => {\n      this.setState({\n        nextSection: this.validateSection()\n      }, () => {\n        sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n      });\n    });\n  }\n\n  onSelectChange(value, label, field) {\n    if (field.type === \"select parent\") {\n      if (value) {\n        this.setState(OldState => {\n          let NewState = OldState;\n          const selectedParentID = value.value;\n          const parent = this.props.parents[selectedParentID];\n          NewState[label] = {\n            \"Select Parent\": {\n              value: selectedParentID,\n              label: \"\".concat(selectedParentID, \": \").concat(parent.name, \" - \").concat(parent.email)\n            },\n            \"Parent First Name\": parent.first_name,\n            \"Parent Last Name\": parent.last_name,\n            \"Gender\": parent.gender,\n            \"Parent Email\": parent.email,\n            \"Address\": parent.address,\n            \"City\": parent.city,\n            \"State\": parent.state,\n            \"Zip Code\": parent.zipcode,\n            \"Relationship to Student\": parent.relationship,\n            \"Parent Phone Number\": parent.phone_number,\n            \"user_id\": selectedParentID\n          };\n          Object.keys(NewState[label]).forEach(key => {\n            NewState[\"\".concat(label, \"_validated\")][key] = true;\n          });\n          return NewState;\n        }, () => {\n          this.validateSection();\n          this.setState({\n            nextSection: true\n          });\n        });\n      } else {\n        this.setState(OldState => {\n          let NewState = OldState;\n          NewState[label] = {\n            \"Select Parent\": null,\n            \"Parent First Name\": \"\",\n            \"Parent Last Name\": \"\",\n            \"Gender\": \"\",\n            \"Parent Email\": \"\",\n            \"Address\": \"\",\n            \"City\": \"\",\n            \"State\": \"\",\n            \"Zip Code\": \"\",\n            \"Relationship to Student\": \"\",\n            \"Parent Phone Number\": \"\",\n            \"user_id\": \"\"\n          };\n          Object.keys(NewState[label]).forEach(key => {\n            NewState[\"\".concat(label, \"_validated\")][key] = true;\n          });\n          NewState.nextSection = false;\n          return NewState;\n        });\n      }\n    } else {\n      this.setState(OldState => {\n        let NewState = OldState;\n        NewState[label][field.name] = value;\n        return NewState;\n      }, () => {\n        this.validateField(this.state.activeSection, field, value);\n      });\n    }\n  } // removes duplicates with arr1 from arr2 from search select field\n\n\n  removeDuplicates(arr1, arr2) {\n    let stringValue, stringOtherValue;\n    arr1.forEach(value => {\n      if (value) {\n        stringValue = value.value;\n      } else {\n        stringValue = \"\";\n      }\n\n      arr2.forEach((otherValue, j) => {\n        if (otherValue) {\n          stringOtherValue = otherValue.value;\n        } else {\n          stringOtherValue = \"\";\n        }\n\n        if (stringValue === stringOtherValue) {\n          arr2[j] = \"1\";\n        }\n      });\n    });\n    let uniqueVals = [...new Set(arr2)],\n        indexOfString = -1;\n    uniqueVals.forEach((value, i) => {\n      if (typeof value === \"string\") {\n        indexOfString = i;\n      }\n    });\n\n    if (indexOfString > -1) {\n      uniqueVals.splice(indexOfString, 1);\n    }\n\n    return uniqueVals;\n  }\n\n  renderField(field, label, fieldIndex) {\n    let fieldTitle = field.name;\n\n    switch (field.type) {\n      case \"select\":\n        return React.createElement(FormControl, {\n          className: \"form-control\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 530\n          },\n          __self: this\n        }, React.createElement(InputLabel, {\n          htmlFor: fieldTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 531\n          },\n          __self: this\n        }, fieldTitle), React.createElement(Select, {\n          displayEmpty: false,\n          value: this.state[label][fieldTitle],\n          onChange: ({\n            target\n          }) => {\n            this.onSelectChange(target.value, label, field);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 532\n          },\n          __self: this\n        }, field.options.map(option => {\n          return React.createElement(MenuItem, {\n            value: option,\n            key: option,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 540\n            },\n            __self: this\n          }, React.createElement(\"em\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 541\n            },\n            __self: this\n          }, option));\n        })));\n\n      case \"course\":\n        {\n          let courseList = Object.keys(this.props.courses).filter(courseID => this.props.courses[courseID].capacity > this.props.courses[courseID].roster.length).map(courseID => ({\n            \"value\": courseID,\n            \"label\": this.props.courses[courseID].title\n          })); // remove preselected courses\n\n          courseList = this.removeDuplicates(Object.values(this.state[label]), courseList); // count # of course fields in current section\n\n          const fieldCount = this.getActiveSection().reduce((total, {\n            type\n          }) => total + (type === \"course\"), 0);\n          return React.createElement(\"div\", {\n            style: {\n              width: \"inherit\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 564\n            },\n            __self: this\n          }, React.createElement(Grid, {\n            container: true,\n            className: \"student-align\",\n            spacing: 2000,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 565\n            },\n            __self: this\n          }, React.createElement(SearchSelect, {\n            value: this.state[label][fieldTitle],\n            onChange: value => {\n              this.onSelectChange(value, label, field);\n            },\n            options: courseList,\n            className: \"search-options\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 566\n            },\n            __self: this\n          }), fieldCount > 1 && React.createElement(RemoveIcon, {\n            color: \"primary\",\n            \"aria-label\": \"Add\",\n            variant: \"extended\",\n            className: \"button-remove-student\",\n            onClick: event => {\n              event.preventDefault(); // deletes answer field from state\n\n              this.removeField(fieldIndex);\n              this.forceUpdate();\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 575\n            },\n            __self: this\n          })));\n        }\n\n      case \"student\":\n        {\n          let studentList = Object.values(this.props.students).map(({\n            user_id,\n            name,\n            email\n          }) => ({\n            value: user_id,\n            label: \"\".concat(name, \" - \").concat(email)\n          }));\n          studentList = this.removeDuplicates(Object.values(this.state[label]), studentList); // count # of course fields in current section\n\n          const studentCount = this.getActiveSection().reduce((total, {\n            type\n          }) => total + (type === \"student\"), 0);\n          return React.createElement(\"div\", {\n            style: {\n              width: \"inherit\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 603\n            },\n            __self: this\n          }, React.createElement(Grid, {\n            container: true,\n            className: \"student-align\",\n            spacing: 2000,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 604\n            },\n            __self: this\n          }, React.createElement(SearchSelect, {\n            value: this.state[label][fieldTitle] ? this.state[label][fieldTitle] : \"\",\n            onChange: value => {\n              this.onSelectChange(value, label, field);\n            },\n            options: studentList,\n            className: \"search-options\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 605\n            },\n            __self: this\n          }), studentCount > 1 && React.createElement(RemoveIcon, {\n            color: \"primary\",\n            \"aria-label\": \"Add\",\n            variant: \"extended\",\n            className: \"button-remove-student\",\n            onClick: event => {\n              event.preventDefault(); // deletes answer field\n\n              this.removeField(fieldIndex);\n              this.forceUpdate();\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 614\n            },\n            __self: this\n          })));\n        }\n\n      case \"instructor\":\n        {\n          let instructorList = this.props.instructors;\n          instructorList = Object.values(instructorList).map(({\n            user_id,\n            name,\n            email\n          }) => ({\n            value: user_id,\n            label: \"\".concat(name, \" - \").concat(email)\n          }));\n          instructorList = this.removeDuplicates(Object.values(this.state[label]), instructorList);\n          return React.createElement(\"div\", {\n            style: {\n              width: \"inherit\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 636\n            },\n            __self: this\n          }, React.createElement(Grid, {\n            container: true,\n            className: \"student-align\",\n            spacing: 2000,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 637\n            },\n            __self: this\n          }, React.createElement(SearchSelect, {\n            value: this.state[label][fieldTitle] ? this.state[label][fieldTitle] : \"\",\n            onChange: value => {\n              this.onSelectChange(value, label, field);\n            },\n            options: instructorList,\n            className: \"search-options\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 638\n            },\n            __self: this\n          })));\n        }\n\n      case \"select parent\":\n        {\n          const currParentList = Object.values(this.props.parents).map(({\n            user_id,\n            name,\n            email\n          }) => ({\n            value: user_id,\n            label: \"\".concat(name, \" - \").concat(email)\n          }));\n          return React.createElement(SearchSelect, {\n            className: \"search-options\",\n            isClearable: true,\n            onChange: value => {\n              this.onSelectChange(value, label, field);\n            },\n            value: this.state[label][fieldTitle],\n            options: currParentList,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 655\n            },\n            __self: this\n          });\n        }\n\n      default:\n        return React.createElement(TextField, {\n          label: field.name,\n          multiline: field.multiline,\n          margin: \"normal\",\n          value: this.state[label][field.name],\n          error: !this.state[label + \"_validated\"][field.name],\n          helperText: !this.state[label + \"_validated\"][field.name] ? field.name + \" invalid\" : \"\",\n          type: field.type === \"number\" ? \"Number\" : \"text\",\n          required: field.required,\n          fullWidth: field.full,\n          onChange: e => {\n            e.preventDefault();\n            this.handleFieldUpdate.bind(this)(label, field, e.target.value);\n          },\n          onBlur: e => {\n            e.preventDefault();\n            this.validateField.bind(this)(label, field, e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 667\n          },\n          __self: this\n        });\n    }\n  }\n\n  addField(field, fieldIndex) {\n    const currentForm = this.getFormObject();\n    let param = [this.state.form, this.state.activeSection, fieldIndex];\n\n    if (!Array.isArray(currentForm[this.state.activeSection])) {\n      param.splice(2, 0, this.state.conditional);\n    }\n\n    this.props.registrationActions.addField(param);\n    this.setState(prevState => {\n      // number of fields of the same type as the current field\n      const form = prevState.form,\n            activeSection = prevState.activeSection,\n            conditional = prevState.conditional;\n      let section = this.props.registrationForm[form][activeSection];\n\n      if (!Array.isArray(section)) {\n        section = section[conditional];\n      }\n\n      const numSameTypeFields = section.reduce((count, otherField) => count + (field === otherField.field), 0);\n\n      if (Array.isArray(prevState[activeSection])) {\n        prevState[activeSection][\"\".concat(field, \" \").concat(numSameTypeFields)] = null;\n        prevState[\"\".concat(activeSection, \"_validated\")][\"\".concat(field, \" \").concat(numSameTypeFields)] = true;\n      } else {\n        prevState[activeSection][\"\".concat(field, \" \").concat(numSameTypeFields)] = null;\n        prevState[\"\".concat(activeSection, \"_validated\")][\"\".concat(field, \" \").concat(numSameTypeFields)] = true;\n      }\n\n      return prevState;\n    }, () => {\n      sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n    }); // for some reason it isn't rerendering automatically\n  }\n\n  removeField(fieldIndex) {\n    this.setState(prevState => {\n      const currentSectionFields = prevState[prevState[\"activeSection\"]];\n      const currentSectionValidationFields = prevState[\"\".concat(prevState[\"activeSection\"], \"_validated\")];\n      let baseName;\n      let newSectionFields = {};\n      let newSectionValidationFields = {};\n      let index = 0;\n      let hasNotRemoved = true;\n      Object.entries(currentSectionFields).forEach(([origFieldKey, fieldValue]) => {\n        if (index === 0 && hasNotRemoved) {\n          baseName = origFieldKey;\n        }\n\n        if (index === fieldIndex && hasNotRemoved) {\n          hasNotRemoved = false;\n          return;\n        }\n\n        let newFieldName = index === 0 ? baseName : \"\".concat(baseName, \" \").concat(index + 1);\n        newSectionFields[newFieldName] = fieldValue;\n        newSectionValidationFields[newFieldName] = currentSectionValidationFields[origFieldKey];\n        index++;\n      });\n      prevState[prevState[\"activeSection\"]] = newSectionFields;\n      prevState[\"\".concat(prevState[\"activeSection\"], \"_validated\")] = newSectionValidationFields; //save to session Storage\n\n      sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n      return prevState;\n    }, () => {\n      //delete field from redux store\n      let param = [this.state.form, this.state.activeSection];\n      this.props.registrationActions.removeField(param, fieldIndex, this.state.conditional);\n      this.forceUpdate();\n    });\n    this.forceUpdate();\n  }\n\n  renderForm() {\n    let _this$state = this.state,\n        activeStep = _this$state.activeStep,\n        nextSection = _this$state.nextSection,\n        currentForm = this.props.registrationForm[this.state.form],\n        steps = currentForm.section_titles;\n    let section = this.getActiveSection();\n    return React.createElement(Stepper, {\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      className: \"form-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763\n      },\n      __self: this\n    }, steps.map(label => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769\n      },\n      __self: this\n    }, React.createElement(StepLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770\n      },\n      __self: this\n    }, label), React.createElement(StepContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, section.map((field, j) => {\n      // number of fields of the same type as the current field\n      const numSameTypeFields = section.reduce((count, otherField) => field.field === otherField.field ? count + 1 : count, 0),\n            reversedSection = [...section].reverse(),\n            lastFieldOfType = reversedSection.find(otherField => otherField.field === field.field);\n      return React.createElement(\"div\", {\n        key: j,\n        className: \"fields-wrapper\",\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 799\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        className: \"student-align\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800\n        },\n        __self: this\n      }, label === this.state.activeSection ? this.renderField(field, label, j) : \"\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803\n        },\n        __self: this\n      }), !this.props.match.params.course && numSameTypeFields < field.field_limit && field === lastFieldOfType && React.createElement(Fab, {\n        color: \"primary\",\n        \"aria-label\": \"Add\",\n        variant: \"extended\",\n        className: \"button add-student\",\n        onClick: event => {\n          event.preventDefault();\n          this.addField(field.field, j);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 807\n        },\n        __self: this\n      }, React.createElement(AddIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813\n        },\n        __self: this\n      }), \"Add \", field.field));\n    }), React.createElement(\"div\", {\n      className: \"controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: activeStep === 0,\n      color: \"secondary\",\n      onClick: event => {\n        event.preventDefault();\n        this.handleBack();\n      },\n      className: \"button \".concat(activeStep === 0 ? \"hide\" : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: !nextSection,\n      onClick: event => {\n        event.preventDefault();\n        this.handleNext();\n      },\n      className: \"button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833\n      },\n      __self: this\n    }, activeStep === steps.length - 1 ? this.props.submitPending ? \"Submitting\" : \"Submit\" : \"Next\"))))));\n  } // view after a submitted form\n\n\n  renderSubmitted() {\n    const currentForm = this.props.registrationForm[this.state.form];\n    const steps = currentForm.section_titles;\n    sessionStorage.removeItem(\"form\");\n    return React.createElement(\"div\", {\n      style: {\n        margin: \"2%\",\n        padding: \"5px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 859\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      align: \"left\",\n      style: {\n        fontSize: \"24px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863\n      },\n      __self: this\n    }, \"You have successfully registered!\"), React.createElement(Typography, {\n      align: \"left\",\n      style: {\n        fontSize: \"14px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866\n      },\n      __self: this\n    }, \"An email will be sent to you to confirm your registration\"), React.createElement(Button, {\n      align: \"left\",\n      component: NavLink,\n      to: \"/registration\",\n      onClick: () => {\n        this.props.registrationActions.resetSubmitStatus();\n      },\n      style: {\n        margin: \"20px\"\n      },\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869\n      },\n      __self: this\n    }, \"Back to Registration\"), React.createElement(\"div\", {\n      className: \"confirmation-copy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"title\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879\n      },\n      __self: this\n    }, \"Confirmation Copy\"), steps.map(sectionTitle => React.createElement(\"div\", {\n      key: sectionTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"section-title\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883\n      },\n      __self: this\n    }, sectionTitle), this.getActiveSection().map(({\n      field,\n      type\n    }) => {\n      let fieldVal = this.state[sectionTitle][field];\n\n      if (fieldVal && fieldVal.hasOwnProperty(\"value\")) {\n        fieldVal = fieldVal.value;\n\n        if (type === \"select parent\" && typeof fieldVal === \"number\") {\n          fieldVal = this.props.parents[fieldVal].first_name;\n        }\n      }\n\n      return React.createElement(\"div\", {\n        key: field,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 899\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: \"field-title\",\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 900\n        },\n        __self: this\n      }, field || \"\"), React.createElement(Typography, {\n        className: \"field-value\",\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903\n        },\n        __self: this\n      }, fieldVal || \"N/A\"));\n    })))));\n  }\n\n  renderTitle(id, type) {\n    switch (type) {\n      case \"course\":\n        return id ? this.props.courses[id].title : \"\";\n\n      case \"student\":\n        {\n          const student = this.props.students[id];\n          return student ? student.name : \"\";\n        }\n\n      default:\n        return \"\";\n    }\n  }\n\n  render() {\n    return React.createElement(Grid, {\n      container: true,\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    }, this.state.submitPending ? \"\" : React.createElement(Prompt, {\n      message: \"Are you sure you want to leave?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 936\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: \"registration-form paper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937\n      },\n      __self: this\n    }, React.createElement(BackButton, {\n      warn: true,\n      onBack: this.onBack,\n      alertMessage: \"Do you want to save your changes?\",\n      alertConfirmText: \"Yes, save changes\",\n      confirmAction: \"saveForm\",\n      alertDenyText: \"No, don't save changes\",\n      denyAction: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: \"heading\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947\n      },\n      __self: this\n    }, this.renderTitle(this.props.match.params.id, this.state.form), \" \", this.props.match.params.type, \" Registration\"), this.props.submitStatus !== \"success\" ? this.props.registrationForm[this.state.form] ? this.renderForm.bind(this)() : React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 954\n      },\n      __self: this\n    }, \"Sorry! The form is unavailable.\") : this.renderSubmitted(), React.createElement(Modal, {\n      \"aria-labelledby\": \"simple-modal-title\",\n      \"aria-describedby\": \"simple-modal-description\",\n      open: this.state.existingUser,\n      onClick: e => {\n        e.preventDefault();\n        this.setState({\n          existingUser: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 959\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"existing-user-popup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      id: \"modal-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968\n      },\n      __self: this\n    }, \"The user you are entering already exists in the database! Please enter a new email, and check for spelling.\"), React.createElement(Button, {\n      onClick: e => {\n        e.preventDefault();\n        this.setState({\n          existingUser: false\n        });\n      },\n      color: \"primary\",\n      className: \"button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971\n      },\n      __self: this\n    }, \"I will enter a new email\"))), React.createElement(Dialog, {\n      open: this.props.submitStatus === \"fail\",\n      onClose: () => {\n        this.props.registrationActions.resetSubmitStatus();\n        this.setState({\n          \"submitPending\": false\n        }, () => {\n          sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n        });\n      },\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"alert-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995\n      },\n      __self: this\n    }, \"Failed to Submit\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      id: \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997\n      },\n      __self: this\n    }, \"There was an error submitting the form. Check all fields and try again.\")), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => {\n        this.props.registrationActions.resetSubmitStatus();\n        this.setState({\n          \"submitPending\": false\n        }, () => {\n          sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n        });\n      },\n      color: \"primary\",\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002\n      },\n      __self: this\n    }, \"Go back\"))))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    courses: state.Course[\"NewCourseList\"],\n    courseCategories: state.Course[\"CourseCategories\"],\n    registrationForm: state.Registration[\"registration_form\"],\n    submitStatus: state.Registration[\"submitStatus\"],\n    parents: state.Users[\"ParentList\"],\n    students: state.Users[\"StudentList\"],\n    instructors: state.Users[\"InstructorList\"]\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    registrationActions: bindActionCreators(registrationActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/components/Form/Form.js"],"names":["connect","bindActionCreators","registrationActions","React","Component","Prompt","NavLink","Grid","Button","Paper","Typography","Stepper","Step","StepLabel","StepContent","TextField","InputValidation","Select","InputLabel","FormControl","MenuItem","Fab","AddIcon","RemoveIcon","SearchSelect","BackButton","Modal","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","parseGender","Form","constructor","props","onBack","sessionStorage","removeItem","resetSubmitStatus","state","conditional","nextSection","activeStep","activeSection","form","submitPending","preLoaded","existingUser","componentWillMount","prevState","JSON","parse","getItem","formType","match","params","type","id","edit","student","students","parent","parents","parent_id","first_name","last_name","gender","grade","age","school","email","phone_number","value","user_id","label","name","address","city","zipcode","relationship","instructor","instructors","birth_date","console","warn","registrationForm","setState","oldState","formContents","stringify","NewState","section_titles","course","courses","hasOwnProperty","course_id","title","forEach","Array","isArray","validateSection","getFormObject","getActiveSection","section","getStepContent","step","currSectionTitle","filter","required","every","Object","values","valid","getConditionalFieldFromCurrentSection","nextSectionInput","some","field","handleNext","validateField","length","submitForm","conditionalField","nextActiveStep","nextActiveSection","newState","handleBack","handleReset","handleFieldUpdate","sectionTitle","fieldValue","isValid","parseInt","emails","map","includes","setItem","onSelectChange","OldState","selectedParentID","keys","key","removeDuplicates","arr1","arr2","stringValue","stringOtherValue","otherValue","j","uniqueVals","Set","indexOfString","i","splice","renderField","fieldIndex","fieldTitle","target","options","option","courseList","courseID","capacity","roster","fieldCount","reduce","total","width","event","preventDefault","removeField","forceUpdate","studentList","studentCount","instructorList","currParentList","multiline","full","e","bind","addField","currentForm","param","numSameTypeFields","count","otherField","currentSectionFields","currentSectionValidationFields","baseName","newSectionFields","newSectionValidationFields","index","hasNotRemoved","entries","origFieldKey","newFieldName","renderForm","steps","reversedSection","reverse","lastFieldOfType","find","field_limit","renderSubmitted","margin","padding","fontSize","fieldVal","renderTitle","render","submitStatus","mapStateToProps","Course","courseCategories","Registration","Users","mapDispatchToProps","dispatch"],"mappings":";;AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,OAAO,KAAKC,mBAAZ,MAAqC,mCAArC;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,MAAR,QAAqB,cAArB;AACA,SAAQC,OAAR,QAAsB,kBAAtB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAAQC,eAAR,QAA8B,0CAA9B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AAEA,MAAMC,WAAW,GAAG;AAChB,OAAK,MADW;AAEhB,OAAK,QAFW;AAGhB,OAAK;AAHW,CAApB;;AAMA,MAAMC,IAAN,SAAmB7B,SAAnB,CAA6B;AACzB8B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA6NnBC,MA7NmB,GA6NV,MAAM;AACX;AACAC,MAAAA,cAAc,CAACC,UAAf,CAA0B,MAA1B;AACA,WAAKH,KAAL,CAAWjC,mBAAX,CAA+BqC,iBAA/B;AACH,KAjOkB;;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,WAAW,EAAE,KAFJ;AAGTC,MAAAA,UAAU,EAAE,CAHH;AAITC,MAAAA,aAAa,EAAE,EAJN;AAKTC,MAAAA,IAAI,EAAE,EALG;AAMTC,MAAAA,aAAa,EAAE,KANN;AAOTC,MAAAA,SAAS,EAAE,KAPF;AAQTC,MAAAA,YAAY,EAAE;AARL,KAAb;AAUH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,QAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWf,cAAc,CAACgB,OAAf,CAAuB,MAAvB,KAAkC,IAA7C,CAAhB;AACA,UAAMC,QAAQ,GAAG,KAAKnB,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBC,IAAzC;AAFiB,UAGVC,EAHU,GAGJ,KAAKvB,KAAL,CAAWoB,KAAX,CAAiBC,MAHb,CAGVE,EAHU;;AAIjB,QAAI,KAAKvB,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBG,IAAxB,KAAiC,MAArC,EAA6C;AACzC,cAAQL,QAAR;AACI,aAAK,SAAL;AAAgB;AACZ,kBAAMM,OAAO,GAAG,KAAKzB,KAAL,CAAW0B,QAAX,CAAoBH,EAApB,CAAhB;;AACA,gBAAIE,OAAJ,EAAa;AACT,oBAAME,MAAM,GAAG,KAAK3B,KAAL,CAAW4B,OAAX,CAAmBH,OAAO,CAACI,SAA3B,CAAf;AACAd,cAAAA,SAAS,qBACF,KAAKV,KADH;AAEL,qCAAqB;AACjB,wCAAsBoB,OAAO,CAACK,UADb;AAEjB,uCAAqBL,OAAO,CAACM,SAFZ;AAGjB,4BAAUlC,WAAW,CAAC4B,OAAO,CAACO,MAAT,CAHJ;AAIjB,2BAASP,OAAO,CAACQ,KAJA;AAKjB,yBAAOR,OAAO,CAACS,GALE;AAMjB,4BAAUT,OAAO,CAACU,MAND;AAOjB,mCAAiBV,OAAO,CAACW,KAPR;AAQjB,0CAAwBX,OAAO,CAACY;AARf,iBAFhB;AAYL,sCAAsB;AAClB,mCAAiB;AACbC,oBAAAA,KAAK,EAAEX,MAAM,CAACY,OADD;AAEbC,oBAAAA,KAAK,YAAKb,MAAM,CAACY,OAAZ,eAAwBZ,MAAM,CAACc,IAA/B,gBAAyCd,MAAM,CAACS,KAAhD;AAFQ,mBADC;AAKlB,uCAAqBT,MAAM,CAACG,UALV;AAMlB,sCAAoBH,MAAM,CAACI,SANT;AAOlB,4BAAUlC,WAAW,CAAC8B,MAAM,CAACK,MAAR,CAPH;AAQlB,kCAAgBL,MAAM,CAACS,KARL;AASlB,6BAAWT,MAAM,CAACe,OATA;AAUlB,0BAAQf,MAAM,CAACgB,IAVG;AAWlB,2BAAShB,MAAM,CAACtB,KAXE;AAYlB,8BAAYsB,MAAM,CAACiB,OAZD;AAalB,6CAA2BjB,MAAM,CAACkB,YAbhB;AAclB,kCAAgBlB,MAAM,CAACU;AAdL,iBAZjB;AA4BL,+CAA+B;AAC3B,wCAAsB,IADK;AAE3B,uCAAqB,IAFM;AAG3B,4BAAU,IAHiB;AAI3B,2BAAS,IAJkB;AAK3B,yBAAO,IALoB;AAM3B,4BAAU,IANiB;AAO3B,mCAAiB,IAPU;AAQ3B,0CAAwB;AARG,iBA5B1B;AAsCL,gDAAgC;AAC5B,uCAAqB,IADO;AAE5B,sCAAoB,IAFQ;AAG5B,4BAAU,IAHkB;AAI5B,kCAAgB,IAJY;AAK5B,6BAAW,IALiB;AAM5B,0BAAQ,IANoB;AAO5B,2BAAS,IAPmB;AAQ5B,8BAAY,IARgB;AAS5B,6CAA2B,IATC;AAU5B,kCAAgB;AAVY,iBAtC3B;AAkDL,wBAAQlB,QAlDH;AAmDL,iCAAiB,mBAnDZ;AAoDL,+BAAe,IApDV;AAqDL,6BAAa;AArDR,gBAAT;AAuDH;;AACD;AACH;;AACD,aAAK,YAAL;AAAmB;AACf,kBAAM2B,UAAU,GAAG,KAAK9C,KAAL,CAAW+C,WAAX,CAAuBxB,EAAvB,CAAnB;;AACA,gBAAIuB,UAAJ,EAAgB;AACZ/B,cAAAA,SAAS,qBACF,KAAKV,KADH;AAEL,qCAAqB;AACjB,gCAAcyC,UAAU,CAAChB,UADR;AAEjB,+BAAagB,UAAU,CAACf,SAFP;AAGjB,4BAAUe,UAAU,CAACV,KAHJ;AAIjB,kCAAgBU,UAAU,CAACT,YAJV;AAKjB,4BAAUxC,WAAW,CAACiD,UAAU,CAACd,MAAZ,CALJ;AAMjB,6BAAWc,UAAU,CAACJ,OANL;AAOjB,0BAAQI,UAAU,CAACH,IAPF;AAQjB,8BAAYG,UAAU,CAACF,OARN;AASjB,2BAASE,UAAU,CAACzC,KATH;AAUjB,mCAAiByC,UAAU,CAACE;AAVX,iBAFhB;AAcL,6BAAa;AACT,6BAAW,EADF;AAET,+BAAa,EAFJ;AAGT,8BAAY;AAHH,iBAdR;AAmBL,8BAAc;AACV,gDAA8B,EADpB;AAEV,iCAAe,EAFL;AAGV,gCAAc,EAHJ;AAIV,2BAAS;AAJC,iBAnBT;AAyBL,+CAA+B;AAC3B,gCAAc,IADa;AAE3B,+BAAa,IAFc;AAG3B,4BAAU,IAHiB;AAI3B,kCAAgB,IAJW;AAK3B,4BAAU,IALiB;AAM3B,6BAAW,IANgB;AAO3B,0BAAQ,IAPmB;AAQ3B,8BAAY,IARe;AAS3B,2BAAS,IATkB;AAU3B,mCAAiB;AAVU,iBAzB1B;AAqCL,uCAAuB;AACnB,6BAAW,IADQ;AAEnB,+BAAa,IAFM;AAGnB,8BAAY;AAHO,iBArClB;AA0CL,wCAAwB;AACpB,gDAA8B,IADV;AAEpB,iCAAe,IAFK;AAGpB,gCAAc,IAHM;AAIpB,2BAAS;AAJW,iBA1CnB;AAgDL,wBAAQ7B,QAhDH;AAiDL,iCAAiB,mBAjDZ;AAkDL,+BAAe,IAlDV;AAmDL,6BAAa;AAnDR,gBAAT;AAqDH;;AACD;AACH;;AACD;AAAS8B,UAAAA,OAAO,CAACC,IAAR,CAAa,oBAAb;AA1Hb;AA4HH;;AACD,QAAI,CAACnC,SAAD,IACAI,QAAQ,KAAKJ,SAAS,CAACL,IADvB,IAEAK,SAAS,CAAC,eAAD,CAFT,IAGCQ,EAAE,IAAI,KAAKvB,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBG,IAAxB,KAAiC,MAH5C,EAGqD;AACjD,UAAI,KAAKxB,KAAL,CAAWmD,gBAAX,CAA4BhC,QAA5B,CAAJ,EAA2C;AACvC,aAAKiC,QAAL,CAAeC,QAAD,IAAc;AACxB,gBAAMC,YAAY,GAAGtC,IAAI,CAACC,KAAL,CACjBD,IAAI,CAACuC,SAAL,CAAe,KAAKvD,KAAL,CAAWmD,gBAAX,CAA4BhC,QAA5B,CAAf,CADiB,CAArB;;AAGA,cAAIqC,QAAQ,qBACLH,QADK;AAER,6BAAiBC,YAAY,CAACG,cAAb,CAA4B,CAA5B,CAFT;AAGR,oBAAQtC;AAHA,YAAZ;;AAKA,cAAIuC,MAAM,GAAG,IAAb;;AACA,cAAI,KAAK1D,KAAL,CAAW2D,OAAX,CAAmBC,cAAnB,CAAkCrC,EAAlC,CAAJ,EAA2C;AAAA,0CAEnC,KAAKvB,KAAL,CAAW2D,OAAX,CAAmB,KAAK3D,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBE,EAA3C,CAFmC;AAAA,kBAChCsC,SADgC,yBAChCA,SADgC;AAAA,kBACrBC,KADqB,yBACrBA,KADqB,EAGvC;;AACAJ,YAAAA,MAAM,GAAG;AACL,uBAASG,SADJ;AAEL,uBAASC;AAFJ,aAAT;AAIH;;AACDR,UAAAA,YAAY,CAACG,cAAb,CAA4BM,OAA5B,CAAqCD,KAAD,IAAW;AAC3C;AACAN,YAAAA,QAAQ,CAACM,KAAD,CAAR,GAAkB,EAAlB;AACAN,YAAAA,QAAQ,WAAIM,KAAJ,gBAAR,GAAiC,EAAjC,CAH2C,CAI3C;;AACA,gBAAIE,KAAK,CAACC,OAAN,CAAcX,YAAY,CAACQ,KAAD,CAA1B,CAAJ,EAAwC;AACpCR,cAAAA,YAAY,CAACQ,KAAD,CAAZ,CAAoBC,OAApB,CAA4B,CAAC;AAACtB,gBAAAA,IAAD;AAAOnB,gBAAAA;AAAP,eAAD,KAAkB;AAC1CkC,gBAAAA,QAAQ,WAAIM,KAAJ,gBAAR,CAA+BrB,IAA/B,IAAuC,IAAvC;;AACA,wBAAQnB,IAAR;AACI,uBAAK,QAAL;AACIkC,oBAAAA,QAAQ,CAACM,KAAD,CAAR,CAAgBrB,IAAhB,IAAwBiB,MAAxB;AACA;;AACJ;AACIF,oBAAAA,QAAQ,CAACM,KAAD,CAAR,CAAgBrB,IAAhB,IAAwB,IAAxB;AALR;AAOH,eATD;AAUH;AACJ,WAjBD;;AAkBA,cAAItB,QAAQ,KAAK,UAAb,IAA2BI,EAA3B,IACA,KAAKvB,KAAL,CAAW2D,OAAX,CAAmBC,cAAnB,CAAkCrC,EAAlC,CADJ,EAC2C;AACvCiC,YAAAA,QAAQ,CAAC,iBAAD,CAAR,CAA4B,kBAA5B,IACI,KAAKxD,KAAL,CAAW2D,OAAX,CAAmBpC,EAAnB,EAAuBuC,KAD3B;AAEH;;AACD,iBAAON,QAAP;AACH,SA3CD,EA2CG,MAAM;AACL,eAAKJ,QAAL,CAAc;AACV,2BAAe,KAAKc,eAAL;AADL,WAAd;AAGH,SA/CD;AAgDH;AACJ,KAtDD,MAsDO,IAAInD,SAAS,IAAI,CAACA,SAAS,CAAC,eAAD,CAA3B,EAA8C;AACjD,UAAII,QAAQ,KAAK,UAAb,IACA,KAAKnB,KAAL,CAAW2D,OAAX,CAAmBC,cAAnB,CAAkCrC,EAAlC,CADJ,EAC2C;AACvCR,QAAAA,SAAS,CAAC,iBAAD,CAAT,CAA6B,kBAA7B,IACI,KAAKf,KAAL,CAAW2D,OAAX,CAAmBpC,EAAnB,EAAuBuC,KAD3B;AAEH;;AACD,WAAKV,QAAL,CAAcrC,SAAd;AACH;AACJ;;AAEDoD,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKnE,KAAL,CAAWmD,gBAAX,CAA4B,KAAK9C,KAAL,CAAWK,IAAvC,CAAP;AACH;;AAED0D,EAAAA,gBAAgB,GAAG;AACf,UAAMC,OAAO,GAAG,KAAKF,aAAL,GAAqB,KAAK9D,KAAL,CAAWI,aAAhC,CAAhB;;AACA,QAAIuD,KAAK,CAACC,OAAN,CAAcI,OAAd,CAAJ,EAA4B;AACxB,aAAOA,OAAP;AACH,KAFD,MAEO;AACH,aAAOA,OAAO,CAAC,KAAKhE,KAAL,CAAWC,WAAZ,CAAd;AACH;AACJ;;AAQDgE,EAAAA,cAAc,CAACC,IAAD,EAAOpD,QAAP,EAAiB;AAC3B,WAAO,KAAKnB,KAAL,CAAWmD,gBAAX,CAA4BhC,QAA5B,EAAsCoD,IAAtC,CAAP;AACH;;AAEDL,EAAAA,eAAe,GAAG;AACd,UAAMM,gBAAgB,GAAG,KAAKL,aAAL,GAAqBV,cAArB,CAAoC,KAAKpD,KAAL,CAAWG,UAA/C,CAAzB;AACA,WACI,KAAK4D,gBAAL,GACKK,MADL,CACY,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAgBA,QAD5B,EAEKC,KAFL,CAEW,CAAC;AAAClC,MAAAA;AAAD,KAAD,KAAY,KAAKpC,KAAL,CAAWmE,gBAAX,EAA6B/B,IAA7B,CAFvB,KAGAmC,MAAM,CAACC,MAAP,CAAc,KAAKxE,KAAL,WAAcmE,gBAAd,gBAAd,EACKG,KADL,CACYG,KAAD,IAAWA,KADtB,CAJJ;AAOH;;AAEDC,EAAAA,qCAAqC,GAAG;AACpC,QAAIC,gBAAgB,GAAG,KAAvB;AACA,UAAMR,gBAAgB,GAAG,KAAKnE,KAAL,CAAWI,aAApC,CAFoC,CAGpC;;AACA,QAAIuD,KAAK,CAACC,OAAN,CAAc,KAAKE,aAAL,GAAqBK,gBAArB,CAAd,CAAJ,EAA2D;AACvD,WAAKL,aAAL,GAAqBK,gBAArB,EAAuCS,IAAvC,CAA6CC,KAAD,IAAW;AACnD,YAAIA,KAAK,CAAC5E,WAAV,EAAuB;AACnB0E,UAAAA,gBAAgB,GAAG,KAAK3E,KAAL,CAAWmE,gBAAX,EAA6BU,KAAK,CAACzC,IAAnC,CAAnB;AACA,iBAAO,IAAP;AACH,SAHD,MAGO;AACH,iBAAO,KAAP;AACH;AACJ,OAPD;AAQH;;AACD,WAAOuC,gBAAP;AACH,GAlQwB,CAoQzB;;;AACAG,EAAAA,UAAU,GAAG;AACT,UAAMX,gBAAgB,GAAG,KAAKL,aAAL,GAAqBV,cAArB,CAAoC,KAAKpD,KAAL,CAAWG,UAA/C,CAAzB;AACA,QAAI6D,OAAO,GAAG,KAAKrE,KAAL,CAAWmD,gBAAX,CAA4B,KAAK9C,KAAL,CAAWK,IAAvC,EAA6C,KAAKL,KAAL,CAAWI,aAAxD,CAAd;;AACA,QAAI,CAACuD,KAAK,CAACC,OAAN,CAAcI,OAAd,CAAL,EAA6B;AACzBA,MAAAA,OAAO,GAAGA,OAAO,CAAC,KAAKhE,KAAL,CAAWC,WAAZ,CAAjB;AACH;;AACD+D,IAAAA,OAAO,CAACN,OAAR,CAAiBmB,KAAD,IAAW;AACvB,WAAKE,aAAL,CAAmBZ,gBAAnB,EAAqCU,KAArC,EAA4C,KAAK7E,KAAL,CAAWmE,gBAAX,EAA6BU,KAAK,CAACzC,IAAnC,CAA5C;AACH,KAFD;AAGA,SAAKW,QAAL,CAAeC,QAAD,IAAc;AACxB,UAAI,KAAKa,eAAL,EAAJ,EAA4B;AACxB,YAAIb,QAAQ,CAAC7C,UAAT,KAAwB,KAAK2D,aAAL,GAAqBV,cAArB,CAAoC4B,MAApC,GAA6C,CAAzE,EAA4E;AACxE,cAAI,CAAChC,QAAQ,CAAC1C,aAAd,EAA6B;AACzB,gBAAI,KAAKX,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBG,IAAxB,KAAiC,MAArC,EAA6C;AACzC,mBAAKxB,KAAL,CAAWjC,mBAAX,CAA+BuH,UAA/B,CAA0C,KAAKjF,KAA/C,EACI,KAAKL,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBE,EAD5B;AAEH,aAHD,MAGO;AACH,mBAAKvB,KAAL,CAAWjC,mBAAX,CAA+BuH,UAA/B,CAA0C,KAAKjF,KAA/C;AACH;AACJ;;AACD,iBAAO;AACHM,YAAAA,aAAa,EAAE;AADZ,WAAP;AAGH,SAZD,MAYO;AACH,gBAAM4E,gBAAgB,GAAG,KAAKR,qCAAL,EAAzB;AAAA,gBACIS,cAAc,GAAGnC,QAAQ,CAAC7C,UAAT,GAAsB,CAD3C;AAAA,gBAEIiF,iBAAiB,GAAG,KAAKtB,aAAL,GAAqBV,cAArB,CAAoC+B,cAApC,CAFxB;AAGA,cAAIE,QAAQ,GAAG;AACXlF,YAAAA,UAAU,EAAEgF,cADD;AAEX/E,YAAAA,aAAa,EAAEgF,iBAFJ;AAGXnF,YAAAA,WAAW,EAAEiF,gBAAgB,GAAGA,gBAAH,GAAsBlC,QAAQ,CAAC/C,WAHjD;AAIXC,YAAAA,WAAW,EAAE;AAJF,WAAf;;AAMA,cAAIgF,gBAAJ,EAAsB;AAClB,gBAAIjC,YAAY,GAAG,KAAKa,aAAL,EAAnB;AAAA,gBACIL,KAAK,GAAG2B,iBADZ,CADkB,CAGlB;;AACAC,YAAAA,QAAQ,CAAC5B,KAAD,CAAR,GAAkB,EAAlB;AACAR,YAAAA,YAAY,CAACmC,iBAAD,CAAZ,CAAgCF,gBAAhC,EAAkDxB,OAAlD,CAA2DmB,KAAD,IAAW;AACjEQ,cAAAA,QAAQ,CAAC5B,KAAD,CAAR,CAAgBoB,KAAK,CAACzC,IAAtB,IAA8B,EAA9B;AACH,aAFD,EALkB,CAQlB;;AACAiD,YAAAA,QAAQ,WAAI5B,KAAJ,gBAAR,GAAiC,EAAjC;AACAR,YAAAA,YAAY,CAACmC,iBAAD,CAAZ,CAAgCF,gBAAhC,EAAkDxB,OAAlD,CAA2DmB,KAAD,IAAW;AACjEQ,cAAAA,QAAQ,WAAI5B,KAAJ,gBAAR,CAA+BoB,KAAK,CAACzC,IAArC,IAA6C,IAA7C;AACH,aAFD;AAGH;;AACD,iBAAOiD,QAAP;AACH;AACJ,OAvCD,MAuCO;AACH,eAAO,EAAP;AACH;AACJ,KA3CD,EA2CG,MAAM;AACL,WAAKtC,QAAL,CAAc;AACV7C,QAAAA,WAAW,EAAE,KAAK2D,eAAL;AADH,OAAd;AAGH,KA/CD;AAgDH,GA9TwB,CAgUzB;;;AACAyB,EAAAA,UAAU,GAAG;AACT,SAAKvC,QAAL,CAAeC,QAAD,IAAc;AACxB,UAAIA,QAAQ,CAAC7C,UAAT,KAAwB,CAAxB,IAA6B6C,QAAQ,CAAC5C,aAA1C,EAAyD;AACrD,eAAO;AACHD,UAAAA,UAAU,EAAE6C,QAAQ,CAAC7C,UAAT,GAAsB,CAD/B;AAEHC,UAAAA,aAAa,EAAE,KAAK0D,aAAL,GAAqBV,cAArB,CAAoCJ,QAAQ,CAAC7C,UAAT,GAAsB,CAA1D;AAFZ,SAAP;AAIH,OALD,MAKO;AACH,eAAO,EAAP;AACH;AACJ,KATD,EASG,MAAM;AACL,WAAK4C,QAAL,CAAc;AACV7C,QAAAA,WAAW,EAAE,KAAK2D,eAAL;AADH,OAAd;AAGH,KAbD;AAcH;;AAED0B,EAAAA,WAAW,GAAG;AACV,SAAKxC,QAAL,CAAc;AAAC5C,MAAAA,UAAU,EAAE;AAAb,KAAd;AACH;;AAEDqF,EAAAA,iBAAiB,CAACC,YAAD,EAAeZ,KAAf,EAAsBa,UAAtB,EAAkC;AAC/C,SAAK3C,QAAL,CAAeC,QAAD,IAAc;AACxBA,MAAAA,QAAQ,CAACyC,YAAD,CAAR,CAAuBZ,KAAK,CAACzC,IAA7B,IAAqCsD,UAArC;AACA,aAAO1C,QAAP;AACH,KAHD;AAIH;;AAED+B,EAAAA,aAAa,CAACU,YAAD,EAAeZ,KAAf,EAAsBa,UAAtB,EAAkC;AAC3C,SAAK3C,QAAL,CAAeC,QAAD,IAAc;AACxB,UAAI,CAAC0C,UAAL,EAAiB;AAAE;AACf1C,QAAAA,QAAQ,WAAIyC,YAAJ,gBAAR,CAAsCZ,KAAK,CAACzC,IAA5C,IAAoD,CAACyC,KAAK,CAACR,QAA3D;AACH,OAFD,MAEO,IAAI7F,eAAe,CAACkH,UAAD,EAAab,KAAK,CAAC5D,IAAnB,CAAnB,EAA6C;AAAE;AAClD,YAAI0E,OAAO,GAAG,IAAd;;AACA,YAAId,KAAK,CAAC5D,IAAN,KAAe,QAAnB,EAA6B;AACzB;AACA+B,UAAAA,QAAQ,CAACyC,YAAD,CAAR,CAAuBZ,KAAK,CAACzC,IAA7B,IAAqCwD,QAAQ,CAACF,UAAD,EAAa,EAAb,CAA7C;AACH,SAHD,MAGO,IAAIb,KAAK,CAAC5D,IAAN,KAAe,OAAnB,EAA4B;AAC/B,cAAI4E,MAAM,GAAG,EAAb;;AACA,cAAIhB,KAAK,CAACA,KAAN,KAAgB,eAApB,EAAqC;AACjCgB,YAAAA,MAAM,GAAGtB,MAAM,CAACC,MAAP,CAAc,KAAK7E,KAAL,CAAW0B,QAAzB,EAAmCyE,GAAnC,CAAuC,CAAC;AAAC/D,cAAAA;AAAD,aAAD,KAAaA,KAApD,CAAT;AACH,WAJ8B,CAK/B;;;AACA4D,UAAAA,OAAO,GAAG,CAACE,MAAM,CAACE,QAAP,CAAgBL,UAAhB,CAAD,IAAgC,KAAK1F,KAAL,CAAWO,SAArD;;AACA,cAAI,CAACoF,OAAL,EAAc;AACV3C,YAAAA,QAAQ,CAACxC,YAAT,GAAwB,IAAxB;AACH;AACJ;;AACDwC,QAAAA,QAAQ,WAAIyC,YAAJ,gBAAR,CAAsCZ,KAAK,CAACzC,IAA5C,IAAoDuD,OAApD;AACH,OAjBM,MAiBA;AACH3C,QAAAA,QAAQ,WAAIyC,YAAJ,gBAAR,CAAsCZ,KAAK,CAACzC,IAA5C,IAAoD,KAApD;AACH;;AACD,aAAOY,QAAP;AACH,KAxBD,EAwBG,MAAM;AACL,WAAKD,QAAL,CAAc;AACV7C,QAAAA,WAAW,EAAE,KAAK2D,eAAL;AADH,OAAd,EAEG,MAAM;AACLhE,QAAAA,cAAc,CAACmG,OAAf,CAAuB,MAAvB,EAA+BrF,IAAI,CAACuC,SAAL,CAAe,KAAKlD,KAApB,CAA/B;AACH,OAJD;AAKH,KA9BD;AA+BH;;AAEDiG,EAAAA,cAAc,CAAChE,KAAD,EAAQE,KAAR,EAAe0C,KAAf,EAAsB;AAChC,QAAIA,KAAK,CAAC5D,IAAN,KAAe,eAAnB,EAAoC;AAChC,UAAIgB,KAAJ,EAAW;AACP,aAAKc,QAAL,CAAemD,QAAD,IAAc;AACxB,cAAI/C,QAAQ,GAAG+C,QAAf;AACA,gBAAMC,gBAAgB,GAAGlE,KAAK,CAACA,KAA/B;AACA,gBAAMX,MAAM,GAAG,KAAK3B,KAAL,CAAW4B,OAAX,CAAmB4E,gBAAnB,CAAf;AACAhD,UAAAA,QAAQ,CAAChB,KAAD,CAAR,GAAkB;AACd,6BAAiB;AACbF,cAAAA,KAAK,EAAEkE,gBADM;AAEbhE,cAAAA,KAAK,YAAKgE,gBAAL,eAA0B7E,MAAM,CAACc,IAAjC,gBAA2Cd,MAAM,CAACS,KAAlD;AAFQ,aADH;AAKd,iCAAqBT,MAAM,CAACG,UALd;AAMd,gCAAoBH,MAAM,CAACI,SANb;AAOd,sBAAUJ,MAAM,CAACK,MAPH;AAQd,4BAAgBL,MAAM,CAACS,KART;AASd,uBAAWT,MAAM,CAACe,OATJ;AAUd,oBAAQf,MAAM,CAACgB,IAVD;AAWd,qBAAShB,MAAM,CAACtB,KAXF;AAYd,wBAAYsB,MAAM,CAACiB,OAZL;AAad,uCAA2BjB,MAAM,CAACkB,YAbpB;AAcd,mCAAuBlB,MAAM,CAACU,YAdhB;AAed,uBAAWmE;AAfG,WAAlB;AAiBA5B,UAAAA,MAAM,CAAC6B,IAAP,CAAYjD,QAAQ,CAAChB,KAAD,CAApB,EAA6BuB,OAA7B,CAAsC2C,GAAD,IAAS;AAC1ClD,YAAAA,QAAQ,WAAIhB,KAAJ,gBAAR,CAA+BkE,GAA/B,IAAsC,IAAtC;AACH,WAFD;AAGA,iBAAOlD,QAAP;AACH,SAzBD,EAyBG,MAAM;AACL,eAAKU,eAAL;AACA,eAAKd,QAAL,CAAc;AAAC7C,YAAAA,WAAW,EAAE;AAAd,WAAd;AACH,SA5BD;AA6BH,OA9BD,MA8BO;AACH,aAAK6C,QAAL,CAAemD,QAAD,IAAc;AACxB,cAAI/C,QAAQ,GAAG+C,QAAf;AACA/C,UAAAA,QAAQ,CAAChB,KAAD,CAAR,GAAkB;AACd,6BAAiB,IADH;AAEd,iCAAqB,EAFP;AAGd,gCAAoB,EAHN;AAId,sBAAU,EAJI;AAKd,4BAAgB,EALF;AAMd,uBAAW,EANG;AAOd,oBAAQ,EAPM;AAQd,qBAAS,EARK;AASd,wBAAY,EATE;AAUd,uCAA2B,EAVb;AAWd,mCAAuB,EAXT;AAYd,uBAAW;AAZG,WAAlB;AAcAoC,UAAAA,MAAM,CAAC6B,IAAP,CAAYjD,QAAQ,CAAChB,KAAD,CAApB,EAA6BuB,OAA7B,CAAsC2C,GAAD,IAAS;AAC1ClD,YAAAA,QAAQ,WAAIhB,KAAJ,gBAAR,CAA+BkE,GAA/B,IAAsC,IAAtC;AACH,WAFD;AAGAlD,UAAAA,QAAQ,CAACjD,WAAT,GAAuB,KAAvB;AACA,iBAAOiD,QAAP;AACH,SArBD;AAsBH;AACJ,KAvDD,MAuDO;AACH,WAAKJ,QAAL,CAAemD,QAAD,IAAc;AACxB,YAAI/C,QAAQ,GAAG+C,QAAf;AACA/C,QAAAA,QAAQ,CAAChB,KAAD,CAAR,CAAgB0C,KAAK,CAACzC,IAAtB,IAA8BH,KAA9B;AACA,eAAOkB,QAAP;AACH,OAJD,EAIG,MAAM;AACL,aAAK4B,aAAL,CAAmB,KAAK/E,KAAL,CAAWI,aAA9B,EAA6CyE,KAA7C,EAAoD5C,KAApD;AACH,OAND;AAOH;AACJ,GAhcwB,CAkczB;;;AACAqE,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,IAAP,EAAa;AACzB,QAAIC,WAAJ,EAAiBC,gBAAjB;AACAH,IAAAA,IAAI,CAAC7C,OAAL,CAAczB,KAAD,IAAW;AACpB,UAAIA,KAAJ,EAAW;AACPwE,QAAAA,WAAW,GAAGxE,KAAK,CAACA,KAApB;AACH,OAFD,MAEO;AACHwE,QAAAA,WAAW,GAAG,EAAd;AACH;;AACDD,MAAAA,IAAI,CAAC9C,OAAL,CAAa,CAACiD,UAAD,EAAaC,CAAb,KAAmB;AAC5B,YAAID,UAAJ,EAAgB;AACZD,UAAAA,gBAAgB,GAAGC,UAAU,CAAC1E,KAA9B;AACH,SAFD,MAEO;AACHyE,UAAAA,gBAAgB,GAAG,EAAnB;AACH;;AACD,YAAID,WAAW,KAAKC,gBAApB,EAAsC;AAClCF,UAAAA,IAAI,CAACI,CAAD,CAAJ,GAAU,GAAV;AACH;AACJ,OATD;AAUH,KAhBD;AAiBA,QAAIC,UAAU,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQN,IAAR,CAAJ,CAAjB;AAAA,QAAqCO,aAAa,GAAG,CAAC,CAAtD;AACAF,IAAAA,UAAU,CAACnD,OAAX,CAAmB,CAACzB,KAAD,EAAQ+E,CAAR,KAAc;AAC7B,UAAI,OAAO/E,KAAP,KAAiB,QAArB,EAA+B;AAC3B8E,QAAAA,aAAa,GAAGC,CAAhB;AACH;AACJ,KAJD;;AAKA,QAAID,aAAa,GAAG,CAAC,CAArB,EAAwB;AACpBF,MAAAA,UAAU,CAACI,MAAX,CAAkBF,aAAlB,EAAiC,CAAjC;AACH;;AACD,WAAOF,UAAP;AACH;;AAEDK,EAAAA,WAAW,CAACrC,KAAD,EAAQ1C,KAAR,EAAegF,UAAf,EAA2B;AAClC,QAAIC,UAAU,GAAGvC,KAAK,CAACzC,IAAvB;;AACA,YAAQyC,KAAK,CAAC5D,IAAd;AACI,WAAK,QAAL;AACI,eAAO,oBAAC,WAAD;AAAa,UAAA,SAAS,EAAE,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACH,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAEmG,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkCA,UAAlC,CADG,EAEH,oBAAC,MAAD;AACI,UAAA,YAAY,EAAE,KADlB;AAEI,UAAA,KAAK,EAAE,KAAKpH,KAAL,CAAWmC,KAAX,EAAkBiF,UAAlB,CAFX;AAGI,UAAA,QAAQ,EAAE,CAAC;AAACC,YAAAA;AAAD,WAAD,KAAc;AACpB,iBAAKpB,cAAL,CAAoBoB,MAAM,CAACpF,KAA3B,EAAkCE,KAAlC,EAAyC0C,KAAzC;AACH,WALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOQA,KAAK,CAACyC,OAAN,CAAcxB,GAAd,CAAmByB,MAAD,IAAY;AAC1B,iBAAO,oBAAC,QAAD;AAAU,YAAA,KAAK,EAAEA,MAAjB;AAAyB,YAAA,GAAG,EAAEA,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAKA,MAAL,CADG,CAAP;AAGH,SAJD,CAPR,CAFG,CAAP;;AAmBJ,WAAK,QAAL;AAAe;AACX,cAAIC,UAAU,GAAGjD,MAAM,CAAC6B,IAAP,CAAY,KAAKzG,KAAL,CAAW2D,OAAvB,EACZc,MADY,CACJqD,QAAD,IACJ,KAAK9H,KAAL,CAAW2D,OAAX,CAAmBmE,QAAnB,EAA6BC,QAA7B,GACA,KAAK/H,KAAL,CAAW2D,OAAX,CAAmBmE,QAAnB,EAA6BE,MAA7B,CAAoC3C,MAH3B,EAIZc,GAJY,CAIP2B,QAAD,KAAe;AAChB,qBAASA,QADO;AAEhB,qBAAS,KAAK9H,KAAL,CAAW2D,OAAX,CAAmBmE,QAAnB,EAA6BhE;AAFtB,WAAf,CAJQ,CAAjB,CADW,CASX;;AACA+D,UAAAA,UAAU,GAAG,KAAKlB,gBAAL,CAAsB/B,MAAM,CAACC,MAAP,CAAc,KAAKxE,KAAL,CAAWmC,KAAX,CAAd,CAAtB,EAAwDqF,UAAxD,CAAb,CAVW,CAWX;;AACA,gBAAMI,UAAU,GAAG,KAAK7D,gBAAL,GACd8D,MADc,CACP,CAACC,KAAD,EAAQ;AAAC7G,YAAAA;AAAD,WAAR,KAAmB6G,KAAK,IAAI7G,IAAI,KAAK,QAAb,CADjB,EACyC,CADzC,CAAnB;AAEA,iBACI;AAAK,YAAA,KAAK,EAAE;AAAC8G,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,SAAS,EAAE,eAA3B;AAA4C,YAAA,OAAO,EAAE,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,YAAD;AACI,YAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWmC,KAAX,EAAkBiF,UAAlB,CADX;AAEI,YAAA,QAAQ,EAAGnF,KAAD,IAAW;AACjB,mBAAKgE,cAAL,CAAoBhE,KAApB,EAA2BE,KAA3B,EAAkC0C,KAAlC;AACH,aAJL;AAKI,YAAA,OAAO,EAAE2C,UALb;AAMI,YAAA,SAAS,EAAC,gBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EASSI,UAAU,GAAG,CAAd,IACA,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAC,SAAlB;AAA4B,0BAAW,KAAvC;AAA6C,YAAA,OAAO,EAAC,UAArD;AACI,YAAA,SAAS,EAAC,uBADd;AAEI,YAAA,OAAO,EAAGI,KAAD,IAAW;AAChBA,cAAAA,KAAK,CAACC,cAAN,GADgB,CAEhB;;AACA,mBAAKC,WAAL,CAAiBf,UAAjB;AACA,mBAAKgB,WAAL;AACH,aAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVR,CADJ,CADJ;AAyBH;;AACD,WAAK,SAAL;AAAgB;AACZ,cAAIC,WAAW,GAAG7D,MAAM,CAACC,MAAP,CAAc,KAAK7E,KAAL,CAAW0B,QAAzB,EACbyE,GADa,CACT,CAAC;AAAC5D,YAAAA,OAAD;AAAUE,YAAAA,IAAV;AAAgBL,YAAAA;AAAhB,WAAD,MAA6B;AAC9BE,YAAAA,KAAK,EAAEC,OADuB;AAE9BC,YAAAA,KAAK,YAAKC,IAAL,gBAAeL,KAAf;AAFyB,WAA7B,CADS,CAAlB;AAMAqG,UAAAA,WAAW,GAAG,KAAK9B,gBAAL,CAAsB/B,MAAM,CAACC,MAAP,CAAc,KAAKxE,KAAL,CAAWmC,KAAX,CAAd,CAAtB,EAAwDiG,WAAxD,CAAd,CAPY,CASZ;;AACA,gBAAMC,YAAY,GAAG,KAAKtE,gBAAL,GAChB8D,MADgB,CACT,CAACC,KAAD,EAAQ;AAAC7G,YAAAA;AAAD,WAAR,KAAmB6G,KAAK,IAAI7G,IAAI,KAAK,SAAb,CADf,EACwC,CADxC,CAArB;AAGA,iBACI;AAAK,YAAA,KAAK,EAAE;AAAC8G,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,SAAS,EAAE,eAA3B;AAA4C,YAAA,OAAO,EAAE,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,YAAD;AACI,YAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWmC,KAAX,EAAkBiF,UAAlB,IAAgC,KAAKpH,KAAL,CAAWmC,KAAX,EAAkBiF,UAAlB,CAAhC,GAAgE,EAD3E;AAEI,YAAA,QAAQ,EAAGnF,KAAD,IAAW;AACjB,mBAAKgE,cAAL,CAAoBhE,KAApB,EAA2BE,KAA3B,EAAkC0C,KAAlC;AACH,aAJL;AAKI,YAAA,OAAO,EAAEuD,WALb;AAMI,YAAA,SAAS,EAAC,gBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EASQC,YAAY,GAAG,CAAf,IACA,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAC,SAAlB;AAA4B,0BAAW,KAAvC;AAA6C,YAAA,OAAO,EAAC,UAArD;AACI,YAAA,SAAS,EAAC,uBADd;AAEI,YAAA,OAAO,EAAGL,KAAD,IAAW;AAChBA,cAAAA,KAAK,CAACC,cAAN,GADgB,CAEhB;;AACA,mBAAKC,WAAL,CAAiBf,UAAjB;AACA,mBAAKgB,WAAL;AACH,aAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVR,CADJ,CADJ;AAyBH;;AACD,WAAK,YAAL;AAAmB;AACf,cAAIG,cAAc,GAAG,KAAK3I,KAAL,CAAW+C,WAAhC;AAEA4F,UAAAA,cAAc,GAAG/D,MAAM,CAACC,MAAP,CAAc8D,cAAd,EAA8BxC,GAA9B,CAAkC,CAAC;AAAC5D,YAAAA,OAAD;AAAUE,YAAAA,IAAV;AAAgBL,YAAAA;AAAhB,WAAD,MAA6B;AAC5EE,YAAAA,KAAK,EAAEC,OADqE;AAE5EC,YAAAA,KAAK,YAAKC,IAAL,gBAAeL,KAAf;AAFuE,WAA7B,CAAlC,CAAjB;AAIAuG,UAAAA,cAAc,GAAG,KAAKhC,gBAAL,CAAsB/B,MAAM,CAACC,MAAP,CAAc,KAAKxE,KAAL,CAAWmC,KAAX,CAAd,CAAtB,EAAwDmG,cAAxD,CAAjB;AACA,iBAAQ;AAAK,YAAA,KAAK,EAAE;AAACP,cAAAA,KAAK,EAAE;AAAR,aAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACJ,oBAAC,IAAD;AAAM,YAAA,SAAS,MAAf;AAAgB,YAAA,SAAS,EAAC,eAA1B;AAA0C,YAAA,OAAO,EAAE,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,YAAD;AACI,YAAA,KAAK,EAAE,KAAK/H,KAAL,CAAWmC,KAAX,EAAkBiF,UAAlB,IAAgC,KAAKpH,KAAL,CAAWmC,KAAX,EAAkBiF,UAAlB,CAAhC,GAAgE,EAD3E;AAEI,YAAA,QAAQ,EAAGnF,KAAD,IAAW;AACjB,mBAAKgE,cAAL,CAAoBhE,KAApB,EAA2BE,KAA3B,EAAkC0C,KAAlC;AACH,aAJL;AAKI,YAAA,OAAO,EAAEyD,cALb;AAMI,YAAA,SAAS,EAAC,gBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADI,CAAR;AAWH;;AACD,WAAK,eAAL;AAAsB;AAClB,gBAAMC,cAAc,GAAGhE,MAAM,CAACC,MAAP,CAAc,KAAK7E,KAAL,CAAW4B,OAAzB,EAClBuE,GADkB,CACd,CAAC;AAAC5D,YAAAA,OAAD;AAAUE,YAAAA,IAAV;AAAgBL,YAAAA;AAAhB,WAAD,MAA6B;AAC9BE,YAAAA,KAAK,EAAEC,OADuB;AAE9BC,YAAAA,KAAK,YAAKC,IAAL,gBAAeL,KAAf;AAFyB,WAA7B,CADc,CAAvB;AAKA,iBACI,oBAAC,YAAD;AACI,YAAA,SAAS,EAAC,gBADd;AAEI,YAAA,WAAW,MAFf;AAGI,YAAA,QAAQ,EAAGE,KAAD,IAAW;AACjB,mBAAKgE,cAAL,CAAoBhE,KAApB,EAA2BE,KAA3B,EAAkC0C,KAAlC;AACH,aALL;AAMI,YAAA,KAAK,EAAE,KAAK7E,KAAL,CAAWmC,KAAX,EAAkBiF,UAAlB,CANX;AAOI,YAAA,OAAO,EAAEmB,cAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AACD;AACI,eAAO,oBAAC,SAAD;AACH,UAAA,KAAK,EAAE1D,KAAK,CAACzC,IADV;AAEH,UAAA,SAAS,EAAEyC,KAAK,CAAC2D,SAFd;AAGH,UAAA,MAAM,EAAC,QAHJ;AAIH,UAAA,KAAK,EAAE,KAAKxI,KAAL,CAAWmC,KAAX,EAAkB0C,KAAK,CAACzC,IAAxB,CAJJ;AAKH,UAAA,KAAK,EAAE,CAAC,KAAKpC,KAAL,CAAWmC,KAAK,GAAG,YAAnB,EAAiC0C,KAAK,CAACzC,IAAvC,CALL;AAMH,UAAA,UAAU,EAAE,CAAC,KAAKpC,KAAL,CAAWmC,KAAK,GAAG,YAAnB,EAAiC0C,KAAK,CAACzC,IAAvC,CAAD,GAAgDyC,KAAK,CAACzC,IAAN,GAAa,UAA7D,GAA0E,EANnF;AAOH,UAAA,IAAI,EAAEyC,KAAK,CAAC5D,IAAN,KAAe,QAAf,GAA0B,QAA1B,GAAqC,MAPxC;AAQH,UAAA,QAAQ,EAAE4D,KAAK,CAACR,QARb;AASH,UAAA,SAAS,EAAEQ,KAAK,CAAC4D,IATd;AAUH,UAAA,QAAQ,EAAGC,CAAD,IAAO;AACbA,YAAAA,CAAC,CAACT,cAAF;AACA,iBAAKzC,iBAAL,CAAuBmD,IAAvB,CAA4B,IAA5B,EAAkCxG,KAAlC,EAAyC0C,KAAzC,EAAgD6D,CAAC,CAACrB,MAAF,CAASpF,KAAzD;AACH,WAbE;AAcH,UAAA,MAAM,EAAGyG,CAAD,IAAO;AACXA,YAAAA,CAAC,CAACT,cAAF;AACA,iBAAKlD,aAAL,CAAmB4D,IAAnB,CAAwB,IAAxB,EAA8BxG,KAA9B,EAAqC0C,KAArC,EAA4C6D,CAAC,CAACrB,MAAF,CAASpF,KAArD;AACH,WAjBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AA3IR;AA+JH;;AAED2G,EAAAA,QAAQ,CAAC/D,KAAD,EAAQsC,UAAR,EAAoB;AACxB,UAAM0B,WAAW,GAAG,KAAK/E,aAAL,EAApB;AACA,QAAIgF,KAAK,GAAG,CAAC,KAAK9I,KAAL,CAAWK,IAAZ,EAAkB,KAAKL,KAAL,CAAWI,aAA7B,EAA4C+G,UAA5C,CAAZ;;AACA,QAAI,CAACxD,KAAK,CAACC,OAAN,CAAciF,WAAW,CAAC,KAAK7I,KAAL,CAAWI,aAAZ,CAAzB,CAAL,EAA2D;AACvD0I,MAAAA,KAAK,CAAC7B,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAKjH,KAAL,CAAWC,WAA9B;AACH;;AACD,SAAKN,KAAL,CAAWjC,mBAAX,CAA+BkL,QAA/B,CAAwCE,KAAxC;AACA,SAAK/F,QAAL,CAAerC,SAAD,IAAe;AACzB;AADyB,YAElBL,IAFkB,GAEkBK,SAFlB,CAElBL,IAFkB;AAAA,YAEZD,aAFY,GAEkBM,SAFlB,CAEZN,aAFY;AAAA,YAEGH,WAFH,GAEkBS,SAFlB,CAEGT,WAFH;AAGzB,UAAI+D,OAAO,GAAG,KAAKrE,KAAL,CAAWmD,gBAAX,CAA4BzC,IAA5B,EAAkCD,aAAlC,CAAd;;AACA,UAAI,CAACuD,KAAK,CAACC,OAAN,CAAcI,OAAd,CAAL,EAA6B;AACzBA,QAAAA,OAAO,GAAGA,OAAO,CAAC/D,WAAD,CAAjB;AACH;;AACD,YAAM8I,iBAAiB,GAAG/E,OAAO,CAAC6D,MAAR,CAAe,CAACmB,KAAD,EAAQC,UAAR,KACrCD,KAAK,IAAInE,KAAK,KAAKoE,UAAU,CAACpE,KAAzB,CADiB,EACgB,CADhB,CAA1B;;AAEA,UAAIlB,KAAK,CAACC,OAAN,CAAclD,SAAS,CAACN,aAAD,CAAvB,CAAJ,EAA6C;AACzCM,QAAAA,SAAS,CAACN,aAAD,CAAT,WAA4ByE,KAA5B,cAAqCkE,iBAArC,KAA4D,IAA5D;AACArI,QAAAA,SAAS,WAAIN,aAAJ,gBAAT,WAA2CyE,KAA3C,cAAoDkE,iBAApD,KAA2E,IAA3E;AACH,OAHD,MAGO;AACHrI,QAAAA,SAAS,CAACN,aAAD,CAAT,WAA4ByE,KAA5B,cAAqCkE,iBAArC,KAA4D,IAA5D;AACArI,QAAAA,SAAS,WAAIN,aAAJ,gBAAT,WAA2CyE,KAA3C,cAAoDkE,iBAApD,KAA2E,IAA3E;AACH;;AACD,aAAOrI,SAAP;AACH,KAjBD,EAiBG,MAAM;AACLb,MAAAA,cAAc,CAACmG,OAAf,CAAuB,MAAvB,EAA+BrF,IAAI,CAACuC,SAAL,CAAe,KAAKlD,KAApB,CAA/B;AACH,KAnBD,EAPwB,CA2BxB;AACH;;AAEDkI,EAAAA,WAAW,CAACf,UAAD,EAAa;AACpB,SAAKpE,QAAL,CAAerC,SAAD,IAAe;AACzB,YAAMwI,oBAAoB,GAAGxI,SAAS,CAACA,SAAS,CAAC,eAAD,CAAV,CAAtC;AACA,YAAMyI,8BAA8B,GAAGzI,SAAS,WAAIA,SAAS,CAAC,eAAD,CAAb,gBAAhD;AACA,UAAI0I,QAAJ;AACA,UAAIC,gBAAgB,GAAG,EAAvB;AACA,UAAIC,0BAA0B,GAAG,EAAjC;AACA,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAIC,aAAa,GAAG,IAApB;AAEAjF,MAAAA,MAAM,CAACkF,OAAP,CAAeP,oBAAf,EAAqCxF,OAArC,CAA6C,CAAC,CAACgG,YAAD,EAAehE,UAAf,CAAD,KAAgC;AACzE,YAAI6D,KAAK,KAAK,CAAV,IAAeC,aAAnB,EAAkC;AAC9BJ,UAAAA,QAAQ,GAAGM,YAAX;AACH;;AACD,YAAIH,KAAK,KAAKpC,UAAV,IAAwBqC,aAA5B,EAA2C;AACvCA,UAAAA,aAAa,GAAG,KAAhB;AACA;AACH;;AACD,YAAIG,YAAY,GAAGJ,KAAK,KAAK,CAAV,GAAcH,QAAd,aAA4BA,QAA5B,cAAwCG,KAAK,GAAG,CAAhD,CAAnB;AACAF,QAAAA,gBAAgB,CAACM,YAAD,CAAhB,GAAiCjE,UAAjC;AACA4D,QAAAA,0BAA0B,CAACK,YAAD,CAA1B,GAA2CR,8BAA8B,CAACO,YAAD,CAAzE;AACAH,QAAAA,KAAK;AACR,OAZD;AAcA7I,MAAAA,SAAS,CAACA,SAAS,CAAC,eAAD,CAAV,CAAT,GAAwC2I,gBAAxC;AACA3I,MAAAA,SAAS,WAAIA,SAAS,CAAC,eAAD,CAAb,gBAAT,GAAuD4I,0BAAvD,CAxByB,CAyBzB;;AACAzJ,MAAAA,cAAc,CAACmG,OAAf,CAAuB,MAAvB,EAA+BrF,IAAI,CAACuC,SAAL,CAAe,KAAKlD,KAApB,CAA/B;AACA,aAAOU,SAAP;AACH,KA5BD,EA4BG,MAAM;AACL;AACA,UAAIoI,KAAK,GAAG,CAAC,KAAK9I,KAAL,CAAWK,IAAZ,EAAkB,KAAKL,KAAL,CAAWI,aAA7B,CAAZ;AACA,WAAKT,KAAL,CAAWjC,mBAAX,CAA+BwK,WAA/B,CAA2CY,KAA3C,EAAkD3B,UAAlD,EAA8D,KAAKnH,KAAL,CAAWC,WAAzE;AACA,WAAKkI,WAAL;AACH,KAjCD;AAkCA,SAAKA,WAAL;AACH;;AAEDyB,EAAAA,UAAU,GAAG;AAAA,sBACuB,KAAK5J,KAD5B;AAAA,QACJG,UADI,eACJA,UADI;AAAA,QACQD,WADR,eACQA,WADR;AAAA,QAEL2I,WAFK,GAES,KAAKlJ,KAAL,CAAWmD,gBAAX,CAA4B,KAAK9C,KAAL,CAAWK,IAAvC,CAFT;AAAA,QAGLwJ,KAHK,GAGGhB,WAAW,CAACzF,cAHf;AAIT,QAAIY,OAAO,GAAG,KAAKD,gBAAL,EAAd;AACA,WACI,oBAAC,OAAD;AACI,MAAA,UAAU,EAAE5D,UADhB;AAEI,MAAA,WAAW,EAAC,UAFhB;AAGI,MAAA,SAAS,EAAC,cAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKQ0J,KAAK,CAAC/D,GAAN,CAAW3D,KAAD,IACN,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKA,KADL,CADJ,EAsBI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ6B,OAAO,CAAC8B,GAAR,CAAY,CAACjB,KAAD,EAAQ+B,CAAR,KAAc;AACtB;AACA,YAAMmC,iBAAiB,GAAG/E,OAAO,CAAC6D,MAAR,CAAe,CAACmB,KAAD,EAAQC,UAAR,KAAuBpE,KAAK,CAACA,KAAN,KAAgBoE,UAAU,CAACpE,KAA3B,GAAmCmE,KAAK,GAAG,CAA3C,GAA+CA,KAArF,EAA4F,CAA5F,CAA1B;AAAA,YACIc,eAAe,GAAG,CAAC,GAAG9F,OAAJ,EAAa+F,OAAb,EADtB;AAAA,YAEIC,eAAe,GAAGF,eAAe,CAACG,IAAhB,CAAsBhB,UAAD,IAAgBA,UAAU,CAACpE,KAAX,KAAqBA,KAAK,CAACA,KAAhE,CAFtB;AAGA,aACI;AAAK,QAAA,GAAG,EAAE+B,CAAV;AAAa,QAAA,SAAS,EAAC,gBAAvB;AAAwC,QAAA,KAAK,EAAE,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,SAAS,EAAC,eAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKzE,KAAK,KAAK,KAAKnC,KAAL,CAAWI,aAArB,GAAqC,KAAK8G,WAAL,CAAiBrC,KAAjB,EAAwB1C,KAAxB,EAA+ByE,CAA/B,CAArC,GAAyE,EAD9E,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAMQ,CAAC,KAAKjH,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBqC,MAAzB,IAAmC0F,iBAAiB,GAAGlE,KAAK,CAACqF,WAA7D,IACArF,KAAK,KAAKmF,eADV,IAEA,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAC,SAAX;AAAqB,sBAAW,KAAhC;AAAsC,QAAA,OAAO,EAAC,UAA9C;AACI,QAAA,SAAS,EAAC,oBADd;AAEI,QAAA,OAAO,EAAGhC,KAAD,IAAW;AAChBA,UAAAA,KAAK,CAACC,cAAN;AACA,eAAKW,QAAL,CAAc/D,KAAK,CAACA,KAApB,EAA2B+B,CAA3B;AACH,SALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,UAOS/B,KAAK,CAACA,KAPf,CARR,CADJ;AAsBH,KA3BD,CAFR,EA+BI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,QAAQ,EAAE1E,UAAU,KAAK,CAD7B;AAEI,MAAA,KAAK,EAAC,WAFV;AAGI,MAAA,OAAO,EAAG6H,KAAD,IAAW;AAChBA,QAAAA,KAAK,CAACC,cAAN;AACA,aAAK3C,UAAL;AACH,OANL;AAOI,MAAA,SAAS,mBAAYnF,UAAU,KAAK,CAAf,GAAmB,MAAnB,GAA4B,EAAxC,CAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAWI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAC,WADZ;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,QAAQ,EAAE,CAACD,WAHf;AAII,MAAA,OAAO,EAAG8H,KAAD,IAAW;AAChBA,QAAAA,KAAK,CAACC,cAAN;AACA,aAAKnD,UAAL;AACH,OAPL;AAQI,MAAA,SAAS,EAAC,gBARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASK3E,UAAU,KAAK0J,KAAK,CAAC7E,MAAN,GAAe,CAA9B,GAAkC,KAAKrF,KAAL,CAAWW,aAAX,GAA2B,YAA3B,GAA0C,QAA5E,GAAuF,MAT5F,CAXJ,CA/BJ,CAtBJ,CADJ,CALR,CADJ;AAyFH,GAvyBwB,CAyyBzB;;;AACA6J,EAAAA,eAAe,GAAG;AACd,UAAMtB,WAAW,GAAG,KAAKlJ,KAAL,CAAWmD,gBAAX,CAA4B,KAAK9C,KAAL,CAAWK,IAAvC,CAApB;AACA,UAAMwJ,KAAK,GAAGhB,WAAW,CAACzF,cAA1B;AACAvD,IAAAA,cAAc,CAACC,UAAf,CAA0B,MAA1B;AACA,WACI;AAAK,MAAA,KAAK,EAAE;AACRsK,QAAAA,MAAM,EAAE,IADA;AAERC,QAAAA,OAAO,EAAE;AAFD,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,MAAlB;AAAyB,MAAA,KAAK,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAJJ,EAOI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAC,MAAlB;AAAyB,MAAA,KAAK,EAAE;AAACA,QAAAA,QAAQ,EAAE;AAAX,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAPJ,EAUI,oBAAC,MAAD;AACI,MAAA,KAAK,EAAC,MADV;AAEI,MAAA,SAAS,EAAExM,OAFf;AAGI,MAAA,EAAE,EAAC,eAHP;AAII,MAAA,OAAO,EAAE,MAAM;AACX,aAAK6B,KAAL,CAAWjC,mBAAX,CAA+BqC,iBAA/B;AACH,OANL;AAOI,MAAA,KAAK,EAAE;AAACqK,QAAAA,MAAM,EAAE;AAAT,OAPX;AAQI,MAAA,SAAS,EAAC,QARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAVJ,EAmBI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,OAAtB;AAA8B,MAAA,KAAK,EAAC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAGQP,KAAK,CAAC/D,GAAN,CAAWL,YAAD,IACN;AAAK,MAAA,GAAG,EAAEA,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AACI,MAAA,SAAS,EAAC,eADd;AAEI,MAAA,KAAK,EAAC,MAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGKA,YAHL,CADJ,EAOQ,KAAK1B,gBAAL,GAAwB+B,GAAxB,CAA4B,CAAC;AAACjB,MAAAA,KAAD;AAAQ5D,MAAAA;AAAR,KAAD,KAAmB;AAC3C,UAAIsJ,QAAQ,GAAG,KAAKvK,KAAL,CAAWyF,YAAX,EAAyBZ,KAAzB,CAAf;;AACA,UAAI0F,QAAQ,IAAIA,QAAQ,CAAChH,cAAT,CAAwB,OAAxB,CAAhB,EAAkD;AAC9CgH,QAAAA,QAAQ,GAAGA,QAAQ,CAACtI,KAApB;;AACA,YAAIhB,IAAI,KAAK,eAAT,IAA4B,OAAOsJ,QAAP,KAAoB,QAApD,EAA8D;AAC1DA,UAAAA,QAAQ,GAAG,KAAK5K,KAAL,CAAW4B,OAAX,CAAmBgJ,QAAnB,EAA6B9I,UAAxC;AACH;AACJ;;AAED,aACI;AAAK,QAAA,GAAG,EAAEoD,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,SAAS,EAAC,aAAtB;AAAoC,QAAA,KAAK,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,KAAK,IAAI,EADd,CADJ,EAII,oBAAC,UAAD;AAAY,QAAA,SAAS,EAAC,aAAtB;AAAoC,QAAA,KAAK,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK0F,QAAQ,IAAI,KADjB,CAJJ,CADJ;AAUH,KAnBD,CAPR,CADJ,CAHR,CAnBJ,CADJ;AA0DH;;AAEDC,EAAAA,WAAW,CAACtJ,EAAD,EAAKD,IAAL,EAAW;AAClB,YAAQA,IAAR;AACI,WAAK,QAAL;AACI,eAAOC,EAAE,GAAG,KAAKvB,KAAL,CAAW2D,OAAX,CAAmBpC,EAAnB,EAAuBuC,KAA1B,GAAkC,EAA3C;;AACJ,WAAK,SAAL;AAAgB;AACZ,gBAAMrC,OAAO,GAAG,KAAKzB,KAAL,CAAW0B,QAAX,CAAoBH,EAApB,CAAhB;AACA,iBAAOE,OAAO,GAAGA,OAAO,CAACgB,IAAX,GAAkB,EAAhC;AACH;;AACD;AACI,eAAO,EAAP;AARR;AAUH;;AAEDqI,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKzK,KAAL,CAAWM,aAAX,GAA2B,EAA3B,GAAgC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,iCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrC,EAGI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAE,yBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AACI,MAAA,IAAI,EAAE,IADV;AAEI,MAAA,MAAM,EAAE,KAAKV,MAFjB;AAGI,MAAA,YAAY,EAAE,mCAHlB;AAII,MAAA,gBAAgB,EAAE,mBAJtB;AAKI,MAAA,aAAa,EAAE,UALnB;AAMI,MAAA,aAAa,EAAE,wBANnB;AAOI,MAAA,UAAU,EAAE,SAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAUI,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,SAAtB;AAAgC,MAAA,KAAK,EAAC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK4K,WAAL,CAAiB,KAAK7K,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBE,EAAzC,EAA6C,KAAKlB,KAAL,CAAWK,IAAxD,CADL,OACqE,KAAKV,KAAL,CAAWoB,KAAX,CAAiBC,MAAjB,CAAwBC,IAD7F,kBAVJ,EAcQ,KAAKtB,KAAL,CAAW+K,YAAX,KAA4B,SAA5B,GACI,KAAK/K,KAAL,CAAWmD,gBAAX,CAA4B,KAAK9C,KAAL,CAAWK,IAAvC,IACI,KAAKuJ,UAAL,CAAgBjB,IAAhB,CAAqB,IAArB,GADJ,GAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAHR,GAMM,KAAKwB,eAAL,EApBd,EAsBI,oBAAC,KAAD;AACI,yBAAgB,oBADpB;AAEI,0BAAiB,0BAFrB;AAGI,MAAA,IAAI,EAAE,KAAKnK,KAAL,CAAWQ,YAHrB;AAII,MAAA,OAAO,EAAGkI,CAAD,IAAO;AACZA,QAAAA,CAAC,CAACT,cAAF;AACA,aAAKlF,QAAL,CAAc;AAACvC,UAAAA,YAAY,EAAE;AAAf,SAAd;AACH,OAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,EAAE,EAAC,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,6GADL,CADJ,EAII,oBAAC,MAAD;AACI,MAAA,OAAO,EAAGkI,CAAD,IAAO;AACZA,QAAAA,CAAC,CAACT,cAAF;AACA,aAAKlF,QAAL,CAAc;AAACvC,UAAAA,YAAY,EAAE;AAAf,SAAd;AACH,OAJL;AAKI,MAAA,KAAK,EAAC,SALV;AAMI,MAAA,SAAS,EAAC,gBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOK,0BAPL,CAJJ,CARJ,CAtBJ,EA8CI,oBAAC,MAAD;AACI,MAAA,IAAI,EAAE,KAAKb,KAAL,CAAW+K,YAAX,KAA4B,MADtC;AAEI,MAAA,OAAO,EAAE,MAAM;AACX,aAAK/K,KAAL,CAAWjC,mBAAX,CAA+BqC,iBAA/B;AACA,aAAKgD,QAAL,CAAc;AACV,2BAAiB;AADP,SAAd,EAEG,MAAM;AACLlD,UAAAA,cAAc,CAACmG,OAAf,CAAuB,MAAvB,EAA+BrF,IAAI,CAACuC,SAAL,CAAe,KAAKlD,KAApB,CAA/B;AACH,SAJD;AAKH,OATL;AAUI,yBAAgB,oBAVpB;AAWI,0BAAiB,0BAXrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYI,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAZJ,EAaI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,iBAAD;AAAmB,MAAA,EAAE,EAAC,0BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFADJ,CAbJ,EAkBI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAM;AACnB,aAAKL,KAAL,CAAWjC,mBAAX,CAA+BqC,iBAA/B;AACA,aAAKgD,QAAL,CAAc;AACV,2BAAiB;AADP,SAAd,EAEG,MAAM;AACLlD,UAAAA,cAAc,CAACmG,OAAf,CAAuB,MAAvB,EAA+BrF,IAAI,CAACuC,SAAL,CAAe,KAAKlD,KAApB,CAA/B;AACH,SAJD;AAKH,OAPD;AAOG,MAAA,KAAK,EAAC,SAPT;AAOmB,MAAA,SAAS,MAP5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,CAlBJ,CA9CJ,CADJ,CAHJ,CADJ;AAsFH;;AA98BwB;;AAi9B7B,SAAS2K,eAAT,CAAyB3K,KAAzB,EAAgC;AAC5B,SAAO;AACHsD,IAAAA,OAAO,EAAEtD,KAAK,CAAC4K,MAAN,CAAa,eAAb,CADN;AAEHC,IAAAA,gBAAgB,EAAE7K,KAAK,CAAC4K,MAAN,CAAa,kBAAb,CAFf;AAGH9H,IAAAA,gBAAgB,EAAE9C,KAAK,CAAC8K,YAAN,CAAmB,mBAAnB,CAHf;AAIHJ,IAAAA,YAAY,EAAE1K,KAAK,CAAC8K,YAAN,CAAmB,cAAnB,CAJX;AAKHvJ,IAAAA,OAAO,EAAEvB,KAAK,CAAC+K,KAAN,CAAY,YAAZ,CALN;AAMH1J,IAAAA,QAAQ,EAAErB,KAAK,CAAC+K,KAAN,CAAY,aAAZ,CANP;AAOHrI,IAAAA,WAAW,EAAE1C,KAAK,CAAC+K,KAAN,CAAY,gBAAZ;AAPV,GAAP;AASH;;AAED,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHvN,IAAAA,mBAAmB,EAAED,kBAAkB,CAACC,mBAAD,EAAsBuN,QAAtB;AADpC,GAAP;AAGH;;AAED,eAAezN,OAAO,CAClBmN,eADkB,EAElBK,kBAFkB,CAAP,CAGbvL,IAHa,CAAf","sourcesContent":["import {connect} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport * as registrationActions from \"../../actions/registrationActions\";\nimport React, {Component} from \"react\";\nimport {Prompt} from \"react-router\";\nimport {NavLink} from \"react-router-dom\";\n\n// Material UI Imports\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {Typography} from \"@material-ui/core\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {InputValidation} from \"../FeatureViews/Registration/Validations\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Clear\";\n\n// Outside React Component\nimport SearchSelect from \"react-select\";\nimport BackButton from \"../BackButton.js\";\nimport Modal from \"@material-ui/core/Modal\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst parseGender = {\n    \"M\": \"Male\",\n    \"F\": \"Female\",\n    \"U\": \"Do not disclose\",\n};\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            conditional: \"\",\n            nextSection: false,\n            activeStep: 0,\n            activeSection: \"\",\n            form: \"\",\n            submitPending: false,\n            preLoaded: false,\n            existingUser: false,\n        };\n    }\n\n    componentWillMount() {\n        let prevState = JSON.parse(sessionStorage.getItem(\"form\") || null);\n        const formType = this.props.match.params.type;\n        const {id} = this.props.match.params;\n        if (this.props.match.params.edit === \"edit\") {\n            switch (formType) {\n                case \"student\": {\n                    const student = this.props.students[id];\n                    if (student) {\n                        const parent = this.props.parents[student.parent_id];\n                        prevState = {\n                            ...this.state,\n                            \"Basic Information\": {\n                                \"Student First Name\": student.first_name,\n                                \"Student Last Name\": student.last_name,\n                                \"Gender\": parseGender[student.gender],\n                                \"Grade\": student.grade,\n                                \"Age\": student.age,\n                                \"School\": student.school,\n                                \"Student Email\": student.email,\n                                \"Student Phone Number\": student.phone_number,\n                            },\n                            \"Parent Information\": {\n                                \"Select Parent\": {\n                                    value: parent.user_id,\n                                    label: `${parent.user_id}: ${parent.name} - ${parent.email}`,\n                                },\n                                \"Parent First Name\": parent.first_name,\n                                \"Parent Last Name\": parent.last_name,\n                                \"Gender\": parseGender[parent.gender],\n                                \"Parent Email\": parent.email,\n                                \"Address\": parent.address,\n                                \"City\": parent.city,\n                                \"State\": parent.state,\n                                \"Zip Code\": parent.zipcode,\n                                \"Relationship to Student\": parent.relationship,\n                                \"Phone Number\": parent.phone_number,\n                            },\n                            \"Basic Information_validated\": {\n                                \"Student First Name\": true,\n                                \"Student Last Name\": true,\n                                \"Gender\": true,\n                                \"Grade\": true,\n                                \"Age\": true,\n                                \"School\": true,\n                                \"Student Email\": true,\n                                \"Student Phone Number\": true,\n                            },\n                            \"Parent Information_validated\": {\n                                \"Parent First Name\": true,\n                                \"Parent Last Name\": true,\n                                \"Gender\": true,\n                                \"Parent Email\": true,\n                                \"Address\": true,\n                                \"City\": true,\n                                \"State\": true,\n                                \"Zip Code\": true,\n                                \"Relationship to Student\": true,\n                                \"Phone Number\": true,\n                            },\n                            \"form\": formType,\n                            \"activeSection\": \"Basic Information\",\n                            \"nextSection\": true,\n                            \"preLoaded\": true,\n                        };\n                    }\n                    break;\n                }\n                case \"instructor\": {\n                    const instructor = this.props.instructors[id];\n                    if (instructor) {\n                        prevState = {\n                            ...this.state,\n                            \"Basic Information\": {\n                                \"First Name\": instructor.first_name,\n                                \"Last Name\": instructor.last_name,\n                                \"E-Mail\": instructor.email,\n                                \"Phone Number\": instructor.phone_number,\n                                \"Gender\": parseGender[instructor.gender],\n                                \"Address\": instructor.address,\n                                \"City\": instructor.city,\n                                \"Zip Code\": instructor.zipcode,\n                                \"State\": instructor.state,\n                                \"Date of Birth\": instructor.birth_date,\n                            },\n                            \"Education\": {\n                                \"College\": \"\",\n                                \"Degree(s)\": \"\",\n                                \"Minor(s)\": \"\",\n                            },\n                            \"Experience\": {\n                                \"Subject(s) Tutor Can Teach\": \"\",\n                                \"Specialties\": \"\",\n                                \"Background\": \"\",\n                                \"Notes\": \"\",\n                            },\n                            \"Basic Information_validated\": {\n                                \"First Name\": true,\n                                \"Last Name\": true,\n                                \"E-Mail\": true,\n                                \"Phone Number\": true,\n                                \"Gender\": true,\n                                \"Address\": true,\n                                \"City\": true,\n                                \"Zip Code\": true,\n                                \"State\": true,\n                                \"Date of Birth\": true,\n                            },\n                            \"Education_validated\": {\n                                \"College\": true,\n                                \"Degree(s)\": true,\n                                \"Minor(s)\": true,\n                            },\n                            \"Experience_validated\": {\n                                \"Subject(s) Tutor Can Teach\": true,\n                                \"Specialties\": true,\n                                \"Background\": true,\n                                \"Notes\": true,\n                            },\n                            \"form\": formType,\n                            \"activeSection\": \"Basic Information\",\n                            \"nextSection\": true,\n                            \"preLoaded\": true,\n                        };\n                    }\n                    break;\n                }\n                default: console.warn(\"Invalid form type!\");\n            }\n        }\n        if (!prevState ||\n            formType !== prevState.form ||\n            prevState[\"submitPending\"] ||\n            (id && this.props.match.params.edit !== \"edit\")) {\n            if (this.props.registrationForm[formType]) {\n                this.setState((oldState) => {\n                    const formContents = JSON.parse(\n                        JSON.stringify(this.props.registrationForm[formType])\n                    );\n                    let NewState = {\n                        ...oldState,\n                        \"activeSection\": formContents.section_titles[0],\n                        \"form\": formType,\n                    };\n                    let course = null;\n                    if (this.props.courses.hasOwnProperty(id)) {\n                        const {course_id, title} =\n                            this.props.courses[this.props.match.params.id];\n                        // convert it to a format that onselectChange can use\n                        course = {\n                            \"value\": course_id,\n                            \"label\": title,\n                        };\n                    }\n                    formContents.section_titles.forEach((title) => {\n                        // create blank fields based on form type\n                        NewState[title] = {};\n                        NewState[`${title}_validated`] = {};\n                        // set a value for every non-conditional field (object)\n                        if (Array.isArray(formContents[title])) {\n                            formContents[title].forEach(({name, type}) => {\n                                NewState[`${title}_validated`][name] = true;\n                                switch (type) {\n                                    case \"course\":\n                                        NewState[title][name] = course;\n                                        break;\n                                    default:\n                                        NewState[title][name] = null;\n                                }\n                            });\n                        }\n                    });\n                    if (formType === \"tutoring\" && id &&\n                        this.props.courses.hasOwnProperty(id)) {\n                        NewState[\"Tutor Selection\"][\"Course / Subject\"] =\n                            this.props.courses[id].title;\n                    }\n                    return NewState;\n                }, () => {\n                    this.setState({\n                        \"nextSection\": this.validateSection(),\n                    });\n                });\n            }\n        } else if (prevState && !prevState[\"submitPending\"]) {\n            if (formType === \"tutoring\" &&\n                this.props.courses.hasOwnProperty(id)) {\n                prevState[\"Tutor Selection\"][\"Course / Subject\"] =\n                    this.props.courses[id].title;\n            }\n            this.setState(prevState);\n        }\n    }\n\n    getFormObject() {\n        return this.props.registrationForm[this.state.form];\n    }\n\n    getActiveSection() {\n        const section = this.getFormObject()[this.state.activeSection];\n        if (Array.isArray(section)) {\n            return section;\n        } else {\n            return section[this.state.conditional];\n        }\n    }\n\n    onBack = () => {\n        // clear session storage\n        sessionStorage.removeItem(\"form\");\n        this.props.registrationActions.resetSubmitStatus();\n    }\n\n    getStepContent(step, formType) {\n        return this.props.registrationForm[formType][step];\n    }\n\n    validateSection() {\n        const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n        return (\n            this.getActiveSection()\n                .filter(({required}) => required)\n                .every(({name}) => this.state[currSectionTitle][name]) &&\n            Object.values(this.state[`${currSectionTitle}_validated`])\n                .every((valid) => valid)\n        );\n    }\n\n    getConditionalFieldFromCurrentSection() {\n        let nextSectionInput = false;\n        const currSectionTitle = this.state.activeSection;\n        // Get input from the conditional field\n        if (Array.isArray(this.getFormObject()[currSectionTitle])) {\n            this.getFormObject()[currSectionTitle].some((field) => {\n                if (field.conditional) {\n                    nextSectionInput = this.state[currSectionTitle][field.name];\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n        }\n        return nextSectionInput;\n    }\n\n    // Progresses to next section in registration form\n    handleNext() {\n        const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n        let section = this.props.registrationForm[this.state.form][this.state.activeSection];\n        if (!Array.isArray(section)) {\n            section = section[this.state.conditional];\n        }\n        section.forEach((field) => {\n            this.validateField(currSectionTitle, field, this.state[currSectionTitle][field.name]);\n        });\n        this.setState((oldState) => {\n            if (this.validateSection()) {\n                if (oldState.activeStep === this.getFormObject().section_titles.length - 1) {\n                    if (!oldState.submitPending) {\n                        if (this.props.match.params.edit === \"edit\") {\n                            this.props.registrationActions.submitForm(this.state,\n                                this.props.match.params.id);\n                        } else {\n                            this.props.registrationActions.submitForm(this.state);\n                        }\n                    }\n                    return {\n                        submitPending: true,\n                    };\n                } else {\n                    const conditionalField = this.getConditionalFieldFromCurrentSection(),\n                        nextActiveStep = oldState.activeStep + 1,\n                        nextActiveSection = this.getFormObject().section_titles[nextActiveStep];\n                    let newState = {\n                        activeStep: nextActiveStep,\n                        activeSection: nextActiveSection,\n                        conditional: conditionalField ? conditionalField : oldState.conditional,\n                        nextSection: false,\n                    };\n                    if (conditionalField) {\n                        let formContents = this.getFormObject(),\n                            title = nextActiveSection;\n                        // create blank fields based on form type\n                        newState[title] = {};\n                        formContents[nextActiveSection][conditionalField].forEach((field) => {\n                            newState[title][field.name] = \"\";\n                        });\n                        // create validated state for each field\n                        newState[`${title}_validated`] = {};\n                        formContents[nextActiveSection][conditionalField].forEach((field) => {\n                            newState[`${title}_validated`][field.name] = true;\n                        });\n                    }\n                    return newState;\n                }\n            } else {\n                return {};\n            }\n        }, () => {\n            this.setState({\n                nextSection: this.validateSection(),\n            });\n        });\n    }\n\n    // Regresses to previous section in registration form\n    handleBack() {\n        this.setState((oldState) => {\n            if (oldState.activeStep !== 0 && oldState.activeSection) {\n                return {\n                    activeStep: oldState.activeStep - 1,\n                    activeSection: this.getFormObject().section_titles[oldState.activeStep - 1],\n                };\n            } else {\n                return {};\n            }\n        }, () => {\n            this.setState({\n                nextSection: this.validateSection(),\n            });\n        });\n    }\n\n    handleReset() {\n        this.setState({activeStep: 0});\n    }\n\n    handleFieldUpdate(sectionTitle, field, fieldValue) {\n        this.setState((oldState) => {\n            oldState[sectionTitle][field.name] = fieldValue;\n            return oldState;\n        });\n    }\n\n    validateField(sectionTitle, field, fieldValue) {\n        this.setState((oldState) => {\n            if (!fieldValue) { // if empty field\n                oldState[`${sectionTitle}_validated`][field.name] = !field.required;\n            } else if (InputValidation(fieldValue, field.type)) { // if valid input\n                let isValid = true;\n                if (field.type === \"number\") {\n                    // parse if number\n                    oldState[sectionTitle][field.name] = parseInt(fieldValue, 10);\n                } else if (field.type === \"email\") {\n                    let emails = [];\n                    if (field.field === \"Student Email\") {\n                        emails = Object.values(this.props.students).map(({email}) => email);\n                    }\n                    // validate that email doesn't exist in database already\n                    isValid = !emails.includes(fieldValue) || this.state.preLoaded;\n                    if (!isValid) {\n                        oldState.existingUser = true;\n                    }\n                }\n                oldState[`${sectionTitle}_validated`][field.name] = isValid;\n            } else {\n                oldState[`${sectionTitle}_validated`][field.name] = false;\n            }\n            return oldState;\n        }, () => {\n            this.setState({\n                nextSection: this.validateSection(),\n            }, () => {\n                sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n            });\n        });\n    }\n\n    onSelectChange(value, label, field) {\n        if (field.type === \"select parent\") {\n            if (value) {\n                this.setState((OldState) => {\n                    let NewState = OldState;\n                    const selectedParentID = value.value;\n                    const parent = this.props.parents[selectedParentID];\n                    NewState[label] = {\n                        \"Select Parent\": {\n                            value: selectedParentID,\n                            label: `${selectedParentID}: ${parent.name} - ${parent.email}`,\n                        },\n                        \"Parent First Name\": parent.first_name,\n                        \"Parent Last Name\": parent.last_name,\n                        \"Gender\": parent.gender,\n                        \"Parent Email\": parent.email,\n                        \"Address\": parent.address,\n                        \"City\": parent.city,\n                        \"State\": parent.state,\n                        \"Zip Code\": parent.zipcode,\n                        \"Relationship to Student\": parent.relationship,\n                        \"Parent Phone Number\": parent.phone_number,\n                        \"user_id\": selectedParentID,\n                    };\n                    Object.keys(NewState[label]).forEach((key) => {\n                        NewState[`${label}_validated`][key] = true;\n                    });\n                    return NewState;\n                }, () => {\n                    this.validateSection();\n                    this.setState({nextSection: true});\n                });\n            } else {\n                this.setState((OldState) => {\n                    let NewState = OldState;\n                    NewState[label] = {\n                        \"Select Parent\": null,\n                        \"Parent First Name\": \"\",\n                        \"Parent Last Name\": \"\",\n                        \"Gender\": \"\",\n                        \"Parent Email\": \"\",\n                        \"Address\": \"\",\n                        \"City\": \"\",\n                        \"State\": \"\",\n                        \"Zip Code\": \"\",\n                        \"Relationship to Student\": \"\",\n                        \"Parent Phone Number\": \"\",\n                        \"user_id\": \"\",\n                    };\n                    Object.keys(NewState[label]).forEach((key) => {\n                        NewState[`${label}_validated`][key] = true;\n                    });\n                    NewState.nextSection = false;\n                    return NewState;\n                });\n            }\n        } else {\n            this.setState((OldState) => {\n                let NewState = OldState;\n                NewState[label][field.name] = value;\n                return NewState;\n            }, () => {\n                this.validateField(this.state.activeSection, field, value);\n            });\n        }\n    }\n\n    // removes duplicates with arr1 from arr2 from search select field\n    removeDuplicates(arr1, arr2) {\n        let stringValue, stringOtherValue;\n        arr1.forEach((value) => {\n            if (value) {\n                stringValue = value.value;\n            } else {\n                stringValue = \"\";\n            }\n            arr2.forEach((otherValue, j) => {\n                if (otherValue) {\n                    stringOtherValue = otherValue.value;\n                } else {\n                    stringOtherValue = \"\";\n                }\n                if (stringValue === stringOtherValue) {\n                    arr2[j] = \"1\";\n                }\n            });\n        });\n        let uniqueVals = [...new Set(arr2)], indexOfString = -1;\n        uniqueVals.forEach((value, i) => {\n            if (typeof value === \"string\") {\n                indexOfString = i;\n            }\n        });\n        if (indexOfString > -1) {\n            uniqueVals.splice(indexOfString, 1);\n        }\n        return uniqueVals;\n    }\n\n    renderField(field, label, fieldIndex) {\n        let fieldTitle = field.name;\n        switch (field.type) {\n            case \"select\":\n                return <FormControl className={\"form-control\"}>\n                    <InputLabel htmlFor={fieldTitle}>{fieldTitle}</InputLabel>\n                    <Select\n                        displayEmpty={false}\n                        value={this.state[label][fieldTitle]}\n                        onChange={({target}) => {\n                            this.onSelectChange(target.value, label, field);\n                        }}>\n                        {\n                            field.options.map((option) => {\n                                return <MenuItem value={option} key={option}>\n                                    <em>{option}</em>\n                                </MenuItem>\n                            }\n\n                            )\n                        }\n                    </Select>\n                </FormControl>;\n            case \"course\": {\n                let courseList = Object.keys(this.props.courses)\n                    .filter((courseID) =>\n                        this.props.courses[courseID].capacity >\n                        this.props.courses[courseID].roster.length)\n                    .map((courseID) => ({\n                        \"value\": courseID,\n                        \"label\": this.props.courses[courseID].title,\n                    }));\n                // remove preselected courses\n                courseList = this.removeDuplicates(Object.values(this.state[label]), courseList);\n                // count # of course fields in current section\n                const fieldCount = this.getActiveSection()\n                    .reduce((total, {type}) => total + (type === \"course\"), 0);\n                return (\n                    <div style={{width: \"inherit\"}}>\n                        <Grid container className={\"student-align\"} spacing={2000}>\n                            <SearchSelect\n                                value={this.state[label][fieldTitle]}\n                                onChange={(value) => {\n                                    this.onSelectChange(value, label, field);\n                                }}\n                                options={courseList}\n                                className=\"search-options\" />\n                            {\n                                (fieldCount > 1) &&\n                                <RemoveIcon color=\"primary\" aria-label=\"Add\" variant=\"extended\"\n                                    className=\"button-remove-student\"\n                                    onClick={(event) => {\n                                        event.preventDefault();\n                                        // deletes answer field from state\n                                        this.removeField(fieldIndex);\n                                        this.forceUpdate();\n                                    }}>\n                                </RemoveIcon>\n                            }\n                        </Grid>\n                    </div>\n                );\n            }\n            case \"student\": {\n                let studentList = Object.values(this.props.students)\n                    .map(({user_id, name, email}) => ({\n                        value: user_id,\n                        label: `${name} - ${email}`,\n                    }));\n\n                studentList = this.removeDuplicates(Object.values(this.state[label]), studentList);\n\n                // count # of course fields in current section\n                const studentCount = this.getActiveSection()\n                    .reduce((total, {type}) => total + (type === \"student\"), 0);\n\n                return (\n                    <div style={{width: \"inherit\"}}>\n                        <Grid container className={\"student-align\"} spacing={2000}>\n                            <SearchSelect\n                                value={this.state[label][fieldTitle] ? this.state[label][fieldTitle] : \"\"}\n                                onChange={(value) => {\n                                    this.onSelectChange(value, label, field);\n                                }}\n                                options={studentList}\n                                className=\"search-options\" />\n                            {\n                                studentCount > 1 &&\n                                <RemoveIcon color=\"primary\" aria-label=\"Add\" variant=\"extended\"\n                                    className=\"button-remove-student\"\n                                    onClick={(event) => {\n                                        event.preventDefault();\n                                        // deletes answer field\n                                        this.removeField(fieldIndex);\n                                        this.forceUpdate();\n                                    }}>\n                                </RemoveIcon>\n                            }\n                        </Grid>\n                    </div>\n                );\n            }\n            case \"instructor\": {\n                let instructorList = this.props.instructors;\n\n                instructorList = Object.values(instructorList).map(({user_id, name, email}) => ({\n                    value: user_id,\n                    label: `${name} - ${email}`,\n                }));\n                instructorList = this.removeDuplicates(Object.values(this.state[label]), instructorList);\n                return (<div style={{width: \"inherit\"}}>\n                    <Grid container className=\"student-align\" spacing={2000}>\n                        <SearchSelect\n                            value={this.state[label][fieldTitle] ? this.state[label][fieldTitle] : \"\"}\n                            onChange={(value) => {\n                                this.onSelectChange(value, label, field);\n                            }}\n                            options={instructorList}\n                            className=\"search-options\" />\n                    </Grid>\n                </div>);\n            }\n            case \"select parent\": {\n                const currParentList = Object.values(this.props.parents)\n                    .map(({user_id, name, email}) => ({\n                        value: user_id,\n                        label: `${name} - ${email}`,\n                    }));\n                return (\n                    <SearchSelect\n                        className=\"search-options\"\n                        isClearable\n                        onChange={(value) => {\n                            this.onSelectChange(value, label, field);\n                        }}\n                        value={this.state[label][fieldTitle]}\n                        options={currParentList}\n                    />\n                );\n            }\n            default:\n                return <TextField\n                    label={field.name}\n                    multiline={field.multiline}\n                    margin=\"normal\"\n                    value={this.state[label][field.name]}\n                    error={!this.state[label + \"_validated\"][field.name]}\n                    helperText={!this.state[label + \"_validated\"][field.name] ? field.name + \" invalid\" : \"\"}\n                    type={field.type === \"number\" ? \"Number\" : \"text\"}\n                    required={field.required}\n                    fullWidth={field.full}\n                    onChange={(e) => {\n                        e.preventDefault();\n                        this.handleFieldUpdate.bind(this)(label, field, e.target.value);\n                    }}\n                    onBlur={(e) => {\n                        e.preventDefault();\n                        this.validateField.bind(this)(label, field, e.target.value);\n                    }}\n                />\n        }\n    }\n\n    addField(field, fieldIndex) {\n        const currentForm = this.getFormObject();\n        let param = [this.state.form, this.state.activeSection, fieldIndex];\n        if (!Array.isArray(currentForm[this.state.activeSection])) {\n            param.splice(2, 0, this.state.conditional);\n        }\n        this.props.registrationActions.addField(param);\n        this.setState((prevState) => {\n            // number of fields of the same type as the current field\n            const {form, activeSection, conditional} = prevState;\n            let section = this.props.registrationForm[form][activeSection];\n            if (!Array.isArray(section)) {\n                section = section[conditional];\n            }\n            const numSameTypeFields = section.reduce((count, otherField) =>\n                count + (field === otherField.field), 0);\n            if (Array.isArray(prevState[activeSection])) {\n                prevState[activeSection][`${field} ${numSameTypeFields}`] = null;\n                prevState[`${activeSection}_validated`][`${field} ${numSameTypeFields}`] = true;\n            } else {\n                prevState[activeSection][`${field} ${numSameTypeFields}`] = null;\n                prevState[`${activeSection}_validated`][`${field} ${numSameTypeFields}`] = true;\n            }\n            return prevState;\n        }, () => {\n            sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n        });\n        // for some reason it isn't rerendering automatically\n    }\n\n    removeField(fieldIndex) {\n        this.setState((prevState) => {\n            const currentSectionFields = prevState[prevState[\"activeSection\"]];\n            const currentSectionValidationFields = prevState[`${prevState[\"activeSection\"]}_validated`];\n            let baseName;\n            let newSectionFields = {};\n            let newSectionValidationFields = {};\n            let index = 0;\n            let hasNotRemoved = true;\n\n            Object.entries(currentSectionFields).forEach(([origFieldKey, fieldValue]) => {\n                if (index === 0 && hasNotRemoved) {\n                    baseName = origFieldKey;\n                }\n                if (index === fieldIndex && hasNotRemoved) {\n                    hasNotRemoved = false;\n                    return;\n                }\n                let newFieldName = index === 0 ? baseName : `${baseName} ${index + 1}`;\n                newSectionFields[newFieldName] = fieldValue;\n                newSectionValidationFields[newFieldName] = currentSectionValidationFields[origFieldKey];\n                index++;\n            });\n\n            prevState[prevState[\"activeSection\"]] = newSectionFields;\n            prevState[`${prevState[\"activeSection\"]}_validated`] = newSectionValidationFields;\n            //save to session Storage\n            sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n            return prevState;\n        }, () => {\n            //delete field from redux store\n            let param = [this.state.form, this.state.activeSection];\n            this.props.registrationActions.removeField(param, fieldIndex, this.state.conditional);\n            this.forceUpdate();\n        });\n        this.forceUpdate();\n    }\n\n    renderForm() {\n        let {activeStep, nextSection} = this.state,\n            currentForm = this.props.registrationForm[this.state.form],\n            steps = currentForm.section_titles;\n        let section = this.getActiveSection();\n        return (\n            <Stepper\n                activeStep={activeStep}\n                orientation=\"vertical\"\n                className=\"form-section\">\n                {\n                    steps.map((label) => (\n                        <Step key={label}>\n                            <StepLabel>\n                                {label}\n                                {/* {activeStep !== i &&\n                                    Object.entries(this.state[label]).map(([field, value]) => {\n                                        if (!value) {\n                                            return null;\n                                        }\n                                        if (value && value.hasOwnProperty(\"label\")) {\n                                            value = value.label;\n                                        }\n\n                                        return (\n                                            <div key={field}>\n                                                <Typography className=\"field-title\" align=\"left\">\n                                                    {field}: {value}\n                                                </Typography>\n                                            </div>\n                                        );\n                                    })\n                                } */}\n                            </StepLabel>\n                            <StepContent>\n                                {\n                                    section.map((field, j) => {\n                                        // number of fields of the same type as the current field\n                                        const numSameTypeFields = section.reduce((count, otherField) => field.field === otherField.field ? count + 1 : count, 0),\n                                            reversedSection = [...section].reverse(),\n                                            lastFieldOfType = reversedSection.find((otherField) => otherField.field === field.field);\n                                        return (\n                                            <div key={j} className=\"fields-wrapper\" style={{}}>\n                                                <Grid container className=\"student-align\">\n                                                    {label === this.state.activeSection ? this.renderField(field, label, j) : \"\"}\n                                                </Grid>\n                                                <br />\n                                                {\n                                                    !this.props.match.params.course && numSameTypeFields < field.field_limit &&\n                                                    field === lastFieldOfType &&\n                                                    <Fab color=\"primary\" aria-label=\"Add\" variant=\"extended\"\n                                                        className=\"button add-student\"\n                                                        onClick={(event) => {\n                                                            event.preventDefault();\n                                                            this.addField(field.field, j);\n                                                        }}>\n                                                        <AddIcon />\n                                                        Add {field.field}\n                                                    </Fab>\n                                                }\n\n                                            </div>\n                                        );\n                                    })\n                                }\n                                <div className=\"controls\">\n                                    <Button\n                                        disabled={activeStep === 0}\n                                        color=\"secondary\"\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            this.handleBack();\n                                        }}\n                                        className={`button ${activeStep === 0 ? \"hide\" : \"\"}`}>\n                                        Back\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        disabled={!nextSection}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            this.handleNext();\n                                        }}\n                                        className=\"button primary\">\n                                        {activeStep === steps.length - 1 ? this.props.submitPending ? \"Submitting\" : \"Submit\" : \"Next\"}\n                                    </Button>\n                                </div>\n                            </StepContent>\n                        </Step>\n                    ))\n                }\n            </Stepper>\n        );\n    }\n\n    // view after a submitted form\n    renderSubmitted() {\n        const currentForm = this.props.registrationForm[this.state.form];\n        const steps = currentForm.section_titles;\n        sessionStorage.removeItem(\"form\");\n        return (\n            <div style={{\n                margin: \"2%\",\n                padding: \"5px\",\n            }}>\n                <Typography align=\"left\" style={{fontSize: \"24px\"}}>\n                    You have successfully registered!\n                </Typography>\n                <Typography align=\"left\" style={{fontSize: \"14px\"}}>\n                    An email will be sent to you to confirm your registration\n                </Typography>\n                <Button\n                    align=\"left\"\n                    component={NavLink}\n                    to=\"/registration\"\n                    onClick={() => {\n                        this.props.registrationActions.resetSubmitStatus();\n                    }}\n                    style={{margin: \"20px\"}}\n                    className=\"button\">Back to Registration</Button>\n                <div className=\"confirmation-copy\">\n                    <Typography className=\"title\" align=\"left\">Confirmation Copy</Typography>\n                    {\n                        steps.map((sectionTitle) => (\n                            <div key={sectionTitle}>\n                                <Typography\n                                    className=\"section-title\"\n                                    align=\"left\">\n                                    {sectionTitle}\n                                </Typography>\n                                {\n                                    this.getActiveSection().map(({field, type}) => {\n                                        let fieldVal = this.state[sectionTitle][field];\n                                        if (fieldVal && fieldVal.hasOwnProperty(\"value\")) {\n                                            fieldVal = fieldVal.value;\n                                            if (type === \"select parent\" && typeof fieldVal === \"number\") {\n                                                fieldVal = this.props.parents[fieldVal].first_name;\n                                            }\n                                        }\n\n                                        return (\n                                            <div key={field}>\n                                                <Typography className=\"field-title\" align=\"left\">\n                                                    {field || \"\"}\n                                                </Typography>\n                                                <Typography className=\"field-value\" align=\"left\">\n                                                    {fieldVal || \"N/A\"}\n                                                </Typography>\n                                            </div>\n                                        );\n                                    })\n                                }\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        );\n    }\n\n    renderTitle(id, type) {\n        switch (type) {\n            case \"course\":\n                return id ? this.props.courses[id].title : \"\";\n            case \"student\": {\n                const student = this.props.students[id];\n                return student ? student.name : \"\";\n            }\n            default:\n                return \"\";\n        }\n    }\n\n    render() {\n        return (\n            <Grid container className=\"\">\n                {/* Determine if finished component is displayed. If not, then don't prompt */}\n                {this.state.submitPending ? \"\" : <Prompt message=\"Are you sure you want to leave?\" />}\n                <Grid item xs={12}>\n                    <Paper className={\"registration-form paper\"}>\n                        <BackButton\n                            warn={true}\n                            onBack={this.onBack}\n                            alertMessage={\"Do you want to save your changes?\"}\n                            alertConfirmText={\"Yes, save changes\"}\n                            confirmAction={\"saveForm\"}\n                            alertDenyText={\"No, don't save changes\"}\n                            denyAction={\"default\"}\n                        />\n                        <Typography className=\"heading\" align=\"left\">\n                            {this.renderTitle(this.props.match.params.id, this.state.form)} {this.props.match.params.type} Registration\n                        </Typography>\n                        {\n                            this.props.submitStatus !== \"success\" ?\n                                this.props.registrationForm[this.state.form] ?\n                                    this.renderForm.bind(this)() :\n                                    <Typography>\n                                        Sorry! The form is unavailable.\n                                    </Typography>\n                                : this.renderSubmitted()\n                        }\n                        <Modal\n                            aria-labelledby=\"simple-modal-title\"\n                            aria-describedby=\"simple-modal-description\"\n                            open={this.state.existingUser}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.setState({existingUser: false})\n                            }}>\n                            <div className=\"existing-user-popup\">\n                                <Typography variant=\"h6\" id=\"modal-title\">\n                                    {\"The user you are entering already exists in the database! Please enter a new email, and check for spelling.\"}\n                                </Typography>\n                                <Button\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        this.setState({existingUser: false})\n                                    }}\n                                    color=\"primary\"\n                                    className=\"button primary\">\n                                    {\"I will enter a new email\"}\n                                </Button>\n                            </div>\n                        </Modal>\n                        {/* Error message on failed submit */}\n                        <Dialog\n                            open={this.props.submitStatus === \"fail\"}\n                            onClose={() => {\n                                this.props.registrationActions.resetSubmitStatus();\n                                this.setState({\n                                    \"submitPending\": false,\n                                }, () => {\n                                    sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n                                });\n                            }}\n                            aria-labelledby=\"alert-dialog-title\"\n                            aria-describedby=\"alert-dialog-description\">\n                            <DialogTitle id=\"alert-dialog-title\">Failed to Submit</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText id=\"alert-dialog-description\">\n                                    There was an error submitting the form. Check all fields and try again.\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={() => {\n                                    this.props.registrationActions.resetSubmitStatus();\n                                    this.setState({\n                                        \"submitPending\": false,\n                                    }, () => {\n                                        sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n                                    });\n                                }} color=\"primary\" autoFocus>\n                                    Go back\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Paper>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        courses: state.Course[\"NewCourseList\"],\n        courseCategories: state.Course[\"CourseCategories\"],\n        registrationForm: state.Registration[\"registration_form\"],\n        submitStatus: state.Registration[\"submitStatus\"],\n        parents: state.Users[\"ParentList\"],\n        students: state.Users[\"StudentList\"],\n        instructors: state.Users[\"InstructorList\"],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        registrationActions: bindActionCreators(registrationActions, dispatch),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Form);\n"]},"metadata":{},"sourceType":"module"}