{"ast":null,"code":"import _objectSpread from \"/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport initialState from './initialState';\nimport * as actions from \"./../actions/actionTypes\";\nexport default function registration(state = initialState.RegistrationForms, {\n  payload,\n  type\n}) {\n  let newState = JSON.parse(JSON.stringify(state));\n\n  switch (type) {\n    case actions.ADD_STUDENT_FIELD:\n      newState = addAStudentField(state);\n      return newState;\n\n    case actions.ADD_COURSE_FIELD:\n      newState = addACourseField(state);\n      return newState;\n\n    case actions.ADD_FIELD:\n      newState = addField(state, payload);\n      return newState;\n\n    case actions.REMOVE_FIELD:\n      let path = payload[0];\n      let removeFieldIndex = payload[1];\n      let conditional = payload[2];\n\n      if (conditional) {\n        path.push(conditional);\n      }\n\n      newState = removeField(state, path, removeFieldIndex, conditional);\n      return newState;\n\n    case actions.POST_STUDENT_SUCCESSFUL:\n      return successSubmit(state);\n\n    case actions.POST_STUDENT_FAILED:\n      return failedSubmit(state);\n\n    case actions.POST_PARENT_SUCCESSFUL:\n      return successSubmit(state);\n\n    case actions.POST_PARENT_FAILED:\n      return failedSubmit(state);\n\n    case actions.POST_INSTRUCTOR_SUCCESSFUL:\n      return successSubmit(state);\n\n    case actions.POST_INSTRUCTOR_FAILED:\n      return failedSubmit(state);\n\n    case actions.SUBMIT_INITIATED:\n      return onSubmit(state);\n\n    case actions.RESET_SUBMIT_STATUS:\n      return onSubmit(state);\n\n    default:\n      return state;\n  }\n}\n\nfunction addAStudentField(prevState) {\n  let SmallGroupList = prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"];\n\n  let NewStudentField = _objectSpread({}, SmallGroupList[0], {\n    field: \"Student \" + (SmallGroupList.length + 1).toString() + \" Name\",\n    required: false\n  });\n\n  SmallGroupList.push(NewStudentField);\n  prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"] = SmallGroupList;\n  return prevState;\n}\n\nfunction addACourseField(prevState) {\n  let NewState = prevState;\n  let CourseFieldList = prevState.registration_form.course[\"Course Selection\"];\n\n  let NewCourseField = _objectSpread({}, CourseFieldList[0], {\n    field: \"Course \" + (CourseFieldList.length + 1).toString() + \" Name\",\n    required: false\n  });\n\n  CourseFieldList.push(NewCourseField);\n  NewState.registration_form.course[\"Course Selection\"] = CourseFieldList;\n  return NewState;\n}\n\nconst addField = (prevState, path) => {\n  let NewState = prevState;\n  let fieldIndex = path.pop();\n  let SectionFieldList = getSectionFieldList(path, prevState.registration_form);\n  let fieldName = SectionFieldList[fieldIndex].field;\n  const numFieldType = SectionFieldList.reduce((total, {\n    field\n  }) => total + (field === fieldName), 1);\n\n  let NewField = _objectSpread({}, SectionFieldList[fieldIndex], {\n    name: \"\".concat(fieldName, \" \").concat(numFieldType),\n    required: false\n  });\n\n  SectionFieldList.push(NewField);\n  setSectionFieldList(path, SectionFieldList, prevState.registration_form);\n  return NewState;\n};\n\nfunction removeField(prevState, path, fieldIndex, conditional) {\n  let NewState = prevState;\n  let SectionFieldList = getSectionFieldList(JSON.parse(JSON.stringify(path)), prevState.registration_form);\n\n  if (SectionFieldList.length <= 1) {\n    return prevState;\n  }\n\n  SectionFieldList = SectionFieldList.slice(0, fieldIndex).concat(SectionFieldList.slice(fieldIndex + 1));\n  let fieldCounts = {};\n  SectionFieldList = SectionFieldList.map((field, i) => {\n    if (!fieldCounts.hasOwnProperty(field.field)) {\n      fieldCounts[field.field] = 1;\n      return _objectSpread({}, field, {\n        \"name\": field.field\n      });\n    }\n\n    fieldCounts[field.field]++;\n    return _objectSpread({}, field, {\n      \"name\": \"\".concat(field.field, \" \").concat(fieldCounts[field.field])\n    });\n  });\n\n  if (conditional) {\n    NewState[\"registration_form\"][path[0]][path[1]][conditional] = SectionFieldList;\n  } else {\n    NewState[\"registration_form\"][path[0]][path[1]] = SectionFieldList;\n  }\n\n  return NewState;\n}\n\nfunction getSectionFieldList(path, formList) {\n  if (Array.isArray(path)) {\n    if (path.length === 0) {\n      return formList;\n    }\n\n    return getSectionFieldList(path, formList[path.shift()]);\n  }\n\n  Error(\"Path variable not an array\");\n}\n\nfunction setSectionFieldList(path, formList, form) {\n  if (Array.isArray(path)) {\n    if (path.length === 0) {\n      form = formList;\n      return;\n    }\n\n    let firstPathStep = path.shift();\n    return setSectionFieldList(path, formList, form[firstPathStep]);\n  }\n\n  Error(\"Path variable not an array\");\n}\n\nconst onSubmit = state => _objectSpread({}, state, {\n  \"submitStatus\": null\n});\n\nconst successSubmit = state => _objectSpread({}, state, {\n  \"submitStatus\": \"success\"\n});\n\nconst failedSubmit = state => _objectSpread({}, state, {\n  \"submitStatus\": \"fail\"\n});","map":{"version":3,"sources":["/Users/4e65696c/Documents/GitHub/front-end/omou-frontend/src/reducers/registrationReducer.js"],"names":["initialState","actions","registration","state","RegistrationForms","payload","type","newState","JSON","parse","stringify","ADD_STUDENT_FIELD","addAStudentField","ADD_COURSE_FIELD","addACourseField","ADD_FIELD","addField","REMOVE_FIELD","path","removeFieldIndex","conditional","push","removeField","POST_STUDENT_SUCCESSFUL","successSubmit","POST_STUDENT_FAILED","failedSubmit","POST_PARENT_SUCCESSFUL","POST_PARENT_FAILED","POST_INSTRUCTOR_SUCCESSFUL","POST_INSTRUCTOR_FAILED","SUBMIT_INITIATED","onSubmit","RESET_SUBMIT_STATUS","prevState","SmallGroupList","registration_form","tutoring","NewStudentField","field","length","toString","required","NewState","CourseFieldList","course","NewCourseField","fieldIndex","pop","SectionFieldList","getSectionFieldList","fieldName","numFieldType","reduce","total","NewField","name","setSectionFieldList","slice","concat","fieldCounts","map","i","hasOwnProperty","formList","Array","isArray","shift","Error","form","firstPathStep"],"mappings":"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","sourcesContent":["import initialState from './initialState';\nimport * as actions from \"./../actions/actionTypes\"\n\nexport default function registration(state = initialState.RegistrationForms, {payload, type}) {\n    let newState = JSON.parse(JSON.stringify(state));\n    switch (type) {\n        case actions.ADD_STUDENT_FIELD:\n            newState = addAStudentField(state);\n            return newState;\n        case actions.ADD_COURSE_FIELD:\n            newState = addACourseField(state);\n            return newState;\n        case actions.ADD_FIELD:\n            newState = addField(state, payload);\n            return newState;\n        case actions.REMOVE_FIELD:\n            let path = payload[0];\n            let removeFieldIndex = payload[1];\n            let conditional = payload[2];\n            if (conditional) {\n                path.push(conditional);\n            }\n            newState = removeField(state, path, removeFieldIndex, conditional);\n            return newState;\n        case actions.POST_STUDENT_SUCCESSFUL:\n            return successSubmit(state);\n        case actions.POST_STUDENT_FAILED:\n            return failedSubmit(state);\n        case actions.POST_PARENT_SUCCESSFUL:\n            return successSubmit(state);\n        case actions.POST_PARENT_FAILED:\n            return failedSubmit(state);\n        case actions.POST_INSTRUCTOR_SUCCESSFUL:\n            return successSubmit(state);\n        case actions.POST_INSTRUCTOR_FAILED:\n            return failedSubmit(state);\n        case actions.SUBMIT_INITIATED:\n            return onSubmit(state);\n        case actions.RESET_SUBMIT_STATUS:\n            return onSubmit(state);\n        default:\n            return state;\n    }\n}\n\nfunction addAStudentField(prevState) {\n    let SmallGroupList = prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"];\n    let NewStudentField = {\n        ...SmallGroupList[0],\n        field: \"Student \" + (SmallGroupList.length + 1).toString() + \" Name\",\n        required: false,\n    };\n    SmallGroupList.push(NewStudentField);\n    prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"] = SmallGroupList;\n    return prevState;\n}\n\nfunction addACourseField(prevState) {\n    let NewState = prevState;\n    let CourseFieldList = prevState.registration_form.course[\"Course Selection\"];\n    let NewCourseField = {\n        ...CourseFieldList[0],\n        field: \"Course \" + (CourseFieldList.length + 1).toString() + \" Name\",\n        required: false,\n    }\n    CourseFieldList.push(NewCourseField);\n    NewState.registration_form.course[\"Course Selection\"] = CourseFieldList;\n    return NewState;\n}\n\nconst addField = (prevState, path) => {\n    let NewState = prevState;\n    let fieldIndex = path.pop();\n    let SectionFieldList = getSectionFieldList(path, prevState.registration_form);\n    let fieldName = SectionFieldList[fieldIndex].field;\n    const numFieldType = SectionFieldList.reduce((total, {field}) => total + (field === fieldName), 1);\n    let NewField = {\n        ...SectionFieldList[fieldIndex],\n        name: `${fieldName} ${numFieldType}`,\n        required: false,\n    };\n    SectionFieldList.push(NewField);\n    setSectionFieldList(path, SectionFieldList, prevState.registration_form);\n    return NewState;\n};\n\nfunction removeField(prevState, path, fieldIndex, conditional) {\n    let NewState = prevState;\n    let SectionFieldList =\n        getSectionFieldList(JSON.parse(JSON.stringify(path)), prevState.registration_form);\n\n    if (SectionFieldList.length <= 1) {\n        return prevState;\n    }\n\n    SectionFieldList = SectionFieldList.slice(0, fieldIndex).concat(SectionFieldList.slice(fieldIndex + 1));\n\n    let fieldCounts = {};\n\n    SectionFieldList = SectionFieldList.map((field, i) => {\n        if (!fieldCounts.hasOwnProperty(field.field)) {\n            fieldCounts[field.field] = 1;\n            return {\n                ...field,\n                \"name\": field.field,\n            };\n        }\n\n        fieldCounts[field.field]++;\n        return {\n            ...field,\n            \"name\": `${field.field} ${fieldCounts[field.field]}`,\n        };\n    });\n\n    if (conditional) {\n        NewState[\"registration_form\"][path[0]][path[1]][conditional] = SectionFieldList;\n    } else {\n        NewState[\"registration_form\"][path[0]][path[1]] = SectionFieldList;\n    }\n    return NewState;\n}\n\nfunction getSectionFieldList(path, formList) {\n    if (Array.isArray(path)) {\n        if (path.length === 0) {\n            return formList;\n        }\n        return getSectionFieldList(path, formList[path.shift()])\n    }\n    Error(\"Path variable not an array\");\n}\n\nfunction setSectionFieldList(path, formList, form) {\n    if (Array.isArray(path)) {\n        if (path.length === 0) {\n            form = formList;\n            return;\n        }\n        let firstPathStep = path.shift();\n        return setSectionFieldList(path, formList, form[firstPathStep])\n    }\n    Error(\"Path variable not an array\");\n}\n\nconst onSubmit = (state) => ({\n    ...state,\n    \"submitStatus\": null,\n});\n\nconst successSubmit = (state) => ({\n    ...state,\n    \"submitStatus\": \"success\",\n});\n\nconst failedSubmit = (state) => ({\n    ...state,\n    \"submitStatus\": \"fail\",\n});\n"]},"metadata":{},"sourceType":"module"}